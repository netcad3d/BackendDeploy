{
  "version": 3,
  "sources": ["../../@kitware/vtk.js/Rendering/OpenGL/Actor.js", "../../@kitware/vtk.js/Rendering/OpenGL/Actor2D.js", "../../@kitware/vtk.js/Rendering/Core/CubeAxesActor.js", "../../@kitware/vtk.js/Rendering/OpenGL/CubeAxesActor.js", "../../@kitware/vtk.js/Rendering/OpenGL/PolyDataMapper.js", "../../@kitware/vtk.js/Rendering/Core/Mapper2D.js", "../../@kitware/vtk.js/Rendering/OpenGL/glsl/vtkPolyData2DFS.glsl.js", "../../@kitware/vtk.js/Rendering/OpenGL/glsl/vtkPolyData2DVS.glsl.js", "../../@kitware/vtk.js/Rendering/Core/Property2D/Constants.js", "../../@kitware/vtk.js/Rendering/OpenGL/PolyDataMapper2D.js", "../../@kitware/vtk.js/Rendering/OpenGL/ScalarBarActor.js", "../../@kitware/vtk.js/Rendering/OpenGL/Skybox.js", "../../@kitware/vtk.js/Rendering/WebGPU/Actor.js", "../../@kitware/vtk.js/Rendering/WebGPU/Actor2D.js", "../../@kitware/vtk.js/Rendering/WebGPU/CubeAxesActor.js", "../../@kitware/vtk.js/Rendering/Core/Property2D.js", "../../@kitware/vtk.js/Rendering/WebGPU/CellArrayMapper.js", "../../@kitware/vtk.js/Rendering/WebGPU/PolyDataMapper.js", "../../@kitware/vtk.js/Rendering/WebGPU/PolyDataMapper2D.js", "../../@kitware/vtk.js/Rendering/WebGPU/ScalarBarActor.js"],
  "sourcesContent": ["import { mat3, mat4 } from 'gl-matrix';\nimport { newInstance as newInstance$1, obj, setGet, get } from '../../macros.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// vtkOpenGLActor methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLActor(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLActor'); // Builds myself.\n\n  publicAPI.buildPass = function (prepass) {\n    if (prepass) {\n      model._openGLRenderWindow = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderWindow');\n      model.openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model.context = model._openGLRenderWindow.getContext();\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNodes(model.renderable.getTextures());\n      publicAPI.addMissingNode(model.renderable.getMapper());\n      publicAPI.removeUnusedNodes(); // we store textures and mapper\n\n      model.ogltextures = null;\n      model.activeTextures = null;\n\n      for (var index = 0; index < model.children.length; index++) {\n        var child = model.children[index];\n\n        if (child.isA('vtkOpenGLTexture')) {\n          if (!model.ogltextures) {\n            model.ogltextures = [];\n          }\n\n          model.ogltextures.push(child);\n        } else {\n          model.oglmapper = child;\n        }\n      }\n    }\n  };\n\n  publicAPI.traverseOpaqueZBufferPass = function (renderPass) {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || model.openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n\n    publicAPI.apply(renderPass, true);\n    model.oglmapper.traverse(renderPass);\n    publicAPI.apply(renderPass, false);\n  }; // we draw textures, then mapper, then post pass textures\n\n\n  publicAPI.traverseOpaquePass = function (renderPass) {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || !model.renderable.getIsOpaque() || model.openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n\n    publicAPI.apply(renderPass, true);\n    model.oglmapper.traverse(renderPass);\n    publicAPI.apply(renderPass, false);\n  }; // we draw textures, then mapper, then post pass textures\n\n\n  publicAPI.traverseTranslucentPass = function (renderPass) {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || model.renderable.getIsOpaque() || model.openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n\n    publicAPI.apply(renderPass, true);\n    model.oglmapper.traverse(renderPass);\n    publicAPI.apply(renderPass, false);\n  };\n\n  publicAPI.activateTextures = function () {\n    // always traverse textures first, then mapper\n    if (!model.ogltextures) {\n      return;\n    }\n\n    model.activeTextures = [];\n\n    for (var index = 0; index < model.ogltextures.length; index++) {\n      var child = model.ogltextures[index];\n      child.render();\n\n      if (child.getHandle()) {\n        model.activeTextures.push(child);\n      }\n    }\n  };\n\n  publicAPI.queryPass = function (prepass, renderPass) {\n    if (prepass) {\n      if (!model.renderable || !model.renderable.getVisibility()) {\n        return;\n      }\n\n      if (model.renderable.getIsOpaque()) {\n        renderPass.incrementOpaqueActorCount();\n      } else {\n        renderPass.incrementTranslucentActorCount();\n      }\n    }\n  };\n\n  publicAPI.opaqueZBufferPass = function (prepass, renderPass) {\n    return publicAPI.opaquePass(prepass, renderPass);\n  };\n\n  publicAPI.opaquePass = function (prepass, renderPass) {\n    if (prepass) {\n      model.context.depthMask(true);\n      publicAPI.activateTextures();\n    } else if (model.activeTextures) {\n      for (var index = 0; index < model.activeTextures.length; index++) {\n        model.activeTextures[index].deactivate();\n      }\n    }\n  }; // Renders myself\n\n\n  publicAPI.translucentPass = function (prepass, renderPass) {\n    if (prepass) {\n      model.context.depthMask(false);\n      publicAPI.activateTextures();\n    } else if (model.activeTextures) {\n      for (var index = 0; index < model.activeTextures.length; index++) {\n        model.activeTextures[index].deactivate();\n      }\n    }\n  };\n\n  publicAPI.getKeyMatrices = function () {\n    // has the actor changed?\n    if (model.renderable.getMTime() > model.keyMatrixTime.getMTime()) {\n      model.renderable.computeMatrix();\n      mat4.copy(model.keyMatrices.mcwc, model.renderable.getMatrix());\n      mat4.transpose(model.keyMatrices.mcwc, model.keyMatrices.mcwc);\n\n      if (model.renderable.getIsIdentity()) {\n        mat3.identity(model.keyMatrices.normalMatrix);\n      } else {\n        mat3.fromMat4(model.keyMatrices.normalMatrix, model.keyMatrices.mcwc);\n        mat3.invert(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);\n        mat3.transpose(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);\n      }\n\n      model.keyMatrixTime.modified();\n    }\n\n    return model.keyMatrices;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  context: null,\n  keyMatrixTime: null,\n  keyMatrices: null,\n  activeTextures: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.keyMatrixTime = {};\n  obj(model.keyMatrixTime, {\n    mtime: 0\n  });\n  model.keyMatrices = {\n    normalMatrix: mat3.identity(new Float64Array(9)),\n    mcwc: mat4.identity(new Float64Array(16))\n  }; // Build VTK API\n\n  setGet(publicAPI, model, ['context']);\n  get(publicAPI, model, ['activeTextures']); // Object methods\n\n  vtkOpenGLActor(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend); // ----------------------------------------------------------------------------\n\nvar vtkActor = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to OpenGL backend if imported\n\nregisterOverride('vtkActor', newInstance);\n\nexport { vtkActor as default, extend, newInstance };\n", "import { newInstance as newInstance$1, setGet, get } from '../../macros.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// vtkOpenGLActor methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLActor2D(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLActor2D'); // Builds myself.\n\n  publicAPI.buildPass = function (prepass) {\n    if (prepass) {\n      if (!model.renderable) {\n        return;\n      }\n\n      model._openGLRenderWindow = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderWindow');\n      model.openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model.context = model._openGLRenderWindow.getContext();\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNodes(model.renderable.getTextures());\n      publicAPI.addMissingNode(model.renderable.getMapper());\n      publicAPI.removeUnusedNodes(); // we store textures and mapper\n\n      model.ogltextures = null;\n      model.activeTextures = null;\n\n      for (var index = 0; index < model.children.length; index++) {\n        var child = model.children[index];\n\n        if (child.isA('vtkOpenGLTexture')) {\n          if (!model.ogltextures) {\n            model.ogltextures = [];\n          }\n\n          model.ogltextures.push(child);\n        } else {\n          model.oglmapper = child;\n        }\n      }\n    }\n  };\n\n  publicAPI.queryPass = function (prepass, renderPass) {\n    if (prepass) {\n      if (!model.renderable || !model.renderable.getVisibility()) {\n        return;\n      }\n\n      renderPass.incrementOverlayActorCount();\n    }\n  }; // we draw textures, then mapper, then post pass textures\n\n\n  publicAPI.traverseOpaquePass = function (renderPass) {\n    if (!model.oglmapper || !model.renderable || !model.renderable.getNestedVisibility() || !model.renderable.getIsOpaque() || model.openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n\n    publicAPI.apply(renderPass, true);\n    model.oglmapper.traverse(renderPass);\n    publicAPI.apply(renderPass, false);\n  }; // we draw textures, then mapper, then post pass textures\n\n\n  publicAPI.traverseTranslucentPass = function (renderPass) {\n    if (!model.oglmapper || !model.renderable || !model.renderable.getNestedVisibility() || model.renderable.getIsOpaque() || model.openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n\n    publicAPI.apply(renderPass, true);\n    model.oglmapper.traverse(renderPass);\n    publicAPI.apply(renderPass, false);\n  };\n\n  publicAPI.traverseOverlayPass = function (renderPass) {\n    if (!model.oglmapper || !model.renderable || !model.renderable.getNestedVisibility() || model.openGLRenderer.getSelector() && !model.renderable.getNestedPickable) {\n      return;\n    }\n\n    publicAPI.apply(renderPass, true);\n    model.oglmapper.traverse(renderPass);\n    publicAPI.apply(renderPass, false);\n  };\n\n  publicAPI.activateTextures = function () {\n    // always traverse textures first, then mapper\n    if (!model.ogltextures) {\n      return;\n    }\n\n    model.activeTextures = [];\n\n    for (var index = 0; index < model.ogltextures.length; index++) {\n      var child = model.ogltextures[index];\n      child.render();\n\n      if (child.getHandle()) {\n        model.activeTextures.push(child);\n      }\n    }\n  }; // Renders myself\n\n\n  publicAPI.opaquePass = function (prepass, renderPass) {\n    if (prepass) {\n      model.context.depthMask(true);\n      publicAPI.activateTextures();\n    } else if (model.activeTextures) {\n      // deactivate textures\n      for (var index = 0; index < model.activeTextures.length; index++) {\n        model.activeTextures[index].deactivate();\n      }\n    }\n  }; // Renders myself\n\n\n  publicAPI.translucentPass = function (prepass, renderPass) {\n    if (prepass) {\n      model.context.depthMask(false);\n      publicAPI.activateTextures();\n    } else if (model.activeTextures) {\n      for (var index = 0; index < model.activeTextures.length; index++) {\n        model.activeTextures[index].deactivate();\n      }\n    }\n  }; // Renders myself\n\n\n  publicAPI.overlayPass = function (prepass, renderPass) {\n    if (prepass) {\n      model.context.depthMask(true);\n      publicAPI.activateTextures();\n    } else if (model.activeTextures) {\n      // deactivate textures\n      for (var index = 0; index < model.activeTextures.length; index++) {\n        model.activeTextures[index].deactivate();\n      }\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  context: null,\n  activeTextures: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues); // Build VTK API\n\n  setGet(publicAPI, model, ['context']);\n  get(publicAPI, model, ['activeTextures']); // Object methods\n\n  vtkOpenGLActor2D(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend); // ----------------------------------------------------------------------------\n\nvar vtkActor2D = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to OpenGL backend if imported\n\nregisterOverride('vtkActor2D', newInstance);\n\nexport { vtkActor2D as default, extend, newInstance };\n", "import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { vec3, mat4 } from 'gl-matrix';\nimport * as d3 from 'd3-scale';\nimport { M as normalize2D, N as nearestPowerOfTwo } from '../../Common/Core/Math/index.js';\nimport macro from '../../macros.js';\nimport vtkActor from './Actor.js';\nimport vtkBoundingBox from '../../Common/DataModel/BoundingBox.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkMapper from './Mapper.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkTexture from './Texture.js';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n// vtkCubeAxesActor\n// ----------------------------------------------------------------------------\n// faces are -x x -y y -z z\n// point 0 is 0,0,0 and then +x fastest changing, +y then +z\n\nvar faceNormals = [[-1, 0, 0], [1, 0, 0], [0, -1, 0], [0, 1, 0], [0, 0, -1], [0, 0, 1]];\nvar faceEdges = [[8, 7, 11, 3], [9, 1, 10, 5], [4, 9, 0, 8], [2, 11, 6, 10], [0, 3, 2, 1], [4, 5, 6, 7]];\nvar edgePoints = [[0, 1], [1, 3], [2, 3], [0, 2], [4, 5], [5, 7], [6, 7], [4, 6], [0, 4], [1, 5], [3, 7], [2, 6]];\nvar edgeAxes = [0, 1, 0, 1, 0, 1, 0, 1, 2, 2, 2, 2];\nvar faceAxes = [[1, 2], [1, 2], [0, 2], [0, 2], [0, 1], [0, 1]]; //\n// Developer note: This class is broken into the main class and a helper\n// class. The main class holds view independent properties (those properties\n// that do not change as the view's resolution/aspect ratio change). The\n// helper class is instantiated one per view and holds properties that can\n// depend on view specific values such as resolution. The helper class code\n// could have been left to the View specific implementation (such as\n// vtkWebGPUCubeAxesActor) but is instead placed here to it can be shared by\n// multiple rendering backends.\n//\n// some shared temp variables to reduce heap allocs\n\nvar ptv3 = new Float64Array(3);\nvar pt2v3 = new Float64Array(3);\nvar tmpv3 = new Float64Array(3);\nvar tmp2v3 = new Float64Array(3);\nvar xDir = new Float64Array(3);\nvar yDir = new Float64Array(3);\nvar invmat = new Float64Array(16);\n\nfunction applyTextStyle(ctx, style) {\n  ctx.strokeStyle = style.strokeColor;\n  ctx.lineWidth = style.strokeSize;\n  ctx.fillStyle = style.fontColor;\n  ctx.font = \"\".concat(style.fontStyle, \" \").concat(style.fontSize, \"px \").concat(style.fontFamily);\n} // many properties of this actor depend on the API specific view The main\n// dependency being the resolution as that drives what font sizes to use.\n// Bacause of this we need to do some of the calculations in a API specific\n// subclass. But... we don't want a lot of duplicated code between WebGL and\n// WebGPU for example so we have this helper class, that is designed to be\n// fairly API independent so that API specific views can call this to do\n// most of the work.\n\n\nfunction vtkCubeAxesActorHelper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkCubeAxesActorHelper');\n\n  publicAPI.setRenderable = function (renderable) {\n    if (model.renderable === renderable) {\n      return;\n    }\n\n    model.renderable = renderable;\n    model.tmActor.addTexture(model.renderable.getTmTexture());\n    model.tmActor.setProperty(renderable.getProperty());\n    model.tmActor.setParentProp(renderable);\n    publicAPI.modified();\n  }; // called by updateTexturePolyData\n\n\n  publicAPI.createPolyDataForOneLabel = function (text, pos, cmat, imat, dir, offset, results) {\n    var value = model.renderable.get_tmAtlas().get(text);\n\n    if (!value) {\n      return;\n    }\n\n    var coords = model.renderable.getTextPolyData().getPoints().getData(); // compute pixel to distance factors\n\n    var size = model.lastSize;\n    ptv3[0] = coords[pos * 3];\n    ptv3[1] = coords[pos * 3 + 1];\n    ptv3[2] = coords[pos * 3 + 2];\n    vec3.transformMat4(tmpv3, ptv3, cmat); // moving 0.1 in NDC\n\n    tmpv3[0] += 0.1;\n    vec3.transformMat4(pt2v3, tmpv3, imat); // results in WC move of\n\n    vec3.subtract(xDir, pt2v3, ptv3);\n    tmpv3[0] -= 0.1;\n    tmpv3[1] += 0.1;\n    vec3.transformMat4(pt2v3, tmpv3, imat); // results in WC move of\n\n    vec3.subtract(yDir, pt2v3, ptv3);\n\n    for (var i = 0; i < 3; i++) {\n      xDir[i] /= 0.5 * 0.1 * size[0];\n      yDir[i] /= 0.5 * 0.1 * size[1];\n    } // have to find the four corners of the texture polygon for this label\n    // convert anchor point to View Coords\n\n\n    var ptIdx = results.ptIdx;\n    var cellIdx = results.cellIdx;\n    ptv3[0] = coords[pos * 3];\n    ptv3[1] = coords[pos * 3 + 1];\n    ptv3[2] = coords[pos * 3 + 2]; // horizontal left, right, or middle alignment based on dir[0]\n\n    if (dir[0] < -0.5) {\n      vec3.scale(tmpv3, xDir, dir[0] * offset - value.width);\n    } else if (dir[0] > 0.5) {\n      vec3.scale(tmpv3, xDir, dir[0] * offset);\n    } else {\n      vec3.scale(tmpv3, xDir, dir[0] * offset - value.width / 2.0);\n    }\n\n    vec3.add(ptv3, ptv3, tmpv3);\n    vec3.scale(tmpv3, yDir, dir[1] * offset - value.height / 2.0);\n    vec3.add(ptv3, ptv3, tmpv3);\n    results.points[ptIdx * 3] = ptv3[0];\n    results.points[ptIdx * 3 + 1] = ptv3[1];\n    results.points[ptIdx * 3 + 2] = ptv3[2];\n    results.tcoords[ptIdx * 2] = value.tcoords[0];\n    results.tcoords[ptIdx * 2 + 1] = value.tcoords[1];\n    ptIdx++;\n    vec3.scale(tmpv3, xDir, value.width);\n    vec3.add(ptv3, ptv3, tmpv3);\n    results.points[ptIdx * 3] = ptv3[0];\n    results.points[ptIdx * 3 + 1] = ptv3[1];\n    results.points[ptIdx * 3 + 2] = ptv3[2];\n    results.tcoords[ptIdx * 2] = value.tcoords[2];\n    results.tcoords[ptIdx * 2 + 1] = value.tcoords[3];\n    ptIdx++;\n    vec3.scale(tmpv3, yDir, value.height);\n    vec3.add(ptv3, ptv3, tmpv3);\n    results.points[ptIdx * 3] = ptv3[0];\n    results.points[ptIdx * 3 + 1] = ptv3[1];\n    results.points[ptIdx * 3 + 2] = ptv3[2];\n    results.tcoords[ptIdx * 2] = value.tcoords[4];\n    results.tcoords[ptIdx * 2 + 1] = value.tcoords[5];\n    ptIdx++;\n    vec3.scale(tmpv3, xDir, value.width);\n    vec3.subtract(ptv3, ptv3, tmpv3);\n    results.points[ptIdx * 3] = ptv3[0];\n    results.points[ptIdx * 3 + 1] = ptv3[1];\n    results.points[ptIdx * 3 + 2] = ptv3[2];\n    results.tcoords[ptIdx * 2] = value.tcoords[6];\n    results.tcoords[ptIdx * 2 + 1] = value.tcoords[7];\n    ptIdx++; // add the two triangles to represent the quad\n\n    results.polys[cellIdx * 4] = 3;\n    results.polys[cellIdx * 4 + 1] = ptIdx - 4;\n    results.polys[cellIdx * 4 + 2] = ptIdx - 3;\n    results.polys[cellIdx * 4 + 3] = ptIdx - 2;\n    cellIdx++;\n    results.polys[cellIdx * 4] = 3;\n    results.polys[cellIdx * 4 + 1] = ptIdx - 4;\n    results.polys[cellIdx * 4 + 2] = ptIdx - 2;\n    results.polys[cellIdx * 4 + 3] = ptIdx - 1;\n    results.ptIdx += 4;\n    results.cellIdx += 2;\n  }; // update the polydata associated with drawing the text labels\n  // specifically the quads used for each label and their associated tcoords\n  // etc. This changes every time the camera viewpoint changes\n\n\n  publicAPI.updateTexturePolyData = function () {\n    var cmat = model.camera.getCompositeProjectionMatrix(model.lastAspectRatio, -1, 1);\n    mat4.transpose(cmat, cmat); // update the polydata\n\n    var numLabels = model.renderable.getTextValues().length;\n    var numPts = numLabels * 4;\n    var numTris = numLabels * 2;\n    var points = new Float64Array(numPts * 3);\n    var polys = new Uint16Array(numTris * 4);\n    var tcoords = new Float32Array(numPts * 2);\n    mat4.invert(invmat, cmat);\n    var results = {\n      ptIdx: 0,\n      cellIdx: 0,\n      polys: polys,\n      points: points,\n      tcoords: tcoords\n    };\n    var ptIdx = 0;\n    var textIdx = 0;\n    var axisIdx = 0;\n    var coords = model.renderable.getTextPolyData().getPoints().getData();\n    var textValues = model.renderable.getTextValues();\n\n    while (ptIdx < coords.length / 3) {\n      // compute the direction to move out\n      ptv3[0] = coords[ptIdx * 3];\n      ptv3[1] = coords[ptIdx * 3 + 1];\n      ptv3[2] = coords[ptIdx * 3 + 2];\n      vec3.transformMat4(tmpv3, ptv3, cmat);\n      ptv3[0] = coords[ptIdx * 3 + 3];\n      ptv3[1] = coords[ptIdx * 3 + 4];\n      ptv3[2] = coords[ptIdx * 3 + 5];\n      vec3.transformMat4(tmp2v3, ptv3, cmat);\n      vec3.subtract(tmpv3, tmpv3, tmp2v3);\n      var dir = [tmpv3[0], tmpv3[1]];\n      normalize2D(dir); // write the axis label\n\n      publicAPI.createPolyDataForOneLabel(textValues[textIdx], ptIdx, cmat, invmat, dir, model.renderable.getAxisTitlePixelOffset(), results);\n      ptIdx += 2;\n      textIdx++; // write the tick labels\n\n      for (var t = 0; t < model.renderable.getTickCounts()[axisIdx]; t++) {\n        publicAPI.createPolyDataForOneLabel(textValues[textIdx], ptIdx, cmat, invmat, dir, model.renderable.getTickLabelPixelOffset(), results);\n        ptIdx++;\n        textIdx++;\n      }\n\n      axisIdx++;\n    }\n\n    var tcoordDA = vtkDataArray.newInstance({\n      numberOfComponents: 2,\n      values: tcoords,\n      name: 'TextureCoordinates'\n    });\n    model.tmPolyData.getPointData().setTCoords(tcoordDA);\n    model.tmPolyData.getPoints().setData(points, 3);\n    model.tmPolyData.getPoints().modified();\n    model.tmPolyData.getPolys().setData(polys, 1);\n    model.tmPolyData.getPolys().modified();\n    model.tmPolyData.modified();\n  };\n\n  publicAPI.updateAPISpecificData = function (size, camera, renderWindow) {\n    // has the size changed?\n    if (model.lastSize[0] !== size[0] || model.lastSize[1] !== size[1]) {\n      model.lastSize[0] = size[0];\n      model.lastSize[1] = size[1];\n      model.lastAspectRatio = size[0] / size[1];\n      model.forceUpdate = true;\n    }\n\n    model.camera = camera; // compute bounds for label quads whenever the camera changes\n\n    publicAPI.updateTexturePolyData();\n  };\n}\n\nvar newCubeAxesActorHelper = macro.newInstance(function (publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    renderable: null\n  };\n  Object.assign(model, {}, initialValues); // Inheritance\n\n  macro.obj(publicAPI, model);\n  model.tmPolyData = vtkPolyData.newInstance();\n  model.tmMapper = vtkMapper.newInstance();\n  model.tmMapper.setInputData(model.tmPolyData);\n  model.tmActor = vtkActor.newInstance({\n    parentProp: publicAPI\n  });\n  model.tmActor.setMapper(model.tmMapper);\n  macro.setGet(publicAPI, model, ['renderable']);\n  macro.get(publicAPI, model, ['lastSize', 'lastAspectRatio', 'axisTextStyle', 'tickTextStyle', 'tmActor', 'ticks']);\n  model.forceUpdate = false;\n  model.lastRedrawTime = {};\n  macro.obj(model.lastRedrawTime, {\n    mtime: 0\n  });\n  model.lastRebuildTime = {};\n  macro.obj(model.lastRebuildTime, {\n    mtime: 0\n  });\n  model.lastSize = [-1, -1]; // internal variables\n\n  model.lastTickBounds = [];\n  vtkCubeAxesActorHelper(publicAPI, model);\n}, 'vtkCubeAxesActorHelper');\n\nfunction vtkCubeAxesActor(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkCubeAxesActor');\n\n  publicAPI.setCamera = function (cam) {\n    if (model.camera === cam) {\n      return;\n    }\n\n    if (model.cameraModifiedSub) {\n      model.cameraModifiedSub.unsubscribe();\n      model.cameraModifiedSub = null;\n    }\n\n    model.camera = cam;\n\n    if (cam) {\n      model.cameraModifiedSub = cam.onModified(publicAPI.update);\n    }\n\n    publicAPI.update();\n    publicAPI.modified();\n  }; // estimate from a camera model what faces to draw\n  // return true if the list of faces to draw has changed\n\n\n  publicAPI.computeFacesToDraw = function () {\n    var cmat = model.camera.getViewMatrix();\n    mat4.transpose(cmat, cmat);\n    var changed = false;\n    var length = vtkBoundingBox.getDiagonalLength(model.dataBounds);\n    var faceDot = Math.sin(model.faceVisibilityAngle * Math.PI / 180.0);\n\n    for (var f = 0; f < 6; f++) {\n      var drawit = false;\n      var faceAxis = Math.floor(f / 2);\n      var otherAxis1 = (faceAxis + 1) % 3;\n      var otherAxis2 = (faceAxis + 2) % 3; // only for non degenerate axes\n\n      if (model.dataBounds[otherAxis1 * 2] !== model.dataBounds[otherAxis1 * 2 + 1] && model.dataBounds[otherAxis2 * 2] !== model.dataBounds[otherAxis2 * 2 + 1]) {\n        // for each face transform the center and off center to get a direction vector\n        ptv3[faceAxis] = model.dataBounds[f] - 0.1 * length * faceNormals[f][faceAxis];\n        ptv3[otherAxis1] = 0.5 * (model.dataBounds[otherAxis1 * 2] + model.dataBounds[otherAxis1 * 2 + 1]);\n        ptv3[otherAxis2] = 0.5 * (model.dataBounds[otherAxis2 * 2] + model.dataBounds[otherAxis2 * 2 + 1]);\n        vec3.transformMat4(tmpv3, ptv3, cmat);\n        ptv3[faceAxis] = model.dataBounds[f];\n        vec3.transformMat4(tmp2v3, ptv3, cmat);\n        vec3.subtract(tmpv3, tmp2v3, tmpv3);\n        vec3.normalize(tmpv3, tmpv3); // tmpv3 now holds the face normal vector\n\n        drawit = tmpv3[2] > faceDot; // for perspctive we need the view direction to the plane\n\n        if (!model.camera.getParallelProjection()) {\n          vec3.normalize(tmp2v3, tmp2v3);\n          drawit = vec3.dot(tmp2v3, tmpv3) > faceDot;\n        }\n      }\n\n      if (drawit !== model.lastFacesToDraw[f]) {\n        model.lastFacesToDraw[f] = drawit;\n        changed = true;\n      }\n    }\n\n    return changed;\n  }; // update the polydata that represents the boundingd edges and gridlines\n\n\n  publicAPI.updatePolyData = function (facesToDraw, edgesToDraw, ticks) {\n    // compute the number of points and lines required\n    var numPts = 0;\n    var numLines = 0;\n    numPts += 8; // always start with the 8 cube points\n    // count edgesToDraw\n\n    var numEdgesToDraw = 0;\n\n    for (var e = 0; e < 12; e++) {\n      if (edgesToDraw[e] > 0) {\n        numEdgesToDraw++;\n      }\n    }\n\n    numLines += numEdgesToDraw; // add values for gridlines\n\n    if (model.gridLines) {\n      for (var f = 0; f < 6; f++) {\n        if (facesToDraw[f]) {\n          numPts += ticks[faceAxes[f][0]].length * 2 + ticks[faceAxes[f][1]].length * 2;\n          numLines += ticks[faceAxes[f][0]].length + ticks[faceAxes[f][1]].length;\n        }\n      }\n    } // now allocate the memory\n\n\n    var points = new Float64Array(numPts * 3);\n    var lines = new Uint32Array(numLines * 3);\n    var ptIdx = 0;\n    var lineIdx = 0; // add the 8 corner points\n\n    for (var z = 0; z < 2; z++) {\n      for (var y = 0; y < 2; y++) {\n        for (var x = 0; x < 2; x++) {\n          points[ptIdx * 3] = model.dataBounds[x];\n          points[ptIdx * 3 + 1] = model.dataBounds[2 + y];\n          points[ptIdx * 3 + 2] = model.dataBounds[4 + z];\n          ptIdx++;\n        }\n      }\n    } // draw the edges\n\n\n    for (var _e = 0; _e < 12; _e++) {\n      if (edgesToDraw[_e] > 0) {\n        lines[lineIdx * 3] = 2;\n        lines[lineIdx * 3 + 1] = edgePoints[_e][0];\n        lines[lineIdx * 3 + 2] = edgePoints[_e][1];\n        lineIdx++;\n      }\n    } // now handle gridlines\n    // grid lines are tick[axis1] + ticks[axes2] lines each having two points\n    // for simplicity we don;t worry about duplicating points, this is tiny\n\n\n    if (model.gridLines) {\n      // for each visible face\n      // add the points\n      for (var _f = 0; _f < 6; _f++) {\n        if (facesToDraw[_f]) {\n          var faceIdx = Math.floor(_f / 2);\n          var aticks = ticks[faceAxes[_f][0]];\n\n          for (var t = 0; t < aticks.length; t++) {\n            points[ptIdx * 3 + faceIdx] = model.dataBounds[_f];\n            points[ptIdx * 3 + faceAxes[_f][0]] = aticks[t];\n            points[ptIdx * 3 + faceAxes[_f][1]] = model.dataBounds[faceAxes[_f][1] * 2];\n            ptIdx++;\n            points[ptIdx * 3 + faceIdx] = model.dataBounds[_f];\n            points[ptIdx * 3 + faceAxes[_f][0]] = aticks[t];\n            points[ptIdx * 3 + faceAxes[_f][1]] = model.dataBounds[faceAxes[_f][1] * 2 + 1];\n            ptIdx++;\n            lines[lineIdx * 3] = 2;\n            lines[lineIdx * 3 + 1] = ptIdx - 2;\n            lines[lineIdx * 3 + 2] = ptIdx - 1;\n            lineIdx++;\n          }\n\n          aticks = ticks[faceAxes[_f][1]];\n\n          for (var _t = 0; _t < aticks.length; _t++) {\n            points[ptIdx * 3 + faceIdx] = model.dataBounds[_f];\n            points[ptIdx * 3 + faceAxes[_f][1]] = aticks[_t];\n            points[ptIdx * 3 + faceAxes[_f][0]] = model.dataBounds[faceAxes[_f][0] * 2];\n            ptIdx++;\n            points[ptIdx * 3 + faceIdx] = model.dataBounds[_f];\n            points[ptIdx * 3 + faceAxes[_f][1]] = aticks[_t];\n            points[ptIdx * 3 + faceAxes[_f][0]] = model.dataBounds[faceAxes[_f][0] * 2 + 1];\n            ptIdx++;\n            lines[lineIdx * 3] = 2;\n            lines[lineIdx * 3 + 1] = ptIdx - 2;\n            lines[lineIdx * 3 + 2] = ptIdx - 1;\n            lineIdx++;\n          }\n        }\n      }\n    }\n\n    model.polyData.getPoints().setData(points, 3);\n    model.polyData.getPoints().modified();\n    model.polyData.getLines().setData(lines, 1);\n    model.polyData.getLines().modified();\n    model.polyData.modified();\n  }; // update the data that represents where to put the labels\n  // in world coordinates. This only changes when faces to draw changes\n  // of dataBounds changes\n\n\n  publicAPI.updateTextData = function (facesToDraw, edgesToDraw, ticks, tickStrings) {\n    // count outside edgesToDraw\n    var textPointCount = 0;\n\n    for (var e = 0; e < 12; e++) {\n      if (edgesToDraw[e] === 1) {\n        textPointCount += 2;\n        textPointCount += ticks[edgeAxes[e]].length;\n      }\n    }\n\n    var points = model.polyData.getPoints().getData();\n    var textPoints = new Float64Array(textPointCount * 3);\n    var ptIdx = 0;\n    var textIdx = 0;\n    var axisCount = 0;\n\n    for (var f = 0; f < 6; f++) {\n      if (facesToDraw[f]) {\n        for (var _e2 = 0; _e2 < 4; _e2++) {\n          var edgeIdx = faceEdges[f][_e2];\n\n          if (edgesToDraw[edgeIdx] === 1) {\n            var edgeAxis = edgeAxes[edgeIdx]; // add a middle point on the edge\n\n            var ptIdx1 = edgePoints[edgeIdx][0] * 3;\n            var ptIdx2 = edgePoints[edgeIdx][1] * 3;\n            textPoints[ptIdx * 3] = 0.5 * (points[ptIdx1] + points[ptIdx2]);\n            textPoints[ptIdx * 3 + 1] = 0.5 * (points[ptIdx1 + 1] + points[ptIdx2 + 1]);\n            textPoints[ptIdx * 3 + 2] = 0.5 * (points[ptIdx1 + 2] + points[ptIdx2 + 2]);\n            ptIdx++; // add a middle face point, we use this to\n            // move the labels away from the edge in the right direction\n\n            var faceIdx = Math.floor(f / 2);\n            textPoints[ptIdx * 3 + faceIdx] = model.dataBounds[f];\n            textPoints[ptIdx * 3 + faceAxes[f][0]] = 0.5 * (model.dataBounds[faceAxes[f][0] * 2] + model.dataBounds[faceAxes[f][0] * 2 + 1]);\n            textPoints[ptIdx * 3 + faceAxes[f][1]] = 0.5 * (model.dataBounds[faceAxes[f][1] * 2] + model.dataBounds[faceAxes[f][1] * 2 + 1]);\n            ptIdx++; // set the text\n\n            model.textValues[textIdx] = model.axisLabels[edgeAxis];\n            textIdx++; // now add the tick marks along the edgeAxis\n\n            var otherAxis1 = (edgeAxis + 1) % 3;\n            var otherAxis2 = (edgeAxis + 2) % 3;\n            var aticks = ticks[edgeAxis];\n            var atickStrings = tickStrings[edgeAxis];\n            model.tickCounts[axisCount] = aticks.length;\n\n            for (var t = 0; t < aticks.length; t++) {\n              textPoints[ptIdx * 3 + edgeAxis] = aticks[t];\n              textPoints[ptIdx * 3 + otherAxis1] = points[ptIdx1 + otherAxis1];\n              textPoints[ptIdx * 3 + otherAxis2] = points[ptIdx1 + otherAxis2];\n              ptIdx++; // set the text\n\n              model.textValues[textIdx] = atickStrings[t];\n              textIdx++;\n            }\n\n            axisCount++;\n          }\n        }\n      }\n    }\n\n    model.textPolyData.getPoints().setData(textPoints, 3);\n    model.textPolyData.modified();\n  }; // main method to rebuild the cube axes, gets called on camera modify\n  // and changes to key members\n\n\n  publicAPI.update = function () {\n    // Can't do anything if we don't have a camera...\n    if (!model.camera) {\n      return;\n    } // compute what faces to draw\n\n\n    var facesChanged = publicAPI.computeFacesToDraw();\n    var facesToDraw = model.lastFacesToDraw; // have the bounds changed?\n\n    var boundsChanged = false;\n\n    for (var i = 0; i < 6; i++) {\n      if (model.dataBounds[i] !== model.lastTickBounds[i]) {\n        boundsChanged = true;\n        model.lastTickBounds[i] = model.dataBounds[i];\n      }\n    } // did something significant change? If so rebuild a lot of things\n\n\n    if (facesChanged || boundsChanged || model.forceUpdate) {\n      // compute the edges to draw\n      // for each drawn face, mark edges, all single mark edges we draw\n      var edgesToDraw = new Array(12).fill(0);\n\n      for (var f = 0; f < 6; f++) {\n        if (facesToDraw[f]) {\n          for (var e = 0; e < 4; e++) {\n            edgesToDraw[faceEdges[f][e]]++;\n          }\n        }\n      } // compute tick marks for axes\n\n\n      var ticks = [];\n      var tickStrings = [];\n\n      for (var _i = 0; _i < 3; _i++) {\n        var scale = d3.scaleLinear().domain([model.dataBounds[_i * 2], model.dataBounds[_i * 2 + 1]]);\n        ticks[_i] = scale.ticks(5);\n        var format = scale.tickFormat(5);\n        tickStrings[_i] = ticks[_i].map(format);\n      } // update gridlines / edge lines\n\n\n      publicAPI.updatePolyData(facesToDraw, edgesToDraw, ticks); // compute label world coords and text\n\n      publicAPI.updateTextData(facesToDraw, edgesToDraw, ticks, tickStrings); // rebuild the texture only when force or changed bounds, face\n      // visibility changes do to change the atlas\n\n      if (boundsChanged || model.forceUpdate) {\n        publicAPI.updateTextureAtlas(tickStrings);\n      }\n    }\n\n    model.forceUpdate = false;\n  }; // create the texture map atlas that contains the rendering of\n  // all the text strings. Only needs to be called when the text strings\n  // have changed (labels and ticks)\n\n\n  publicAPI.updateTextureAtlas = function (tickStrings) {\n    // compute the width and height we need\n    // set the text properties\n    model.tmContext.textBaseline = 'bottom';\n    model.tmContext.textAlign = 'left'; // first the three labels\n\n    model._tmAtlas.clear();\n\n    var maxWidth = 0;\n    var totalHeight = 1; // start one pixel in so we have a border\n\n    for (var i = 0; i < 3; i++) {\n      if (!model._tmAtlas.has(model.axisLabels[i])) {\n        applyTextStyle(model.tmContext, model.axisTextStyle);\n        var metrics = model.tmContext.measureText(model.axisLabels[i]);\n        var entry = {\n          height: metrics.actualBoundingBoxAscent + 2,\n          startingHeight: totalHeight,\n          width: metrics.width + 2,\n          textStyle: model.axisTextStyle\n        };\n\n        model._tmAtlas.set(model.axisLabels[i], entry);\n\n        totalHeight += entry.height;\n\n        if (maxWidth < entry.width) {\n          maxWidth = entry.width;\n        }\n      } // and the ticks\n\n\n      applyTextStyle(model.tmContext, model.tickTextStyle);\n\n      for (var t = 0; t < tickStrings[i].length; t++) {\n        if (!model._tmAtlas.has(tickStrings[i][t])) {\n          var _metrics = model.tmContext.measureText(tickStrings[i][t]);\n\n          var _entry = {\n            height: _metrics.actualBoundingBoxAscent + 2,\n            startingHeight: totalHeight,\n            width: _metrics.width + 2,\n            textStyle: model.tickTextStyle\n          };\n\n          model._tmAtlas.set(tickStrings[i][t], _entry);\n\n          totalHeight += _entry.height;\n\n          if (maxWidth < _entry.width) {\n            maxWidth = _entry.width;\n          }\n        }\n      }\n    } // always use power of two to avoid interpolation\n    // in cases where PO2 is required\n\n\n    maxWidth = nearestPowerOfTwo(maxWidth);\n    totalHeight = nearestPowerOfTwo(totalHeight); // set the tcoord values\n\n    model._tmAtlas.forEach(function (value) {\n      value.tcoords = [0.0, (totalHeight - value.startingHeight - value.height) / totalHeight, value.width / maxWidth, (totalHeight - value.startingHeight - value.height) / totalHeight, value.width / maxWidth, (totalHeight - value.startingHeight) / totalHeight, 0.0, (totalHeight - value.startingHeight) / totalHeight];\n    }); // make sure we have power of two dimensions\n\n\n    model.tmCanvas.width = maxWidth;\n    model.tmCanvas.height = totalHeight;\n    model.tmContext.textBaseline = 'bottom';\n    model.tmContext.textAlign = 'left';\n    model.tmContext.clearRect(0, 0, maxWidth, totalHeight); // draw the text onto the texture\n\n    model._tmAtlas.forEach(function (value, key) {\n      applyTextStyle(model.tmContext, value.textStyle);\n      model.tmContext.fillText(key, 1, value.startingHeight + value.height - 1);\n    });\n\n    model.tmTexture.setCanvas(model.tmCanvas);\n    model.tmTexture.modified();\n  }; // Make sure the data is correct\n\n\n  publicAPI.onModified(function () {\n    model.forceUpdate = true;\n    publicAPI.update();\n  });\n\n  publicAPI.setTickTextStyle = function (tickStyle) {\n    model.tickTextStyle = _objectSpread(_objectSpread({}, model.tickTextStyle), tickStyle);\n    publicAPI.modified();\n  };\n\n  publicAPI.setAxisTextStyle = function (axisStyle) {\n    model.axisTextStyle = _objectSpread(_objectSpread({}, model.axisTextStyle), axisStyle);\n    publicAPI.modified();\n  };\n\n  publicAPI.get_tmAtlas = function () {\n    return model._tmAtlas;\n  }; // try to get the bounds for the annotation. This is complicated\n  // as it relies on the pixel size of the window. Every time the camera\n  // changes the bounds change. This method simplifies by just expanding\n  // the grid bounds by a user specified factor.\n\n\n  publicAPI.getBounds = function () {\n    publicAPI.update();\n    vtkBoundingBox.setBounds(model.bounds, model.gridActor.getBounds());\n    vtkBoundingBox.scaleAboutCenter(model.bounds, model.boundsScaleFactor, model.boundsScaleFactor, model.boundsScaleFactor);\n    return model.bounds;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nfunction defaultValues(initialValues) {\n  return _objectSpread({\n    boundsScaleFactor: 1.3,\n    camera: null,\n    dataBounds: _toConsumableArray(vtkBoundingBox.INIT_BOUNDS),\n    faceVisibilityAngle: 8,\n    gridLines: true,\n    axisLabels: null,\n    axisTitlePixelOffset: 35.0,\n    axisTextStyle: {\n      fontColor: 'white',\n      fontStyle: 'normal',\n      fontSize: 18,\n      fontFamily: 'serif'\n    },\n    tickLabelPixelOffset: 12.0,\n    tickTextStyle: {\n      fontColor: 'white',\n      fontStyle: 'normal',\n      fontSize: 14,\n      fontFamily: 'serif'\n    }\n  }, initialValues);\n} // ----------------------------------------------------------------------------\n\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, defaultValues(initialValues)); // Inheritance\n\n  vtkActor.extend(publicAPI, model, initialValues); // internal variables\n\n  model.lastFacesToDraw = [false, false, false, false, false, false];\n  model.axisLabels = ['X-Axis', 'Y-Axis', 'Z-Axis'];\n  model.tickCounts = [];\n  model.textValues = [];\n  model.lastTickBounds = [];\n  model.tmCanvas = document.createElement('canvas');\n  model.tmContext = model.tmCanvas.getContext('2d');\n  model._tmAtlas = new Map(); // for texture atlas\n\n  model.tmTexture = vtkTexture.newInstance();\n  model.tmTexture.setInterpolate(false);\n  publicAPI.getProperty().setDiffuse(0.0);\n  publicAPI.getProperty().setAmbient(1.0);\n  model.gridMapper = vtkMapper.newInstance();\n  model.polyData = vtkPolyData.newInstance();\n  model.gridMapper.setInputData(model.polyData);\n  model.gridActor = vtkActor.newInstance();\n  model.gridActor.setMapper(model.gridMapper);\n  model.gridActor.setProperty(publicAPI.getProperty());\n  model.gridActor.setParentProp(publicAPI);\n  model.textPolyData = vtkPolyData.newInstance();\n  macro.setGet(publicAPI, model, ['axisTitlePixelOffset', 'boundsScaleFactor', 'faceVisibilityAngle', 'gridLines', 'tickLabelPixelOffset']);\n  macro.setGetArray(publicAPI, model, ['dataBounds'], 6);\n  macro.setGetArray(publicAPI, model, ['axisLabels'], 3);\n  macro.get(publicAPI, model, ['axisTextStyle', 'tickTextStyle', 'camera', 'tmTexture', 'textValues', 'textPolyData', 'tickCounts', 'gridActor']); // Object methods\n\n  vtkCubeAxesActor(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkCubeAxesActor'); // ----------------------------------------------------------------------------\n\nvar vtkCubeAxesActor$1 = {\n  newInstance: newInstance,\n  extend: extend,\n  newCubeAxesActorHelper: newCubeAxesActorHelper\n};\n\nexport { vtkCubeAxesActor$1 as default, extend, newInstance };\n", "import { newInstance as newInstance$1 } from '../../macros.js';\nimport vtkCubeAxesActor from '../Core/CubeAxesActor.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// vtkOpenGLCubeAxesActor methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLCubeAxesActor(publicAPI, model) {\n  model.classHierarchy.push('vtkOpenGLCubeAxesActor'); // Builds myself.\n\n  publicAPI.buildPass = function (prepass) {\n    if (prepass) {\n      model.openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model.openGLRenderWindow = model.openGLRenderer.getParent();\n\n      if (!model.CubeAxesActorHelper.getRenderable()) {\n        model.CubeAxesActorHelper.setRenderable(model.renderable);\n      }\n\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.CubeAxesActorHelper.getTmActor());\n      publicAPI.addMissingNode(model.renderable.getGridActor());\n      publicAPI.removeUnusedNodes();\n    }\n  };\n\n  publicAPI.opaquePass = function (prepass, renderPass) {\n    if (prepass) {\n      var camera = model.openGLRenderer ? model.openGLRenderer.getRenderable().getActiveCamera() : null;\n      var tsize = model.openGLRenderer.getTiledSizeAndOrigin();\n      model.CubeAxesActorHelper.updateAPISpecificData([tsize.usize, tsize.vsize], camera, model.openGLRenderWindow.getRenderable());\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.CubeAxesActorHelper = vtkCubeAxesActor.newCubeAxesActorHelper(); // Object methods\n\n  vtkOpenGLCubeAxesActor(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkOpenGLCubeAxesActor'); // ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to OpenGL backend if imported\n\nregisterOverride('vtkCubeAxesActor', newInstance);\n\nexport { index as default, extend, newInstance };\n", "import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport { mat3, mat4, vec3 } from 'gl-matrix';\nimport { newInstance as newInstance$1, setGet, obj, vtkErrorMacro as vtkErrorMacro$1 } from '../../macros.js';\nimport vtkHelper from './Helper.js';\nimport vtkMapper from '../Core/Mapper.js';\nimport { m as normalize, u as uninitializeBounds } from '../../Common/Core/Math/index.js';\nimport vtkOpenGLTexture from './Texture.js';\nimport vtkProp from '../Core/Prop.js';\nimport vtkProperty from '../Core/Property.js';\nimport vtkShaderProgram from './ShaderProgram.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { v as vtkPolyDataVS } from './glsl/vtkPolyDataVS.glsl.js';\nimport { v as vtkPolyDataFS } from './glsl/vtkPolyDataFS.glsl.js';\nimport vtkReplacementShaderMapper from './ReplacementShaderMapper.js';\nimport { registerOverride } from './ViewNodeFactory.js';\nimport { PassTypes } from './HardwareSelector/Constants.js';\nimport vtkDataSet from '../../Common/DataModel/DataSet.js';\n\nvar FieldAssociations = vtkDataSet.FieldAssociations;\n/* eslint-disable no-lonely-if */\n\nvar primTypes = vtkHelper.primTypes;\nvar Representation = vtkProperty.Representation,\n    Shading = vtkProperty.Shading;\nvar ScalarMode = vtkMapper.ScalarMode;\nvar Filter = vtkOpenGLTexture.Filter,\n    Wrap = vtkOpenGLTexture.Wrap;\nvar vtkErrorMacro = vtkErrorMacro$1;\nvar StartEvent = {\n  type: 'StartEvent'\n};\nvar EndEvent = {\n  type: 'EndEvent'\n};\nvar CoordinateSystem = vtkProp.CoordinateSystem; // ----------------------------------------------------------------------------\n// vtkOpenGLPolyDataMapper methods\n// ----------------------------------------------------------------------------\n\nfunction getPickState(renderer) {\n  var selector = renderer.getSelector();\n\n  if (selector) {\n    return selector.getCurrentPass();\n  }\n\n  return PassTypes.MIN_KNOWN_PASS - 1;\n}\n\nfunction vtkOpenGLPolyDataMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLPolyDataMapper');\n\n  publicAPI.buildPass = function (prepass) {\n    if (prepass) {\n      model.currentRenderPass = null;\n      model.openGLActor = publicAPI.getFirstAncestorOfType('vtkOpenGLActor');\n      model.openGLRenderer = model.openGLActor.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model._openGLRenderWindow = model.openGLRenderer.getParent();\n      model.openGLCamera = model.openGLRenderer.getViewNodeFor(model.openGLRenderer.getRenderable().getActiveCamera());\n    }\n  }; // Renders myself\n\n\n  publicAPI.translucentPass = function (prepass, renderPass) {\n    if (prepass) {\n      model.currentRenderPass = renderPass;\n      publicAPI.render();\n    }\n  };\n\n  publicAPI.opaqueZBufferPass = function (prepass) {\n    if (prepass) {\n      model.haveSeenDepthRequest = true;\n      model.renderDepth = true;\n      publicAPI.render();\n      model.renderDepth = false;\n    }\n  };\n\n  publicAPI.opaquePass = function (prepass) {\n    if (prepass) {\n      publicAPI.render();\n    }\n  };\n\n  publicAPI.render = function () {\n    var ctx = model._openGLRenderWindow.getContext();\n\n    if (model.context !== ctx) {\n      model.context = ctx;\n\n      for (var i = primTypes.Start; i < primTypes.End; i++) {\n        model.primitives[i].setOpenGLRenderWindow(model._openGLRenderWindow);\n      }\n    }\n\n    var actor = model.openGLActor.getRenderable();\n    var ren = model.openGLRenderer.getRenderable();\n    publicAPI.renderPiece(ren, actor);\n  };\n\n  publicAPI.buildShaders = function (shaders, ren, actor) {\n    publicAPI.getShaderTemplate(shaders, ren, actor); // apply any renderPassReplacements\n\n    if (model.lastRenderPassShaderReplacement) {\n      model.lastRenderPassShaderReplacement(shaders);\n    } // user specified pre replacements\n\n\n    var openGLSpec = model.renderable.getViewSpecificProperties().OpenGL;\n    var shaderReplacements = null;\n\n    if (openGLSpec) {\n      shaderReplacements = openGLSpec.ShaderReplacements;\n    }\n\n    if (shaderReplacements) {\n      for (var i = 0; i < shaderReplacements.length; i++) {\n        var currReplacement = shaderReplacements[i];\n\n        if (currReplacement.replaceFirst) {\n          var shaderType = currReplacement.shaderType;\n          var ssrc = shaders[shaderType];\n          var substituteRes = vtkShaderProgram.substitute(ssrc, currReplacement.originalValue, currReplacement.replacementValue, currReplacement.replaceAll);\n          shaders[shaderType] = substituteRes.result;\n        }\n      }\n    }\n\n    publicAPI.replaceShaderValues(shaders, ren, actor); // user specified post replacements\n\n    if (shaderReplacements) {\n      for (var _i = 0; _i < shaderReplacements.length; _i++) {\n        var _currReplacement = shaderReplacements[_i];\n\n        if (!_currReplacement.replaceFirst) {\n          var _shaderType = _currReplacement.shaderType;\n          var _ssrc = shaders[_shaderType];\n\n          var _substituteRes = vtkShaderProgram.substitute(_ssrc, _currReplacement.originalValue, _currReplacement.replacementValue, _currReplacement.replaceAll);\n\n          shaders[_shaderType] = _substituteRes.result;\n        }\n      }\n    }\n  };\n\n  publicAPI.getShaderTemplate = function (shaders, ren, actor) {\n    var openGLSpecProp = model.renderable.getViewSpecificProperties().OpenGL;\n    var vertexShaderCode = vtkPolyDataVS;\n\n    if (openGLSpecProp) {\n      var vertexSpecProp = openGLSpecProp.VertexShaderCode;\n\n      if (vertexSpecProp !== undefined && vertexSpecProp !== '') {\n        vertexShaderCode = vertexSpecProp;\n      }\n    }\n\n    shaders.Vertex = vertexShaderCode;\n    var fragmentShaderCode = vtkPolyDataFS;\n\n    if (openGLSpecProp) {\n      var fragmentSpecProp = openGLSpecProp.FragmentShaderCode;\n\n      if (fragmentSpecProp !== undefined && fragmentSpecProp !== '') {\n        fragmentShaderCode = fragmentSpecProp;\n      }\n    }\n\n    shaders.Fragment = fragmentShaderCode;\n    var geometryShaderCode = '';\n\n    if (openGLSpecProp) {\n      var geometrySpecProp = openGLSpecProp.GeometryShaderCode;\n\n      if (geometrySpecProp !== undefined) {\n        geometryShaderCode = geometrySpecProp;\n      }\n    }\n\n    shaders.Geometry = geometryShaderCode;\n  };\n\n  publicAPI.replaceShaderColor = function (shaders, ren, actor) {\n    var VSSource = shaders.Vertex;\n    var GSSource = shaders.Geometry;\n    var FSSource = shaders.Fragment;\n    var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity'); // create the material/color property declarations, and VS implementation\n    // these are always defined\n\n    var colorDec = ['uniform float ambient;', 'uniform float diffuse;', 'uniform float specular;', 'uniform float opacityUniform; // the fragment opacity', 'uniform vec3 ambientColorUniform;', 'uniform vec3 diffuseColorUniform;']; // add more for specular\n\n    if (lastLightComplexity) {\n      colorDec = colorDec.concat(['uniform vec3 specularColorUniform;', 'uniform float specularPowerUniform;']);\n    } // now handle the more complex fragment shader implementation\n    // the following are always defined variables.  We start\n    // by assigning a default value from the uniform\n\n\n    var colorImpl = ['vec3 ambientColor;', '  vec3 diffuseColor;', '  float opacity;'];\n\n    if (lastLightComplexity) {\n      colorImpl = colorImpl.concat(['  vec3 specularColor;', '  float specularPower;']);\n    }\n\n    colorImpl = colorImpl.concat(['  ambientColor = ambientColorUniform;', '  diffuseColor = diffuseColorUniform;', '  opacity = opacityUniform;']);\n\n    if (lastLightComplexity) {\n      colorImpl = colorImpl.concat(['  specularColor = specularColorUniform;', '  specularPower = specularPowerUniform;']);\n    } // add scalar vertex coloring\n\n\n    if (model.lastBoundBO.getCABO().getColorComponents() !== 0 && !model.drawingEdges) {\n      colorDec = colorDec.concat(['varying vec4 vertexColorVSOutput;']);\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Color::Dec', ['attribute vec4 scalarColor;', 'varying vec4 vertexColorVSOutput;']).result;\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Color::Impl', ['vertexColorVSOutput =  scalarColor;']).result;\n      GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::Color::Dec', ['in vec4 vertexColorVSOutput[];', 'out vec4 vertexColorGSOutput;']).result;\n      GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::Color::Impl', ['vertexColorGSOutput = vertexColorVSOutput[i];']).result;\n    }\n\n    if (model.lastBoundBO.getCABO().getColorComponents() !== 0 && !model.drawingEdges) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Impl', colorImpl.concat(['  diffuseColor = vertexColorVSOutput.rgb;', '  ambientColor = vertexColorVSOutput.rgb;', '  opacity = opacity*vertexColorVSOutput.a;'])).result;\n    } else {\n      if (model.renderable.getInterpolateScalarsBeforeMapping() && model.renderable.getColorCoordinates() && !model.drawingEdges) {\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Impl', colorImpl.concat(['  vec4 texColor = texture2D(texture1, tcoordVCVSOutput.st);', '  diffuseColor = texColor.rgb;', '  ambientColor = texColor.rgb;', '  opacity = opacity*texColor.a;'])).result;\n      } else {\n        if (actor.getBackfaceProperty() && !model.drawingEdges) {\n          colorDec = colorDec.concat(['uniform float opacityUniformBF; // the fragment opacity', 'uniform float ambientIntensityBF; // the material ambient', 'uniform float diffuseIntensityBF; // the material diffuse', 'uniform vec3 ambientColorUniformBF; // ambient material color', 'uniform vec3 diffuseColorUniformBF; // diffuse material color']);\n\n          if (lastLightComplexity) {\n            colorDec = colorDec.concat(['uniform float specularIntensityBF; // the material specular intensity', 'uniform vec3 specularColorUniformBF; // intensity weighted color', 'uniform float specularPowerUniformBF;']);\n            colorImpl = colorImpl.concat(['if (gl_FrontFacing == false) {', '  ambientColor = ambientIntensityBF * ambientColorUniformBF;', '  diffuseColor = diffuseIntensityBF * diffuseColorUniformBF;', '  specularColor = specularIntensityBF * specularColorUniformBF;', '  specularPower = specularPowerUniformBF;', '  opacity = opacityUniformBF; }']);\n          } else {\n            colorImpl = colorImpl.concat(['if (gl_FrontFacing == false) {', '  ambientColor = ambientIntensityBF * ambientColorUniformBF;', '  diffuseColor = diffuseIntensityBF * diffuseColorUniformBF;', '  opacity = opacityUniformBF; }']);\n          }\n        }\n\n        if (model.haveCellScalars && !model.drawingEdges) {\n          colorDec = colorDec.concat(['uniform samplerBuffer texture1;']);\n        }\n\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Impl', colorImpl).result;\n      }\n    }\n\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Dec', colorDec).result;\n    shaders.Vertex = VSSource;\n    shaders.Geometry = GSSource;\n    shaders.Fragment = FSSource;\n  };\n\n  publicAPI.replaceShaderLight = function (shaders, ren, actor) {\n    var FSSource = shaders.Fragment; // check for shadow maps\n\n    var shadowFactor = '';\n    var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');\n    var lastLightCount = model.lastBoundBO.getReferenceByName('lastLightCount');\n    var sstring = [];\n\n    switch (lastLightComplexity) {\n      case 0:\n        // no lighting or RENDER_VALUES\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Light::Impl', ['  gl_FragData[0] = vec4(ambientColor * ambient + diffuseColor * diffuse, opacity);', '  //VTK::Light::Impl'], false).result;\n        break;\n\n      case 1:\n        // headlight\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Light::Impl', ['  float df = max(0.0, normalVCVSOutput.z);', '  float sf = pow(df, specularPower);', '  vec3 diffuseL = df * diffuseColor;', '  vec3 specularL = sf * specularColor;', '  gl_FragData[0] = vec4(ambientColor * ambient + diffuseL * diffuse + specularL * specular, opacity);', '  //VTK::Light::Impl'], false).result;\n        break;\n\n      case 2:\n        // light kit\n        for (var lc = 0; lc < lastLightCount; ++lc) {\n          sstring = sstring.concat([\"uniform vec3 lightColor\".concat(lc, \";\"), \"uniform vec3 lightDirectionVC\".concat(lc, \"; // normalized\"), \"uniform vec3 lightHalfAngleVC\".concat(lc, \"; // normalized\")]);\n        }\n\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Light::Dec', sstring).result;\n        sstring = ['vec3 diffuseL = vec3(0,0,0);', '  vec3 specularL = vec3(0,0,0);', '  float df;'];\n\n        for (var _lc = 0; _lc < lastLightCount; ++_lc) {\n          sstring = sstring.concat([\"  df = max(0.0, dot(normalVCVSOutput, -lightDirectionVC\".concat(_lc, \"));\"), \"  diffuseL += ((df\".concat(shadowFactor, \") * lightColor\").concat(_lc, \");\"), \"  if (dot(normalVCVSOutput, lightDirectionVC\".concat(_lc, \") < 0.0)\"), '    {', \"    float sf = pow( max(0.0, dot(lightHalfAngleVC\".concat(_lc, \",normalVCVSOutput)), specularPower);\"), \"    specularL += ((sf\".concat(shadowFactor, \") * lightColor\").concat(_lc, \");\"), '    }']);\n        }\n\n        sstring = sstring.concat(['  diffuseL = diffuseL * diffuseColor;', '  specularL = specularL * specularColor;', '  gl_FragData[0] = vec4(ambientColor * ambient + diffuseL * diffuse + specularL * specular, opacity);', '  //VTK::Light::Impl']);\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Light::Impl', sstring, false).result;\n        break;\n\n      case 3:\n        // positional\n        for (var _lc2 = 0; _lc2 < lastLightCount; ++_lc2) {\n          sstring = sstring.concat([\"uniform vec3 lightColor\".concat(_lc2, \";\"), \"uniform vec3 lightDirectionVC\".concat(_lc2, \"; // normalized\"), \"uniform vec3 lightHalfAngleVC\".concat(_lc2, \"; // normalized\"), \"uniform vec3 lightPositionVC\".concat(_lc2, \";\"), \"uniform vec3 lightAttenuation\".concat(_lc2, \";\"), \"uniform float lightConeAngle\".concat(_lc2, \";\"), \"uniform float lightExponent\".concat(_lc2, \";\"), \"uniform int lightPositional\".concat(_lc2, \";\")]);\n        }\n\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Light::Dec', sstring).result;\n        sstring = ['vec3 diffuseL = vec3(0,0,0);', '  vec3 specularL = vec3(0,0,0);', '  vec3 vertLightDirectionVC;', '  float attenuation;', '  float df;'];\n\n        for (var _lc3 = 0; _lc3 < lastLightCount; ++_lc3) {\n          sstring = sstring.concat(['  attenuation = 1.0;', \"  if (lightPositional\".concat(_lc3, \" == 0)\"), '    {', \"      vertLightDirectionVC = lightDirectionVC\".concat(_lc3, \";\"), '    }', '  else', '    {', \"    vertLightDirectionVC = vertexVC.xyz - lightPositionVC\".concat(_lc3, \";\"), '    float distanceVC = length(vertLightDirectionVC);', '    vertLightDirectionVC = normalize(vertLightDirectionVC);', '    attenuation = 1.0 /', \"      (lightAttenuation\".concat(_lc3, \".x\"), \"       + lightAttenuation\".concat(_lc3, \".y * distanceVC\"), \"       + lightAttenuation\".concat(_lc3, \".z * distanceVC * distanceVC);\"), '    // per OpenGL standard cone angle is 90 or less for a spot light', \"    if (lightConeAngle\".concat(_lc3, \" <= 90.0)\"), '      {', \"      float coneDot = dot(vertLightDirectionVC, lightDirectionVC\".concat(_lc3, \");\"), '      // if inside the cone', \"      if (coneDot >= cos(radians(lightConeAngle\".concat(_lc3, \")))\"), '        {', \"        attenuation = attenuation * pow(coneDot, lightExponent\".concat(_lc3, \");\"), '        }', '      else', '        {', '        attenuation = 0.0;', '        }', '      }', '    }', '    df = max(0.0, attenuation*dot(normalVCVSOutput, -vertLightDirectionVC));', \"    diffuseL += ((df\".concat(shadowFactor, \") * lightColor\").concat(_lc3, \");\"), '    if (dot(normalVCVSOutput, vertLightDirectionVC) < 0.0)', '      {', \"      float sf = attenuation*pow( max(0.0, dot(lightHalfAngleVC\".concat(_lc3, \",normalVCVSOutput)), specularPower);\"), \"    specularL += ((sf\".concat(shadowFactor, \") * lightColor\").concat(_lc3, \");\"), '    }']);\n        }\n\n        sstring = sstring.concat(['  diffuseL = diffuseL * diffuseColor;', '  specularL = specularL * specularColor;', '  gl_FragData[0] = vec4(ambientColor * ambient + diffuseL * diffuse + specularL * specular, opacity);', '  //VTK::Light::Impl']);\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Light::Impl', sstring, false).result;\n        break;\n\n      default:\n        vtkErrorMacro('bad light complexity');\n    }\n\n    shaders.Fragment = FSSource;\n  };\n\n  publicAPI.replaceShaderNormal = function (shaders, ren, actor) {\n    var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');\n\n    if (lastLightComplexity > 0) {\n      var VSSource = shaders.Vertex;\n      var GSSource = shaders.Geometry;\n      var FSSource = shaders.Fragment;\n\n      if (model.lastBoundBO.getCABO().getNormalOffset()) {\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Normal::Dec', ['attribute vec3 normalMC;', 'uniform mat3 normalMatrix;', 'varying vec3 normalVCVSOutput;']).result;\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Normal::Impl', ['normalVCVSOutput = normalMatrix * normalMC;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::Normal::Dec', ['in vec3 normalVCVSOutput[];', 'out vec3 normalVCGSOutput;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::Normal::Impl', ['normalVCGSOutput = normalVCVSOutput[i];']).result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Normal::Dec', ['varying vec3 normalVCVSOutput;']).result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Normal::Impl', ['vec3 normalVCVSOutput = normalize(normalVCVSOutput);', //  if (!gl_FrontFacing) does not work in intel hd4000 mac\n        //  if (int(gl_FrontFacing) == 0) does not work on mesa\n        '  if (gl_FrontFacing == false) { normalVCVSOutput = -normalVCVSOutput; }']).result;\n      } else {\n        if (model.haveCellNormals) {\n          FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Normal::Dec', ['uniform mat3 normalMatrix;', 'uniform samplerBuffer textureN;']).result;\n          FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Normal::Impl', ['vec3 normalVCVSOutput = normalize(normalMatrix *', '    texelFetchBuffer(textureN, gl_PrimitiveID + PrimitiveIDOffset).xyz);', '  if (gl_FrontFacing == false) { normalVCVSOutput = -normalVCVSOutput; }']).result;\n        } else {\n          if (model.lastBoundBO.getOpenGLMode(actor.getProperty().getRepresentation()) === model.context.LINES) {\n            // generate a normal for lines, it will be perpendicular to the line\n            // and maximally aligned with the camera view direction\n            // no clue if this is the best way to do this.\n            // the code below has been optimized a bit so what follows is\n            // an explanation of the basic approach. Compute the gradient of the line\n            // with respect to x and y, the the larger of the two\n            // cross that with the camera view direction. That gives a vector\n            // orthogonal to the camera view and the line. Note that the line and the camera\n            // view are probably not orthogonal. Which is why when we cross result that with\n            // the line gradient again we get a reasonable normal. It will be othogonal to\n            // the line (which is a plane but maximally aligned with the camera view.\n            FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::UniformFlow::Impl', ['  vec3 fdx = dFdx(vertexVC.xyz);', '  vec3 fdy = dFdy(vertexVC.xyz);', '  //VTK::UniformFlow::Impl'] // For further replacements\n            ).result;\n            FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Normal::Impl', ['vec3 normalVCVSOutput;', '  if (abs(fdx.x) > 0.0)', '    { fdx = normalize(fdx); normalVCVSOutput = normalize(cross(vec3(fdx.y, -fdx.x, 0.0), fdx)); }', '  else { fdy = normalize(fdy); normalVCVSOutput = normalize(cross(vec3(fdy.y, -fdy.x, 0.0), fdy));}']).result;\n          } else {\n            FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Normal::Dec', ['uniform int cameraParallel;']).result;\n            FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::UniformFlow::Impl', [// '  vec3 fdx = vec3(dFdx(vertexVC.x),dFdx(vertexVC.y),dFdx(vertexVC.z));',\n            // '  vec3 fdy = vec3(dFdy(vertexVC.x),dFdy(vertexVC.y),dFdy(vertexVC.z));',\n            '  vec3 fdx = dFdx(vertexVC.xyz);', '  vec3 fdy = dFdy(vertexVC.xyz);', '  //VTK::UniformFlow::Impl'] // For further replacements\n            ).result;\n            FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Normal::Impl', ['  fdx = normalize(fdx);', '  fdy = normalize(fdy);', '  vec3 normalVCVSOutput = normalize(cross(fdx,fdy));', // the code below is faster, but does not work on some devices\n            // 'vec3 normalVC = normalize(cross(dFdx(vertexVC.xyz), dFdy(vertexVC.xyz)));',\n            '  if (cameraParallel == 1 && normalVCVSOutput.z < 0.0) { normalVCVSOutput = -1.0*normalVCVSOutput; }', '  if (cameraParallel == 0 && dot(normalVCVSOutput,vertexVC.xyz) > 0.0) { normalVCVSOutput = -1.0*normalVCVSOutput; }']).result;\n          }\n        }\n      }\n\n      shaders.Vertex = VSSource;\n      shaders.Geometry = GSSource;\n      shaders.Fragment = FSSource;\n    }\n  };\n\n  publicAPI.replaceShaderPositionVC = function (shaders, ren, actor) {\n    // replace common shader code\n    model.lastBoundBO.replaceShaderPositionVC(shaders, ren, actor);\n    var VSSource = shaders.Vertex;\n    var GSSource = shaders.Geometry;\n    var FSSource = shaders.Fragment; // do we need the vertex in the shader in View Coordinates\n\n    var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');\n\n    if (lastLightComplexity > 0) {\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::PositionVC::Dec', ['varying vec4 vertexVCVSOutput;']).result;\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::PositionVC::Impl', ['vertexVCVSOutput = MCVCMatrix * vertexMC;', '  gl_Position = MCPCMatrix * vertexMC;']).result;\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Camera::Dec', ['uniform mat4 MCPCMatrix;', 'uniform mat4 MCVCMatrix;']).result;\n      GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::PositionVC::Dec', ['in vec4 vertexVCVSOutput[];', 'out vec4 vertexVCGSOutput;']).result;\n      GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::PositionVC::Impl', ['vertexVCGSOutput = vertexVCVSOutput[i];']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::PositionVC::Dec', ['varying vec4 vertexVCVSOutput;']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::PositionVC::Impl', ['vec4 vertexVC = vertexVCVSOutput;']).result;\n    } else {\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Camera::Dec', ['uniform mat4 MCPCMatrix;']).result;\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::PositionVC::Impl', ['  gl_Position = MCPCMatrix * vertexMC;']).result;\n    }\n\n    shaders.Vertex = VSSource;\n    shaders.Geometry = GSSource;\n    shaders.Fragment = FSSource;\n  };\n\n  publicAPI.replaceShaderTCoord = function (shaders, ren, actor) {\n    if (model.lastBoundBO.getCABO().getTCoordOffset()) {\n      var VSSource = shaders.Vertex;\n      var GSSource = shaders.Geometry;\n      var FSSource = shaders.Fragment;\n\n      if (model.drawingEdges) {\n        return;\n      }\n\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Impl', 'tcoordVCVSOutput = tcoordMC;').result; // we only handle the first texture by default\n      // additional textures are activated and we set the uniform\n      // for the texture unit they are assigned to, but you have to\n      // add in the shader code to do something with them\n\n      var tus = model.openGLActor.getActiveTextures();\n      var tNumComp = 2;\n      var tcdim = 2;\n\n      if (tus && tus.length > 0) {\n        tNumComp = tus[0].getComponents();\n\n        if (tus[0].getTarget() === model.context.TEXTURE_CUBE_MAP) {\n          tcdim = 3;\n        }\n      }\n\n      if (model.renderable.getColorTextureMap()) {\n        tNumComp = model.renderable.getColorTextureMap().getPointData().getScalars().getNumberOfComponents();\n        tcdim = 2;\n      }\n\n      if (tcdim === 2) {\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Dec', 'attribute vec2 tcoordMC; varying vec2 tcoordVCVSOutput;').result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::TCoord::Dec', ['in vec2 tcoordVCVSOutput[];', 'out vec2 tcoordVCGSOutput;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::TCoord::Impl', 'tcoordVCGSOutput = tcoordVCVSOutput[i];').result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Dec', ['varying vec2 tcoordVCVSOutput;', 'uniform sampler2D texture1;']).result;\n\n        if (tus && tus.length >= 1) {\n          switch (tNumComp) {\n            case 1:\n              FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', ['  vec4 tcolor = texture2D(texture1, tcoordVCVSOutput);', '  ambientColor = ambientColor*tcolor.r;', '  diffuseColor = diffuseColor*tcolor.r;']).result;\n              break;\n\n            case 2:\n              FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', ['  vec4 tcolor = texture2D(texture1, tcoordVCVSOutput);', '  ambientColor = ambientColor*tcolor.r;', '  diffuseColor = diffuseColor*tcolor.r;', '  opacity = opacity * tcolor.g;']).result;\n              break;\n\n            default:\n              FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', ['  vec4 tcolor = texture2D(texture1, tcoordVCVSOutput);', '  ambientColor = ambientColor*tcolor.rgb;', '  diffuseColor = diffuseColor*tcolor.rgb;', '  opacity = opacity * tcolor.a;']).result;\n          }\n        }\n      } else {\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Dec', 'attribute vec3 tcoordMC; varying vec3 tcoordVCVSOutput;').result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::TCoord::Dec', ['in vec3 tcoordVCVSOutput[];', 'out vec3 tcoordVCGSOutput;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::TCoord::Impl', 'tcoordVCGSOutput = tcoordVCVSOutput[i];').result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Dec', ['varying vec3 tcoordVCVSOutput;', 'uniform samplerCube texture1;']).result;\n\n        switch (tNumComp) {\n          case 1:\n            FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', ['  vec4 tcolor = textureCube(texture1, tcoordVCVSOutput);', '  ambientColor = ambientColor*tcolor.r;', '  diffuseColor = diffuseColor*tcolor.r;']).result;\n            break;\n\n          case 2:\n            FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', ['  vec4 tcolor = textureCube(texture1, tcoordVCVSOutput);', '  ambientColor = ambientColor*tcolor.r;', '  diffuseColor = diffuseColor*tcolor.r;', '  opacity = opacity * tcolor.g;']).result;\n            break;\n\n          default:\n            FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', ['  vec4 tcolor = textureCube(texture1, tcoordVCVSOutput);', '  ambientColor = ambientColor*tcolor.rgb;', '  diffuseColor = diffuseColor*tcolor.rgb;', '  opacity = opacity * tcolor.a;']).result;\n        }\n      }\n\n      shaders.Vertex = VSSource;\n      shaders.Geometry = GSSource;\n      shaders.Fragment = FSSource;\n    }\n  };\n\n  publicAPI.replaceShaderClip = function (shaders, ren, actor) {\n    var VSSource = shaders.Vertex;\n    var FSSource = shaders.Fragment;\n\n    if (model.renderable.getNumberOfClippingPlanes()) {\n      var numClipPlanes = model.renderable.getNumberOfClippingPlanes();\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Clip::Dec', ['uniform int numClipPlanes;', \"uniform vec4 clipPlanes[\".concat(numClipPlanes, \"];\"), \"varying float clipDistancesVSOutput[\".concat(numClipPlanes, \"];\")]).result;\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Clip::Impl', [\"for (int planeNum = 0; planeNum < \".concat(numClipPlanes, \"; planeNum++)\"), '    {', '    if (planeNum >= numClipPlanes)', '        {', '        break;', '        }', '    clipDistancesVSOutput[planeNum] = dot(clipPlanes[planeNum], vertexMC);', '    }']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Clip::Dec', ['uniform int numClipPlanes;', \"varying float clipDistancesVSOutput[\".concat(numClipPlanes, \"];\")]).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Clip::Impl', [\"for (int planeNum = 0; planeNum < \".concat(numClipPlanes, \"; planeNum++)\"), '    {', '    if (planeNum >= numClipPlanes)', '        {', '        break;', '        }', '    if (clipDistancesVSOutput[planeNum] < 0.0) discard;', '    }']).result;\n    }\n\n    shaders.Vertex = VSSource;\n    shaders.Fragment = FSSource;\n  };\n\n  publicAPI.getCoincidentParameters = function (ren, actor) {\n    // 1. ResolveCoincidentTopology is On and non zero for this primitive\n    // type\n    var cp = {\n      factor: 0.0,\n      offset: 0.0\n    };\n    var prop = actor.getProperty();\n\n    if (model.renderable.getResolveCoincidentTopology() || prop.getEdgeVisibility() && prop.getRepresentation() === Representation.SURFACE) {\n      var primType = model.lastBoundBO.getPrimitiveType();\n\n      if (primType === primTypes.Points || prop.getRepresentation() === Representation.POINTS) {\n        cp = model.renderable.getCoincidentTopologyPointOffsetParameter();\n      } else if (primType === primTypes.Lines || prop.getRepresentation() === Representation.WIREFRAME) {\n        cp = model.renderable.getCoincidentTopologyLineOffsetParameters();\n      } else if (primType === primTypes.Tris || primType === primTypes.TriStrips) {\n        cp = model.renderable.getCoincidentTopologyPolygonOffsetParameters();\n      }\n\n      if (primType === primTypes.TrisEdges || primType === primTypes.TriStripsEdges) {\n        cp = model.renderable.getCoincidentTopologyPolygonOffsetParameters();\n        cp.factor /= 2.0;\n        cp.offset /= 2.0;\n      }\n    } // hardware picking always offset due to saved zbuffer\n    // This gets you above the saved surface depth buffer.\n\n\n    var selector = model.openGLRenderer.getSelector();\n\n    if (selector && selector.getFieldAssociation() === FieldAssociations.FIELD_ASSOCIATION_POINTS) {\n      cp.offset -= 2.0;\n    }\n\n    return cp;\n  };\n\n  publicAPI.replaceShaderPicking = function (shaders, ren, actor) {\n    var FSSource = shaders.Fragment;\n    var VSSource = shaders.Vertex;\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Dec', ['uniform int picking;', '//VTK::Picking::Dec']).result;\n\n    if (!model.openGLRenderer.getSelector()) {\n      return;\n    }\n\n    if (model.lastSelectionState === PassTypes.ID_LOW24 || model.lastSelectionState === PassTypes.ID_HIGH24) {\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Picking::Dec', ['flat out int vertexIDVSOutput;\\n', 'uniform int VertexIDOffset;\\n']).result;\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Picking::Impl', '  vertexIDVSOutput = gl_VertexID + VertexIDOffset;\\n').result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Dec', 'flat in int vertexIDVSOutput;\\n').result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Impl', ['  int idx = vertexIDVSOutput;', '//VTK::Picking::Impl']).result;\n    }\n\n    switch (model.lastSelectionState) {\n      case PassTypes.ID_LOW24:\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Impl', '  gl_FragData[0] = vec4(float(idx%256)/255.0, float((idx/256)%256)/255.0, float((idx/65536)%256)/255.0, 1.0);').result;\n        break;\n\n      case PassTypes.ID_HIGH24:\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Impl', '  gl_FragData[0] = vec4(float(idx)/255.0, 0.0, 0.0, 1.0);').result;\n        break;\n\n      default:\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Dec', 'uniform vec3 mapperIndex;').result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Impl', '  gl_FragData[0] = picking != 0 ? vec4(mapperIndex,1.0) : gl_FragData[0];').result;\n    }\n\n    shaders.Fragment = FSSource;\n    shaders.Vertex = VSSource;\n  };\n\n  publicAPI.replaceShaderValues = function (shaders, ren, actor) {\n    publicAPI.replaceShaderColor(shaders, ren, actor);\n    publicAPI.replaceShaderNormal(shaders, ren, actor);\n    publicAPI.replaceShaderLight(shaders, ren, actor);\n    publicAPI.replaceShaderTCoord(shaders, ren, actor);\n    publicAPI.replaceShaderPicking(shaders, ren, actor);\n    publicAPI.replaceShaderClip(shaders, ren, actor);\n    publicAPI.replaceShaderCoincidentOffset(shaders, ren, actor);\n    publicAPI.replaceShaderPositionVC(shaders, ren, actor);\n\n    if (model.haveSeenDepthRequest) {\n      var FSSource = shaders.Fragment;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::ZBuffer::Dec', 'uniform int depthRequest;').result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::ZBuffer::Impl', ['if (depthRequest == 1) {', 'float iz = floor(gl_FragCoord.z*65535.0 + 0.1);', 'float rf = floor(iz/256.0)/255.0;', 'float gf = mod(iz,256.0)/255.0;', 'gl_FragData[0] = vec4(rf, gf, 0.0, 1.0); }']).result;\n      shaders.Fragment = FSSource;\n    }\n  };\n\n  publicAPI.getNeedToRebuildShaders = function (cellBO, ren, actor) {\n    var lightComplexity = 0;\n    var numberOfLights = 0;\n    var primType = cellBO.getPrimitiveType();\n    var poly = model.currentInput; // different algo from C++ as of 5/2019\n\n    var needLighting = false;\n    var pointNormals = poly.getPointData().getNormals();\n    var cellNormals = poly.getCellData().getNormals();\n    var flat = actor.getProperty().getInterpolation() === Shading.FLAT;\n    var representation = actor.getProperty().getRepresentation();\n    var mode = cellBO.getOpenGLMode(representation, primType); // 1) all surfaces need lighting\n\n    if (mode === model.context.TRIANGLES) {\n      needLighting = true; // 2) all cell normals without point normals need lighting\n    } else if (cellNormals && !pointNormals) {\n      needLighting = true; // 3) Phong + pointNormals need lighting\n    } else if (!flat && pointNormals) {\n      needLighting = true; // 4) Phong Lines need lighting\n    } else if (!flat && mode === model.context.LINES) {\n      needLighting = true;\n    } // 5) everything else is unlit\n    // do we need lighting?\n\n\n    if (actor.getProperty().getLighting() && needLighting) {\n      // consider the lighting complexity to determine which case applies\n      // simple headlight, Light Kit, the whole feature set of VTK\n      lightComplexity = 0;\n      var lights = ren.getLightsByReference();\n\n      for (var index = 0; index < lights.length; ++index) {\n        var light = lights[index];\n        var status = light.getSwitch();\n\n        if (status > 0) {\n          numberOfLights++;\n\n          if (lightComplexity === 0) {\n            lightComplexity = 1;\n          }\n        }\n\n        if (lightComplexity === 1 && (numberOfLights > 1 || light.getIntensity() !== 1.0 || !light.lightTypeIsHeadLight())) {\n          lightComplexity = 2;\n        }\n\n        if (lightComplexity < 3 && light.getPositional()) {\n          lightComplexity = 3;\n        }\n      }\n    }\n\n    var needRebuild = false;\n    var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');\n    var lastLightCount = model.lastBoundBO.getReferenceByName('lastLightCount');\n\n    if (lastLightComplexity !== lightComplexity || lastLightCount !== numberOfLights) {\n      model.lastBoundBO.set({\n        lastLightComplexity: lightComplexity\n      }, true);\n      model.lastBoundBO.set({\n        lastLightCount: numberOfLights\n      }, true);\n      needRebuild = true;\n    } // has the render pass shader replacement changed? Two options\n\n\n    if (!model.currentRenderPass && model.lastRenderPassShaderReplacement) {\n      needRebuild = true;\n      model.lastRenderPassShaderReplacement = null;\n    }\n\n    if (model.currentRenderPass && model.currentRenderPass.getShaderReplacement() !== model.lastRenderPassShaderReplacement) {\n      model.lastRenderPassShaderReplacement = model.currentRenderPass.getShaderReplacement();\n      needRebuild = true;\n    } // has something changed that would require us to recreate the shader?\n    // candidates are\n    // property modified (representation interpolation and lighting)\n    // input modified\n    // light complexity changed\n\n\n    if (model.lastHaveSeenDepthRequest !== model.haveSeenDepthRequest || cellBO.getShaderSourceTime().getMTime() < model.renderable.getMTime() || cellBO.getShaderSourceTime().getMTime() < model.currentInput.getMTime() || cellBO.getShaderSourceTime().getMTime() < model.selectionStateChanged.getMTime() || needRebuild) {\n      model.lastHaveSeenDepthRequest = model.haveSeenDepthRequest;\n      return true;\n    }\n\n    return false;\n  };\n\n  publicAPI.invokeShaderCallbacks = function (cellBO, ren, actor) {\n    var listCallbacks = model.renderable.getViewSpecificProperties().ShadersCallbacks;\n\n    if (listCallbacks) {\n      listCallbacks.forEach(function (object) {\n        object.callback(object.userData, cellBO, ren, actor);\n      });\n    }\n  };\n\n  publicAPI.setMapperShaderParameters = function (cellBO, ren, actor) {\n    // Now to update the VAO too, if necessary.\n    if (cellBO.getProgram().isUniformUsed('PrimitiveIDOffset')) {\n      cellBO.getProgram().setUniformi('PrimitiveIDOffset', model.primitiveIDOffset);\n    }\n\n    if (cellBO.getProgram().isUniformUsed('VertexIDOffset')) {\n      cellBO.getProgram().setUniformi('VertexIDOffset', model.vertexIDOffset);\n    }\n\n    if (cellBO.getCABO().getElementCount() && (model.VBOBuildTime.getMTime() > cellBO.getAttributeUpdateTime().getMTime() || cellBO.getShaderSourceTime().getMTime() > cellBO.getAttributeUpdateTime().getMTime())) {\n      var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');\n\n      if (cellBO.getProgram().isAttributeUsed('vertexMC')) {\n        if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'vertexMC', cellBO.getCABO().getVertexOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, 3, false)) {\n          vtkErrorMacro('Error setting vertexMC in shader VAO.');\n        }\n      }\n\n      if (cellBO.getProgram().isAttributeUsed('normalMC') && cellBO.getCABO().getNormalOffset() && lastLightComplexity > 0) {\n        if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'normalMC', cellBO.getCABO().getNormalOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, 3, false)) {\n          vtkErrorMacro('Error setting normalMC in shader VAO.');\n        }\n      } else {\n        cellBO.getVAO().removeAttributeArray('normalMC');\n      }\n\n      model.renderable.getCustomShaderAttributes().forEach(function (attrName, idx) {\n        if (cellBO.getProgram().isAttributeUsed(\"\".concat(attrName, \"MC\"))) {\n          if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), \"\".concat(attrName, \"MC\"), cellBO.getCABO().getCustomData()[idx].offset, cellBO.getCABO().getStride(), model.context.FLOAT, cellBO.getCABO().getCustomData()[idx].components, false)) {\n            vtkErrorMacro(\"Error setting \".concat(attrName, \"MC in shader VAO.\"));\n          }\n        }\n      });\n\n      if (cellBO.getProgram().isAttributeUsed('tcoordMC') && cellBO.getCABO().getTCoordOffset()) {\n        if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'tcoordMC', cellBO.getCABO().getTCoordOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, cellBO.getCABO().getTCoordComponents(), false)) {\n          vtkErrorMacro('Error setting tcoordMC in shader VAO.');\n        }\n      } else {\n        cellBO.getVAO().removeAttributeArray('tcoordMC');\n      }\n\n      if (cellBO.getProgram().isAttributeUsed('scalarColor') && cellBO.getCABO().getColorComponents()) {\n        if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO().getColorBO(), 'scalarColor', cellBO.getCABO().getColorOffset(), cellBO.getCABO().getColorBOStride(), model.context.UNSIGNED_BYTE, 4, true)) {\n          vtkErrorMacro('Error setting scalarColor in shader VAO.');\n        }\n      } else {\n        cellBO.getVAO().removeAttributeArray('scalarColor');\n      }\n\n      cellBO.getAttributeUpdateTime().modified();\n    }\n\n    if (model.renderable.getNumberOfClippingPlanes()) {\n      // add all the clipping planes\n      var numClipPlanes = model.renderable.getNumberOfClippingPlanes();\n      var planeEquations = [];\n      var shiftScaleEnabled = cellBO.getCABO().getCoordShiftAndScaleEnabled();\n      var inverseShiftScaleMatrix = shiftScaleEnabled ? cellBO.getCABO().getInverseShiftAndScaleMatrix() : null;\n      var mat = inverseShiftScaleMatrix ? mat4.copy(model.tmpMat4, actor.getMatrix()) : actor.getMatrix();\n\n      if (inverseShiftScaleMatrix) {\n        mat4.transpose(mat, mat);\n        mat4.multiply(mat, mat, inverseShiftScaleMatrix);\n        mat4.transpose(mat, mat);\n      }\n\n      for (var i = 0; i < numClipPlanes; i++) {\n        var planeEquation = [];\n        model.renderable.getClippingPlaneInDataCoords(mat, i, planeEquation);\n\n        for (var j = 0; j < 4; j++) {\n          planeEquations.push(planeEquation[j]);\n        }\n      }\n\n      cellBO.getProgram().setUniformi('numClipPlanes', numClipPlanes);\n      cellBO.getProgram().setUniform4fv('clipPlanes', planeEquations);\n    }\n\n    if (model.internalColorTexture && cellBO.getProgram().isUniformUsed('texture1')) {\n      cellBO.getProgram().setUniformi('texture1', model.internalColorTexture.getTextureUnit());\n    }\n\n    var tus = model.openGLActor.getActiveTextures();\n\n    if (tus) {\n      for (var index = 0; index < tus.length; ++index) {\n        var tex = tus[index];\n        var texUnit = tex.getTextureUnit();\n        var tname = \"texture\".concat(texUnit + 1);\n\n        if (cellBO.getProgram().isUniformUsed(tname)) {\n          cellBO.getProgram().setUniformi(tname, texUnit);\n        }\n      }\n    } // handle depth requests\n\n\n    if (model.haveSeenDepthRequest) {\n      cellBO.getProgram().setUniformi('depthRequest', model.renderDepth ? 1 : 0);\n    } // handle coincident\n\n\n    if (cellBO.getProgram().isUniformUsed('coffset')) {\n      var cp = publicAPI.getCoincidentParameters(ren, actor);\n      cellBO.getProgram().setUniformf('coffset', cp.offset); // cfactor isn't always used when coffset is.\n\n      if (cellBO.getProgram().isUniformUsed('cfactor')) {\n        cellBO.getProgram().setUniformf('cfactor', cp.factor);\n      }\n    } // handle wide lines\n\n\n    cellBO.setMapperShaderParameters(ren, actor, model.openGLRenderer.getTiledSizeAndOrigin());\n    var selector = model.openGLRenderer.getSelector();\n    cellBO.getProgram().setUniform3fArray('mapperIndex', selector ? selector.getPropColorValue() : [0.0, 0.0, 0.0]);\n    cellBO.getProgram().setUniformi('picking', selector ? selector.getCurrentPass() + 1 : 0);\n  };\n\n  publicAPI.setLightingShaderParameters = function (cellBO, ren, actor) {\n    // for unlit and headlight there are no lighting parameters\n    var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');\n\n    if (lastLightComplexity < 2) {\n      return;\n    }\n\n    var program = cellBO.getProgram(); // bind some light settings\n\n    var numberOfLights = 0;\n    var lights = ren.getLightsByReference();\n\n    for (var index = 0; index < lights.length; ++index) {\n      var light = lights[index];\n      var status = light.getSwitch();\n\n      if (status > 0.0) {\n        var dColor = light.getColorByReference();\n        var intensity = light.getIntensity();\n        model.lightColor[0] = dColor[0] * intensity;\n        model.lightColor[1] = dColor[1] * intensity;\n        model.lightColor[2] = dColor[2] * intensity; // get required info from light\n\n        var ld = light.getDirection();\n        var transform = ren.getActiveCamera().getViewMatrix();\n\n        var newLightDirection = _toConsumableArray(ld);\n\n        if (light.lightTypeIsSceneLight()) {\n          newLightDirection[0] = transform[0] * ld[0] + transform[1] * ld[1] + transform[2] * ld[2];\n          newLightDirection[1] = transform[4] * ld[0] + transform[5] * ld[1] + transform[6] * ld[2];\n          newLightDirection[2] = transform[8] * ld[0] + transform[9] * ld[1] + transform[10] * ld[2];\n          normalize(newLightDirection);\n        }\n\n        model.lightDirection[0] = newLightDirection[0];\n        model.lightDirection[1] = newLightDirection[1];\n        model.lightDirection[2] = newLightDirection[2];\n        model.lightHalfAngle[0] = -model.lightDirection[0];\n        model.lightHalfAngle[1] = -model.lightDirection[1];\n        model.lightHalfAngle[2] = -model.lightDirection[2] + 1.0;\n        normalize(model.lightDirection);\n        program.setUniform3fArray(\"lightColor\".concat(numberOfLights), model.lightColor);\n        program.setUniform3fArray(\"lightDirectionVC\".concat(numberOfLights), model.lightDirection);\n        program.setUniform3fArray(\"lightHalfAngleVC\".concat(numberOfLights), model.lightHalfAngle);\n        numberOfLights++;\n      }\n    } // we are done unless we have positional lights\n\n\n    if (lastLightComplexity < 3) {\n      return;\n    } // for lightkit case there are some parameters to set\n\n\n    var cam = ren.getActiveCamera();\n    var viewTF = cam.getViewMatrix();\n    mat4.transpose(viewTF, viewTF);\n    numberOfLights = 0;\n\n    for (var _index = 0; _index < lights.length; ++_index) {\n      var _light = lights[_index];\n\n      var _status = _light.getSwitch();\n\n      if (_status > 0.0) {\n        var lp = _light.getTransformedPosition();\n\n        var np = new Float64Array(3);\n        vec3.transformMat4(np, lp, viewTF);\n        program.setUniform3fArray(\"lightAttenuation\".concat(numberOfLights), _light.getAttenuationValuesByReference());\n        program.setUniformi(\"lightPositional\".concat(numberOfLights), _light.getPositional());\n        program.setUniformf(\"lightExponent\".concat(numberOfLights), _light.getExponent());\n        program.setUniformf(\"lightConeAngle\".concat(numberOfLights), _light.getConeAngle());\n        program.setUniform3fArray(\"lightPositionVC\".concat(numberOfLights), [np[0], np[1], np[2]]);\n        numberOfLights++;\n      }\n    }\n  };\n\n  function safeMatrixMultiply(matrixArray, matrixType, tmpMat) {\n    matrixType.identity(tmpMat);\n    return matrixArray.reduce(function (res, matrix, index) {\n      if (index === 0) {\n        return matrix ? matrixType.copy(res, matrix) : matrixType.identity(res);\n      }\n\n      return matrix ? matrixType.multiply(res, res, matrix) : res;\n    }, tmpMat);\n  }\n\n  publicAPI.setCameraShaderParameters = function (cellBO, ren, actor) {\n    var program = cellBO.getProgram(); // [WMVP]C == {world, model, view, projection} coordinates\n    // E.g., WCPC == world to projection coordinate transformation\n\n    var keyMats = model.openGLCamera.getKeyMatrices(ren);\n    var cam = ren.getActiveCamera();\n    var camm = model.openGLCamera.getKeyMatrixTime().getMTime();\n    var progm = program.getLastCameraMTime();\n    var shiftScaleEnabled = cellBO.getCABO().getCoordShiftAndScaleEnabled();\n    var inverseShiftScaleMatrix = shiftScaleEnabled ? cellBO.getCABO().getInverseShiftAndScaleMatrix() : null;\n    var actorIsIdentity = actor.getIsIdentity();\n    var actMats = actorIsIdentity ? {\n      mcwc: null,\n      normalMatrix: null\n    } : model.openGLActor.getKeyMatrices();\n\n    if (actor.getCoordinateSystem() === CoordinateSystem.DISPLAY) {\n      var size = model.openGLRenderer.getTiledSizeAndOrigin();\n      mat4.identity(model.tmpMat4);\n      model.tmpMat4[0] = 2.0 / size.usize;\n      model.tmpMat4[12] = -1.0;\n      model.tmpMat4[5] = 2.0 / size.vsize;\n      model.tmpMat4[13] = -1.0;\n      mat4.multiply(model.tmpMat4, model.tmpMat4, inverseShiftScaleMatrix);\n      program.setUniformMatrix('MCPCMatrix', model.tmpMat4);\n    } else {\n      program.setUniformMatrix('MCPCMatrix', safeMatrixMultiply([keyMats.wcpc, actMats.mcwc, inverseShiftScaleMatrix], mat4, model.tmpMat4));\n    }\n\n    if (program.isUniformUsed('MCVCMatrix')) {\n      program.setUniformMatrix('MCVCMatrix', safeMatrixMultiply([keyMats.wcvc, actMats.mcwc, inverseShiftScaleMatrix], mat4, model.tmpMat4));\n    }\n\n    if (program.isUniformUsed('normalMatrix')) {\n      program.setUniformMatrix3x3('normalMatrix', safeMatrixMultiply([keyMats.normalMatrix, actMats.normalMatrix], mat3, model.tmpMat3));\n    }\n\n    if (progm !== camm) {\n      if (program.isUniformUsed('cameraParallel')) {\n        program.setUniformi('cameraParallel', cam.getParallelProjection());\n      }\n\n      program.setLastCameraMTime(camm);\n    }\n\n    if (!actorIsIdentity) {\n      // reset the cam mtime as actor modified the shader values\n      program.setLastCameraMTime(0);\n    }\n  };\n\n  publicAPI.setPropertyShaderParameters = function (cellBO, ren, actor) {\n    var program = cellBO.getProgram();\n    var ppty = actor.getProperty();\n    var opacity = ppty.getOpacity();\n    var aColor = model.drawingEdges ? ppty.getEdgeColorByReference() : ppty.getAmbientColorByReference();\n    var dColor = model.drawingEdges ? ppty.getEdgeColorByReference() : ppty.getDiffuseColorByReference();\n    var aIntensity = model.drawingEdges ? 1.0 : ppty.getAmbient();\n    var dIntensity = model.drawingEdges ? 0.0 : ppty.getDiffuse();\n    var sIntensity = model.drawingEdges ? 0.0 : ppty.getSpecular();\n    var specularPower = ppty.getSpecularPower();\n    program.setUniformf('opacityUniform', opacity);\n    program.setUniform3fArray('ambientColorUniform', aColor);\n    program.setUniform3fArray('diffuseColorUniform', dColor);\n    program.setUniformf('ambient', aIntensity);\n    program.setUniformf('diffuse', dIntensity); // we are done unless we have lighting\n\n    var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');\n\n    if (lastLightComplexity < 1) {\n      return;\n    }\n\n    var sColor = ppty.getSpecularColorByReference();\n    program.setUniform3fArray('specularColorUniform', sColor);\n    program.setUniformf('specularPowerUniform', specularPower);\n    program.setUniformf('specular', sIntensity); // now set the backface properties if we have them\n\n    if (program.isUniformUsed('ambientIntensityBF')) {\n      ppty = actor.getBackfaceProperty();\n      opacity = ppty.getOpacity();\n      aColor = ppty.getAmbientColor();\n      aIntensity = ppty.getAmbient();\n      dColor = ppty.getDiffuseColor();\n      dIntensity = ppty.getDiffuse();\n      sColor = ppty.getSpecularColor();\n      sIntensity = ppty.getSpecular();\n      program.setUniformf('ambientIntensityBF', aIntensity);\n      program.setUniformf('diffuseIntensityBF', dIntensity);\n      program.setUniformf('opacityUniformBF', opacity);\n      program.setUniform3fArray('ambientColorUniformBF', aColor);\n      program.setUniform3fArray('diffuseColorUniformBF', dColor); // we are done unless we have lighting\n\n      if (lastLightComplexity < 1) {\n        return;\n      }\n\n      program.setUniformf('specularIntensityBF', sIntensity);\n      program.setUniform3fArray('specularColorUniformBF', sColor);\n      program.setUniformf('specularPowerUniformBF', specularPower);\n    }\n  };\n\n  publicAPI.updateMaximumPointCellIds = function (ren, actor) {\n    var _model$selectionWebGL, _model$selectionWebGL2, _model$selectionWebGL3, _model$selectionWebGL4;\n\n    var selector = model.openGLRenderer.getSelector();\n\n    if (!selector) {\n      return;\n    }\n\n    if ((_model$selectionWebGL = model.selectionWebGLIdsToVTKIds) !== null && _model$selectionWebGL !== void 0 && (_model$selectionWebGL2 = _model$selectionWebGL.points) !== null && _model$selectionWebGL2 !== void 0 && _model$selectionWebGL2.length) {\n      var length = model.selectionWebGLIdsToVTKIds.points.length;\n      selector.setMaximumPointId(length - 1);\n    }\n\n    if ((_model$selectionWebGL3 = model.selectionWebGLIdsToVTKIds) !== null && _model$selectionWebGL3 !== void 0 && (_model$selectionWebGL4 = _model$selectionWebGL3.cells) !== null && _model$selectionWebGL4 !== void 0 && _model$selectionWebGL4.length) {\n      var _length = model.selectionWebGLIdsToVTKIds.cells.length;\n      selector.setMaximumCellId(_length - 1);\n    }\n\n    var fieldAssociation = selector.getFieldAssociation();\n\n    if (fieldAssociation === FieldAssociations.FIELD_ASSOCIATION_POINTS) {\n      model.pointPicking = true;\n    }\n  };\n\n  publicAPI.renderPieceStart = function (ren, actor) {\n    model.primitiveIDOffset = 0;\n    model.vertexIDOffset = 0;\n    var picking = getPickState(model.openGLRenderer);\n\n    if (model.lastSelectionState !== picking) {\n      model.selectionStateChanged.modified();\n      model.lastSelectionState = picking;\n    }\n\n    if (model.openGLRenderer.getSelector()) {\n      switch (picking) {\n        default:\n          model.openGLRenderer.getSelector().renderProp(actor);\n      }\n    } // make sure the BOs are up to date\n\n\n    publicAPI.updateBufferObjects(ren, actor); // If we are coloring by texture, then load the texture map.\n    // Use Map as indicator, because texture hangs around.\n\n    if (model.renderable.getColorTextureMap()) {\n      model.internalColorTexture.activate();\n    } // Bind the OpenGL, this is shared between the different primitive/cell types.\n\n\n    model.lastBoundBO = null;\n  };\n\n  publicAPI.renderPieceDraw = function (ren, actor) {\n    var representation = actor.getProperty().getRepresentation();\n    var drawSurfaceWithEdges = actor.getProperty().getEdgeVisibility() && representation === Representation.SURFACE;\n    var selector = model.openGLRenderer.getSelector(); // If we are picking points, we need to tell it to the helper\n\n    var pointPicking = selector && selector.getFieldAssociation() === FieldAssociations.FIELD_ASSOCIATION_POINTS && (model.lastSelectionState === PassTypes.ID_LOW24 || model.lastSelectionState === PassTypes.ID_HIGH24); // for every primitive type\n\n    for (var i = primTypes.Start; i < primTypes.End; i++) {\n      model.primitives[i].setPointPicking(pointPicking);\n      var cabo = model.primitives[i].getCABO();\n\n      if (cabo.getElementCount()) {\n        // are we drawing edges\n        model.drawingEdges = drawSurfaceWithEdges && (i === primTypes.TrisEdges || i === primTypes.TriStripsEdges);\n\n        if (!model.drawingEdges || !model.renderDepth) {\n          model.lastBoundBO = model.primitives[i];\n          model.primitiveIDOffset += model.primitives[i].drawArrays(ren, actor, representation, publicAPI);\n          model.vertexIDOffset += model.primitives[i].getCABO().getElementCount();\n        }\n      }\n    }\n  };\n\n  publicAPI.renderPieceFinish = function (ren, actor) {\n    if (model.LastBoundBO) {\n      model.LastBoundBO.getVAO().release();\n    }\n\n    if (model.renderable.getColorTextureMap()) {\n      model.internalColorTexture.deactivate();\n    }\n  };\n\n  publicAPI.renderPiece = function (ren, actor) {\n    // Make sure that we have been properly initialized.\n    // if (ren.getRenderWindow().checkAbortStatus()) {\n    //   return;\n    // }\n    publicAPI.invokeEvent(StartEvent);\n\n    if (!model.renderable.getStatic()) {\n      model.renderable.update();\n    }\n\n    model.currentInput = model.renderable.getInputData();\n    publicAPI.invokeEvent(EndEvent);\n\n    if (!model.currentInput) {\n      vtkErrorMacro('No input!');\n      return;\n    } // if there are no points then we are done\n\n\n    if (!model.currentInput.getPoints || !model.currentInput.getPoints().getNumberOfValues()) {\n      return;\n    } // apply faceCulling\n\n\n    var gl = model.context;\n    var backfaceCulling = actor.getProperty().getBackfaceCulling();\n    var frontfaceCulling = actor.getProperty().getFrontfaceCulling();\n\n    if (!backfaceCulling && !frontfaceCulling) {\n      model._openGLRenderWindow.disableCullFace();\n    } else if (frontfaceCulling) {\n      model._openGLRenderWindow.enableCullFace();\n\n      gl.cullFace(gl.FRONT);\n    } else {\n      model._openGLRenderWindow.enableCullFace();\n\n      gl.cullFace(gl.BACK);\n    }\n\n    publicAPI.renderPieceStart(ren, actor);\n    publicAPI.renderPieceDraw(ren, actor);\n    publicAPI.renderPieceFinish(ren, actor);\n  };\n\n  publicAPI.computeBounds = function (ren, actor) {\n    if (!publicAPI.getInput()) {\n      uninitializeBounds(model.bounds);\n      return;\n    }\n\n    model.bounds = publicAPI.getInput().getBounds();\n  };\n\n  publicAPI.updateBufferObjects = function (ren, actor) {\n    // Rebuild buffers if needed\n    if (publicAPI.getNeedToRebuildBufferObjects(ren, actor)) {\n      publicAPI.buildBufferObjects(ren, actor);\n    }\n  };\n\n  publicAPI.getNeedToRebuildBufferObjects = function (ren, actor) {\n    // first do a coarse check\n    // Note that the actor's mtime includes it's properties mtime\n    var vmtime = model.VBOBuildTime.getMTime();\n\n    if (vmtime < publicAPI.getMTime() || vmtime < model.renderable.getMTime() || vmtime < actor.getMTime() || vmtime < model.currentInput.getMTime()) {\n      return true;\n    }\n\n    return false;\n  };\n\n  publicAPI.buildBufferObjects = function (ren, actor) {\n    var poly = model.currentInput;\n\n    if (poly === null) {\n      return;\n    }\n\n    model.renderable.mapScalars(poly, 1.0);\n    var c = model.renderable.getColorMapColors();\n    model.haveCellScalars = false;\n    var scalarMode = model.renderable.getScalarMode();\n\n    if (model.renderable.getScalarVisibility()) {\n      // We must figure out how the scalars should be mapped to the polydata.\n      if ((scalarMode === ScalarMode.USE_CELL_DATA || scalarMode === ScalarMode.USE_CELL_FIELD_DATA || scalarMode === ScalarMode.USE_FIELD_DATA || !poly.getPointData().getScalars()) && scalarMode !== ScalarMode.USE_POINT_FIELD_DATA && c) {\n        model.haveCellScalars = true;\n      }\n    } // Do we have normals?\n\n\n    var n = actor.getProperty().getInterpolation() !== Shading.FLAT ? poly.getPointData().getNormals() : null;\n\n    if (n === null && poly.getCellData().getNormals()) {\n      model.haveCellNormals = true;\n      n = poly.getCellData().getNormals();\n    } // rebuild the VBO if the data has changed we create a string for the VBO what\n    // can change the VBO? points normals tcoords colors so what can change those?\n    // the input data is clearly one as it can change all four items tcoords may\n    // haveTextures or not colors may change based on quite a few mapping\n    // parameters in the mapper\n\n\n    var representation = actor.getProperty().getRepresentation();\n    var tcoords = poly.getPointData().getTCoords();\n\n    if (!model.openGLActor.getActiveTextures()) {\n      tcoords = null;\n    } // handle color mapping via texture\n\n\n    if (model.renderable.getColorCoordinates()) {\n      tcoords = model.renderable.getColorCoordinates();\n\n      if (!model.internalColorTexture) {\n        model.internalColorTexture = vtkOpenGLTexture.newInstance();\n      }\n\n      var tex = model.internalColorTexture; // the following 4 lines allow for NPOT textures\n\n      tex.setMinificationFilter(Filter.NEAREST);\n      tex.setMagnificationFilter(Filter.NEAREST);\n      tex.setWrapS(Wrap.CLAMP_TO_EDGE);\n      tex.setWrapT(Wrap.CLAMP_TO_EDGE);\n      tex.setOpenGLRenderWindow(model._openGLRenderWindow);\n      var input = model.renderable.getColorTextureMap();\n      var ext = input.getExtent();\n      var inScalars = input.getPointData().getScalars();\n      tex.create2DFromRaw(ext[1] - ext[0] + 1, ext[3] - ext[2] + 1, inScalars.getNumberOfComponents(), inScalars.getDataType(), inScalars.getData());\n      tex.activate();\n      tex.sendParameters();\n      tex.deactivate();\n    }\n\n    var toString = \"\".concat(poly.getMTime(), \"A\").concat(representation, \"B\").concat(poly.getMTime()) + \"C\".concat(n ? n.getMTime() : 1, \"D\").concat(c ? c.getMTime() : 1) + \"E\".concat(actor.getProperty().getEdgeVisibility()) + \"F\".concat(tcoords ? tcoords.getMTime() : 1);\n\n    if (model.VBOBuildString !== toString) {\n      // Build the VBOs\n      var points = poly.getPoints();\n      var options = {\n        points: points,\n        normals: n,\n        tcoords: tcoords,\n        colors: c,\n        cellOffset: 0,\n        vertexOffset: 0,\n        // Used to keep track of vertex ids across primitives for selection\n        haveCellScalars: model.haveCellScalars,\n        haveCellNormals: model.haveCellNormals,\n        customAttributes: model.renderable.getCustomShaderAttributes().map(function (arrayName) {\n          return poly.getPointData().getArrayByName(arrayName);\n        })\n      };\n\n      if (model.renderable.getPopulateSelectionSettings()) {\n        model.selectionWebGLIdsToVTKIds = {\n          points: null,\n          cells: null\n        };\n      }\n\n      var primitives = [{\n        inRep: 'verts',\n        cells: poly.getVerts()\n      }, {\n        inRep: 'lines',\n        cells: poly.getLines()\n      }, {\n        inRep: 'polys',\n        cells: poly.getPolys()\n      }, {\n        inRep: 'strips',\n        cells: poly.getStrips()\n      }, {\n        inRep: 'polys',\n        cells: poly.getPolys()\n      }, {\n        inRep: 'strips',\n        cells: poly.getStrips()\n      }];\n      var drawSurfaceWithEdges = // TODO: false if picking\n      actor.getProperty().getEdgeVisibility() && representation === Representation.SURFACE;\n\n      for (var i = primTypes.Start; i < primTypes.End; i++) {\n        if (i !== primTypes.TrisEdges && i !== primTypes.TriStripsEdges) {\n          options.cellOffset += model.primitives[i].getCABO().createVBO(primitives[i].cells, primitives[i].inRep, representation, options, model.selectionWebGLIdsToVTKIds);\n          options.vertexOffset += model.primitives[i].getCABO().getElementCount();\n        } else {\n          // if we have edge visibility build the edge VBOs\n          if (drawSurfaceWithEdges) {\n            model.primitives[i].getCABO().createVBO(primitives[i].cells, primitives[i].inRep, Representation.WIREFRAME, {\n              points: points,\n              normals: n,\n              tcoords: null,\n              colors: null,\n              cellOffset: 0,\n              haveCellScalars: false,\n              haveCellNormals: false\n            });\n          } else {\n            // otherwise free them\n            model.primitives[i].releaseGraphicsResources();\n          }\n        }\n      }\n\n      if (model.renderable.getPopulateSelectionSettings()) {\n        model.renderable.setSelectionWebGLIdsToVTKIds(model.selectionWebGLIdsToVTKIds);\n        publicAPI.updateMaximumPointCellIds();\n      }\n\n      model.VBOBuildTime.modified();\n      model.VBOBuildString = toString;\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  context: null,\n  VBOBuildTime: 0,\n  VBOBuildString: null,\n  primitives: null,\n  primTypes: null,\n  shaderRebuildString: null,\n  tmpMat4: null,\n  ambientColor: [],\n  // used internally\n  diffuseColor: [],\n  // used internally\n  specularColor: [],\n  // used internally\n  lightColor: [],\n  // used internally\n  lightHalfAngle: [],\n  // used internally\n  lightDirection: [],\n  // used internally\n  lastHaveSeenDepthRequest: false,\n  haveSeenDepthRequest: false,\n  lastSelectionState: PassTypes.MIN_KNOWN_PASS - 1,\n  selectionStateChanged: null,\n  selectionWebGLIdsToVTKIds: null,\n  pointPicking: false\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  vtkReplacementShaderMapper.implementReplaceShaderCoincidentOffset(publicAPI, model, initialValues);\n  model.primitives = [];\n  model.primTypes = primTypes;\n  model.tmpMat3 = mat3.identity(new Float64Array(9));\n  model.tmpMat4 = mat4.identity(new Float64Array(16));\n\n  for (var i = primTypes.Start; i < primTypes.End; i++) {\n    model.primitives[i] = vtkHelper.newInstance();\n    model.primitives[i].setPrimitiveType(i);\n    model.primitives[i].set({\n      lastLightComplexity: 0,\n      lastLightCount: 0,\n      lastSelectionPass: false\n    }, true);\n  } // Build VTK API\n\n\n  setGet(publicAPI, model, ['context']);\n  model.VBOBuildTime = {};\n  obj(model.VBOBuildTime, {\n    mtime: 0\n  });\n  model.selectionStateChanged = {};\n  obj(model.selectionStateChanged, {\n    mtime: 0\n  }); // Object methods\n\n  vtkOpenGLPolyDataMapper(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkOpenGLPolyDataMapper'); // ----------------------------------------------------------------------------\n\nvar vtkOpenGLPolyDataMapper$1 = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to OpenGL backend if imported\n\nregisterOverride('vtkMapper', newInstance);\n\nexport { vtkOpenGLPolyDataMapper$1 as default, extend, newInstance };\n", "import macro from '../../macros.js';\nimport vtkAbstractMapper from './AbstractMapper.js';\nimport vtkLookupTable from '../../Common/Core/LookupTable.js';\nimport Constants from './Mapper/Constants.js';\n\nvar ColorMode = Constants.ColorMode,\n    ScalarMode = Constants.ScalarMode,\n    GetArray = Constants.GetArray; // ---------------------------------------------------------------------------\n// vtkMapper2D methods\n// ---------------------------------------------------------------------------\n\nfunction vtkMapper2D(publicAPI, model) {\n  // Set out className\n  model.classHierarchy.push('vtkMapper2D');\n\n  publicAPI.createDefaultLookupTable = function () {\n    model.lookupTable = vtkLookupTable.newInstance();\n  };\n\n  publicAPI.getColorModeAsString = function () {\n    return macro.enumToString(ColorMode, model.colorMode);\n  };\n\n  publicAPI.setColorModeToDefault = function () {\n    return publicAPI.setColorMode(0);\n  };\n\n  publicAPI.setColorModeToMapScalars = function () {\n    return publicAPI.setColorMode(1);\n  };\n\n  publicAPI.setColorModeToDirectScalars = function () {\n    return publicAPI.setColorMode(2);\n  };\n\n  publicAPI.getScalarModeAsString = function () {\n    return macro.enumToString(ScalarMode, model.scalarMode);\n  };\n\n  publicAPI.setScalarModeToDefault = function () {\n    return publicAPI.setScalarMode(0);\n  };\n\n  publicAPI.setScalarModeToUsePointData = function () {\n    return publicAPI.setScalarMode(1);\n  };\n\n  publicAPI.setScalarModeToUseCellData = function () {\n    return publicAPI.setScalarMode(2);\n  };\n\n  publicAPI.setScalarModeToUsePointFieldData = function () {\n    return publicAPI.setScalarMode(3);\n  };\n\n  publicAPI.setScalarModeToUseCellFieldData = function () {\n    return publicAPI.setScalarMode(4);\n  };\n\n  publicAPI.setScalarModeToUseFieldData = function () {\n    return publicAPI.setScalarMode(5);\n  };\n\n  publicAPI.getAbstractScalars = function (input, scalarMode, arrayAccessMode, arrayId, arrayName) {\n    // make sure we have an input\n    if (!input || !model.scalarVisibility) {\n      return {\n        scalars: null,\n        cellFLag: false\n      };\n    }\n\n    var scalars = null;\n    var cellFlag = false; // get scalar data and point/cell attribute according to scalar mode\n\n    if (scalarMode === ScalarMode.DEFAULT) {\n      scalars = input.getPointData().getScalars();\n\n      if (!scalars) {\n        scalars = input.getCellData().getScalars();\n        cellFlag = true;\n      }\n    } else if (scalarMode === ScalarMode.USE_POINT_DATA) {\n      scalars = input.getPointData().getScalars();\n    } else if (scalarMode === ScalarMode.USE_CELL_DATA) {\n      scalars = input.getCellData().getScalars();\n      cellFlag = true;\n    } else if (scalarMode === ScalarMode.USE_POINT_FIELD_DATA) {\n      var pd = input.getPointData();\n\n      if (arrayAccessMode === GetArray.BY_ID) {\n        scalars = pd.getArrayByIndex(arrayId);\n      } else {\n        scalars = pd.getArrayByName(arrayName);\n      }\n    } else if (scalarMode === ScalarMode.USE_CELL_FIELD_DATA) {\n      var cd = input.getCellData();\n      cellFlag = true;\n\n      if (arrayAccessMode === GetArray.BY_ID) {\n        scalars = cd.getArrayByIndex(arrayId);\n      } else {\n        scalars = cd.getArrayByName(arrayName);\n      }\n    } else if (scalarMode === ScalarMode.USE_FIELD_DATA) {\n      var fd = input.getFieldData();\n\n      if (arrayAccessMode === GetArray.BY_ID) {\n        scalars = fd.getArrayByIndex(arrayId);\n      } else {\n        scalars = fd.getArrayByName(arrayName);\n      }\n    }\n\n    return {\n      scalars: scalars,\n      cellFlag: cellFlag\n    };\n  };\n\n  publicAPI.getLookupTable = function () {\n    if (!model.lookupTable) {\n      publicAPI.createDefaultLookupTable();\n    }\n\n    return model.lookupTable;\n  };\n\n  publicAPI.getMTime = function () {\n    var mt = model.mtime;\n\n    if (model.lookupTable !== null) {\n      var time = model.lookupTable.getMTime();\n      mt = time > mt ? time : mt;\n    }\n\n    return mt;\n  };\n\n  publicAPI.mapScalars = function (input, alpha) {\n    var scalars = publicAPI.getAbstractScalars(input, model.scalarMode, model.arrayAccessMode, model.arrayId, model.colorByArrayName).scalars;\n\n    if (!scalars) {\n      model.colorMapColors = null;\n      return;\n    } // we want to only recompute when something has changed\n\n\n    var toString = \"\".concat(publicAPI.getMTime()).concat(scalars.getMTime()).concat(alpha);\n    if (model.colorBuildString === toString) return;\n\n    if (!model.useLookupTableScalarRange) {\n      publicAPI.getLookupTable().setRange(model.scalarRange[0], model.scalarRange[1]);\n    }\n\n    var lut = publicAPI.getLookupTable();\n\n    if (lut) {\n      // Ensure that the lookup table is built\n      lut.build();\n      model.colorMapColors = lut.mapScalars(scalars, model.colorMode, model.fieldDataTupleId);\n    }\n\n    model.colorBuildString = \"\".concat(publicAPI.getMTime()).concat(scalars.getMTime()).concat(alpha);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  static: false,\n  lookupTable: null,\n  scalarVisibility: false,\n  scalarRange: [0, 1],\n  useLookupTableScalarRange: false,\n  colorMode: 0,\n  scalarMode: 0,\n  arrayAccessMode: 1,\n  // By_NAME\n  renderTime: 0,\n  colorByArrayName: null,\n  transformCoordinate: null,\n  viewSpecificProperties: null,\n  customShaderAttributes: []\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkAbstractMapper.extend(publicAPI, model, initialValues);\n  macro.get(publicAPI, model, ['colorMapColors']);\n  macro.setGet(publicAPI, model, ['arrayAccessMode', 'colorByArrayName', 'colorMode', 'lookupTable', 'renderTime', 'scalarMode', 'scalarVisibility', 'static', 'transformCoordinate', 'useLookupTableScalarRange', 'viewSpecificProperties', 'customShaderAttributes' // point data array names that will be transferred to the VBO\n  ]);\n  macro.setGetArray(publicAPI, model, ['scalarRange'], 2);\n\n  if (!model.viewSpecificProperties) {\n    model.viewSpecificProperties = {};\n  } // Object methods\n\n\n  vtkMapper2D(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkMapper2D'); // ----------------------------------------------------------------------------\n\nvar vtkMapper2D$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkMapper2D$1 as default, extend, newInstance };\n", "var vtkPolyData2DFS = \"//VTK::System::Dec\\n\\n/*=========================================================================\\n\\n  Program:   Visualization Toolkit\\n  Module:    vtkPolyData2DFS.glsl\\n\\n  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\\n  All rights reserved.\\n  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.\\n\\n     This software is distributed WITHOUT ANY WARRANTY; without even\\n     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\\n     PURPOSE.  See the above copyright notice for more information.\\n\\n=========================================================================*/\\n\\nuniform int PrimitiveIDOffset;\\n\\n// Texture coordinates\\n//VTK::TCoord::Dec\\n\\n// Scalar coloring\\n//VTK::Color::Dec\\n\\n// Depth Peeling\\n//VTK::DepthPeeling::Dec\\n\\n// picking support\\n//VTK::Picking::Dec\\n\\n// the output of this shader\\n//VTK::Output::Dec\\n\\n// Apple Bug\\n//VTK::PrimID::Dec\\n\\nvoid main()\\n{\\n  // Apple Bug\\n  //VTK::PrimID::Impl\\n\\n  //VTK::Color::Impl\\n  //VTK::TCoord::Impl\\n\\n  //VTK::DepthPeeling::Impl\\n  //VTK::Picking::Impl\\n\\n  if (gl_FragData[0].a <= 0.0)\\n    {\\n    discard;\\n    }\\n}\\n\";\n\nexport { vtkPolyData2DFS as v };\n", "var vtkPolyData2DVS = \"//VTK::System::Dec\\n\\n/*=========================================================================\\n\\n  Program:   Visualization Toolkit\\n  Module:    vtkPolyData2DVS.glsl\\n\\n  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\\n  All rights reserved.\\n  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.\\n\\n     This software is distributed WITHOUT ANY WARRANTY; without even\\n     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\\n     PURPOSE.  See the above copyright notice for more information.\\n\\n=========================================================================*/\\n\\n// all variables that represent positions or directions have a suffix\\n// indicating the coordinate system they are in. The possible values are\\n// MC - Model Coordinates\\n// WC - WC world coordinates\\n// VC - View Coordinates\\n// DC - Display Coordinates\\n\\nin vec4 vertexWC;\\n\\n// frag position in VC\\n//VTK::PositionVC::Dec\\n\\n// material property values\\n//VTK::Color::Dec\\n\\n// Texture coordinates\\n//VTK::TCoord::Dec\\n\\n// Apple Bug\\n//VTK::PrimID::Dec\\n\\nuniform mat4 WCVCMatrix;  // World to view matrix\\n\\nvoid main()\\n{\\n  // Apple Bug\\n  //VTK::PrimID::Impl\\n\\n  gl_Position = WCVCMatrix*vertexWC;\\n\\n  //VTK::TCoord::Impl\\n\\n  //VTK::Color::Impl\\n\\n  //VTK::PositionVC::Impl\\n}\\n\";\n\nexport { vtkPolyData2DVS as v };\n", "var DisplayLocation = {\n  BACKGROUND: 0,\n  FOREGROUND: 1\n};\nvar Constants = {\n  DisplayLocation: DisplayLocation\n};\n\nexport { DisplayLocation, Constants as default };\n", "import { mat4 } from 'gl-matrix';\nimport { newInstance as newInstance$1, setGet, obj, vtkErrorMacro as vtkErrorMacro$1 } from '../../macros.js';\nimport vtkHelper from './Helper.js';\nimport vtkMapper2D from '../Core/Mapper2D.js';\nimport vtkPoints from '../../Common/Core/Points.js';\nimport { v as vtkPolyData2DFS } from './glsl/vtkPolyData2DFS.glsl.js';\nimport { v as vtkPolyData2DVS } from './glsl/vtkPolyData2DVS.glsl.js';\nimport vtkReplacementShaderMapper from './ReplacementShaderMapper.js';\nimport vtkShaderProgram from './ShaderProgram.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { L as round } from '../../Common/Core/Math/index.js';\nimport { DisplayLocation } from '../Core/Property2D/Constants.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// import { mat3, mat4, vec3 } from 'gl-matrix';\nvar primTypes = vtkHelper.primTypes;\nvar ScalarMode = vtkMapper2D.ScalarMode;\nvar vtkErrorMacro = vtkErrorMacro$1;\nvar StartEvent = {\n  type: 'StartEvent'\n};\nvar EndEvent = {\n  type: 'EndEvent'\n}; // ----------------------------------------------------------------------------\n// vtkOpenGLPolyDataMapper2D methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLPolyDataMapper2D(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLPolyDataMapper2D');\n\n  publicAPI.buildPass = function (prepass) {\n    if (prepass) {\n      model.openGLActor2D = publicAPI.getFirstAncestorOfType('vtkOpenGLActor2D');\n      model.openGLRenderer = model.openGLActor2D.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model._openGLRenderWindow = model.openGLRenderer.getParent();\n      model.openGLCamera = model.openGLRenderer.getViewNodeFor(model.openGLRenderer.getRenderable().getActiveCamera());\n    }\n  };\n\n  publicAPI.overlayPass = function (prepass) {\n    if (prepass) {\n      publicAPI.render();\n    }\n  };\n\n  publicAPI.getShaderTemplate = function (shaders, ren, actor) {\n    var openGLSpecProp = model.renderable.getViewSpecificProperties().OpenGL;\n    var vertexShaderCode = vtkPolyData2DVS;\n\n    if (openGLSpecProp) {\n      var vertexSpecProp = openGLSpecProp.VertexShaderCode;\n\n      if (vertexSpecProp !== undefined && vertexSpecProp !== '') {\n        vertexShaderCode = vertexSpecProp;\n      }\n    }\n\n    shaders.Vertex = vertexShaderCode;\n    var fragmentShaderCode = vtkPolyData2DFS;\n\n    if (openGLSpecProp) {\n      var fragmentSpecProp = openGLSpecProp.FragmentShaderCode;\n\n      if (fragmentSpecProp !== undefined && fragmentSpecProp !== '') {\n        fragmentShaderCode = fragmentSpecProp;\n      }\n    }\n\n    shaders.Fragment = fragmentShaderCode;\n    var geometryShaderCode = '';\n\n    if (openGLSpecProp) {\n      var geometrySpecProp = openGLSpecProp.GeometryShaderCode;\n\n      if (geometrySpecProp !== undefined) {\n        geometryShaderCode = geometrySpecProp;\n      }\n    }\n\n    shaders.Geometry = geometryShaderCode;\n  };\n\n  publicAPI.render = function () {\n    var ctx = model._openGLRenderWindow.getContext();\n\n    if (model.context !== ctx) {\n      model.context = ctx;\n\n      for (var i = primTypes.Start; i < primTypes.End; i++) {\n        model.primitives[i].setOpenGLRenderWindow(model._openGLRenderWindow);\n      }\n    }\n\n    var actor = model.openGLActor2D.getRenderable();\n    var ren = model.openGLRenderer.getRenderable();\n    publicAPI.renderPiece(ren, actor);\n  };\n\n  publicAPI.renderPiece = function (ren, actor) {\n    publicAPI.invokeEvent(StartEvent);\n\n    if (!model.renderable.getStatic()) {\n      model.renderable.update();\n    }\n\n    model.currentInput = model.renderable.getInputData();\n    publicAPI.invokeEvent(EndEvent);\n\n    if (!model.currentInput) {\n      vtkErrorMacro('No input!');\n      return;\n    } // if there are no points then we are done\n\n\n    if (!model.currentInput.getPoints || !model.currentInput.getPoints().getNumberOfValues()) {\n      return;\n    }\n\n    publicAPI.renderPieceStart(ren, actor);\n    publicAPI.renderPieceDraw(ren, actor);\n    publicAPI.renderPieceFinish(ren, actor);\n  };\n\n  publicAPI.renderPieceStart = function (ren, actor) {\n    model.primitiveIDOffset = 0;\n\n    if (model.openGLRenderer.getSelector()) {\n      switch (model.openGLRenderer.getSelector().getCurrentPass()) {\n        default:\n          model.openGLRenderer.getSelector().renderProp(actor);\n      }\n    } // make sure the BOs are up to date\n\n\n    publicAPI.updateBufferObjects(ren, actor); // Bind the OpenGL, this is shared between the different primitive/cell types.\n\n    model.lastBoundBO = null;\n  };\n\n  publicAPI.getNeedToRebuildShaders = function (cellBO, ren, actor) {\n    // has something changed that would require us to recreate the shader?\n    // candidates are\n    // property modified (representation interpolation and lighting)\n    // input modified\n    // light complexity changed\n    if (cellBO.getShaderSourceTime().getMTime() < model.renderable.getMTime() || cellBO.getShaderSourceTime().getMTime() < model.currentInput.getMTime()) {\n      return true;\n    }\n\n    return false;\n  };\n\n  publicAPI.updateBufferObjects = function (ren, actor) {\n    // Rebuild buffers if needed\n    if (publicAPI.getNeedToRebuildBufferObjects(ren, actor)) {\n      publicAPI.buildBufferObjects(ren, actor);\n    }\n  };\n\n  publicAPI.getNeedToRebuildBufferObjects = function (ren, actor) {\n    // first do a coarse check\n    // Note that the actor's mtime includes it's properties mtime\n    var vmtime = model.VBOBuildTime.getMTime();\n\n    if (vmtime < publicAPI.getMTime() || vmtime < model._openGLRenderWindow.getMTime() || vmtime < model.renderable.getMTime() || vmtime < actor.getMTime() || vmtime < model.currentInput.getMTime() || model.renderable.getTransformCoordinate() && vmtime < ren.getMTime()) {\n      return true;\n    }\n\n    return false;\n  };\n\n  publicAPI.buildBufferObjects = function (ren, actor) {\n    var poly = model.currentInput;\n\n    if (poly === null) {\n      return;\n    }\n\n    model.renderable.mapScalars(poly, actor.getProperty().getOpacity());\n    var c = model.renderable.getColorMapColors();\n    model.haveCellScalars = false;\n    var scalarMode = model.renderable.getScalarMode();\n\n    if (model.renderable.getScalarVisibility()) {\n      // We must figure out how the scalars should be mapped to the polydata.\n      if ((scalarMode === ScalarMode.USE_CELL_DATA || scalarMode === ScalarMode.USE_CELL_FIELD_DATA || scalarMode === ScalarMode.USE_FIELD_DATA || !poly.getPointData().getScalars()) && scalarMode !== ScalarMode.USE_POINT_FIELD_DATA && c) {\n        model.haveCellScalars = true;\n      }\n    }\n\n    var representation = actor.getProperty().getRepresentation();\n    var tcoords = poly.getPointData().getTCoords();\n\n    if (!model.openGLActor2D.getActiveTextures()) {\n      tcoords = null;\n    }\n\n    var transformCoordinate = model.renderable.getTransformCoordinate();\n    var view = ren.getRenderWindow().getViews()[0];\n    var vsize = view.getViewportSize(ren);\n    var toString = \"\".concat(poly.getMTime(), \"A\").concat(representation, \"B\").concat(poly.getMTime()) + \"C\".concat(c ? c.getMTime() : 1) + \"D\".concat(tcoords ? tcoords.getMTime() : 1) + \"E\".concat(transformCoordinate ? ren.getMTime() : 1) + \"F\".concat(vsize);\n\n    if (model.VBOBuildString !== toString) {\n      // Build the VBOs\n      var points = poly.getPoints();\n\n      if (transformCoordinate) {\n        var p = vtkPoints.newInstance();\n        var numPts = points.getNumberOfPoints();\n        p.setNumberOfPoints(numPts);\n\n        for (var i = 0; i < numPts; ++i) {\n          transformCoordinate.setValue(points.getPoint(i));\n          var v = transformCoordinate.getComputedDoubleViewportValue(ren);\n          p.setPoint(i, v[0], v[1], 0.0);\n        }\n\n        points = p;\n      }\n\n      var options = {\n        points: points,\n        tcoords: tcoords,\n        colors: c,\n        cellOffset: 0,\n        haveCellScalars: model.haveCellSCalars,\n        customAttributes: model.renderable.getCustomShaderAttributes().map(function (arrayName) {\n          return poly.getPointData().getArrayByName(arrayName);\n        })\n      };\n      options.cellOffset += model.primitives[primTypes.Points].getCABO().createVBO(poly.getVerts(), 'verts', representation, options);\n      options.cellOffset += model.primitives[primTypes.Lines].getCABO().createVBO(poly.getLines(), 'lines', representation, options);\n      options.cellOffset += model.primitives[primTypes.Tris].getCABO().createVBO(poly.getPolys(), 'polys', representation, options);\n      options.cellOffset += model.primitives[primTypes.TriStrips].getCABO().createVBO(poly.getStrips(), 'strips', representation, options);\n      model.VBOBuildTime.modified();\n      model.VBOBuildString = toString;\n    }\n  };\n\n  publicAPI.renderPieceDraw = function (ren, actor) {\n    var representation = actor.getProperty().getRepresentation();\n    var gl = model.context;\n    gl.depthMask(true); // for every primitive type\n\n    for (var i = primTypes.Start; i < primTypes.End; i++) {\n      // if there are entries\n      var cabo = model.primitives[i].getCABO();\n\n      if (cabo.getElementCount()) {\n        model.lastBoundBO = model.primitives[i];\n        model.primitiveIDOffset += model.primitives[i].drawArrays(ren, actor, representation, publicAPI);\n      }\n    }\n  };\n\n  publicAPI.renderPieceFinish = function (ren, actor) {\n    if (model.lastBoundBO) {\n      model.lastBoundBO.getVAO().release();\n    }\n  };\n\n  publicAPI.buildShaders = function (shaders, ren, actor) {\n    publicAPI.getShaderTemplate(shaders, ren, actor); // user specified pre replacements\n\n    var openGLSpec = model.renderable.getViewSpecificProperties().OpenGL;\n    var shaderReplacements = null;\n\n    if (openGLSpec) {\n      shaderReplacements = openGLSpec.ShaderReplacements;\n    }\n\n    if (shaderReplacements) {\n      for (var i = 0; i < shaderReplacements.length; i++) {\n        var currReplacement = shaderReplacements[i];\n\n        if (currReplacement.replaceFirst) {\n          var shaderType = currReplacement.shaderType;\n          var ssrc = shaders[shaderType];\n          var substituteRes = vtkShaderProgram.substitute(ssrc, currReplacement.originalValue, currReplacement.replacementValue, currReplacement.replaceAll);\n          shaders[shaderType] = substituteRes.result;\n        }\n      }\n    }\n\n    publicAPI.replaceShaderValues(shaders, ren, actor); // user specified post replacements\n\n    if (shaderReplacements) {\n      for (var _i = 0; _i < shaderReplacements.length; _i++) {\n        var _currReplacement = shaderReplacements[_i];\n\n        if (!_currReplacement.replaceFirst) {\n          var _shaderType = _currReplacement.shaderType;\n          var _ssrc = shaders[_shaderType];\n\n          var _substituteRes = vtkShaderProgram.substitute(_ssrc, _currReplacement.originalValue, _currReplacement.replacementValue, _currReplacement.replaceAll);\n\n          shaders[_shaderType] = _substituteRes.result;\n        }\n      }\n    }\n  };\n\n  publicAPI.replaceShaderValues = function (shaders, ren, actor) {\n    publicAPI.replaceShaderColor(shaders, ren, actor);\n    publicAPI.replaceShaderTCoord(shaders, ren, actor);\n    publicAPI.replaceShaderPicking(shaders, ren, actor);\n    publicAPI.replaceShaderPositionVC(shaders, ren, actor);\n  };\n\n  publicAPI.replaceShaderColor = function (shaders, ren, actor) {\n    var VSSource = shaders.Vertex;\n    var GSSource = shaders.Geometry;\n    var FSSource = shaders.Fragment;\n\n    if (model.haveCellScalars) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Dec', ['uniform samplerBuffer texture1;']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Impl', ['gl_FragData[0] = texelFetchBuffer(texture1, gl_PrimitiveID + PrimitiveIDOffset);']).result;\n    }\n\n    if (model.lastBoundBO.getCABO().getColorComponents() !== 0) {\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Color::Dec', ['in vec4 diffuseColor;', 'out vec4 fcolorVSOutput;']).result;\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Color::Impl', ['fcolorVSOutput = diffuseColor;']).result;\n      GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::Color::Dec', ['in vec4 fcolorVSOutput[];\\n', 'out vec4 fcolorGSOutput;']).result;\n      GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::Color::Impl', ['fcolorGSOutput = fcolorVSOutput[i];']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Dec', ['in vec4 fcolorVSOutput;']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Impl', ['gl_FragData[0] = fcolorVSOutput;']).result;\n    } else {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Dec', ['uniform vec4 diffuseColor;']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Impl', ['gl_FragData[0] = diffuseColor;']).result;\n    }\n\n    shaders.Vertex = VSSource;\n    shaders.Geometry = GSSource;\n    shaders.Fragment = FSSource;\n  };\n\n  publicAPI.replaceShaderTCoord = function (shaders, ren, actor) {\n    if (model.lastBoundBO.getCABO().getTCoordOffset()) {\n      var VSSource = shaders.Vertex;\n      var GSSource = shaders.Geometry;\n      var FSSource = shaders.Fragment;\n      var tcdim = model.lastBoundBO.getCABO().getTCoordComponents();\n\n      if (tcdim === 1) {\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Dec', ['in float tcoordMC;', 'out float tcoordVCVSOutput;']).result;\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Impl', ['tcoordVCVSOutput = tcoordMC;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::TCoord::Dec', ['in float tcoordVCVSOutput[];\\n', 'out float tcoordVCGSOutput;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, ['//VTK::TCoord::Impl', 'tcoordVCGSOutput = tcoordVCVSOutput[i];']).result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Dec', ['in float tcoordVCVSOutput;', 'uniform sampler2D texture1;']).result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', ['gl_FragData[0] = gl_FragData[0]*texture2D(texture1, vec2(tcoordVCVSOutput,0));']).result;\n      } else if (tcdim === 2) {\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Dec', ['in vec2 tcoordMC;', 'out vec2 tcoordVCVSOutput;']).result;\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Impl', ['tcoordVCVSOutput = tcoordMC;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::TCoord::Dec', ['in vec2 tcoordVCVSOutput[];\\n', 'out vec2 tcoordVCGSOutput;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::TCoord::Impl', ['tcoordVCGSOutput = tcoordVCVSOutput[i];']).result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Dec', ['in vec2 tcoordVCVSOutput;', 'uniform sampler2D texture1;']).result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', ['gl_FragData[0] = gl_FragData[0]*texture2D(texture1, tcoordVCVSOutput.st);']).result;\n      }\n\n      if (model.haveCellScalars) {\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::PrimID::Impl', ['gl_PrimitiveID = gl_PrimitiveIDIn;']).result;\n      }\n\n      shaders.Vertex = VSSource;\n      shaders.Geometry = GSSource;\n      shaders.Fragment = FSSource;\n    }\n  };\n\n  publicAPI.replaceShaderPicking = function (shaders, ren, actor) {\n    var FSSource = shaders.Fragment;\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Dec', ['uniform vec3 mapperIndex;', 'uniform int picking;']).result;\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Impl', '  gl_FragData[0] = picking != 0 ? vec4(mapperIndex,1.0) : gl_FragData[0];').result;\n    shaders.Fragment = FSSource;\n  };\n\n  publicAPI.replaceShaderPositionVC = function (shaders, ren, actor) {\n    // replace common shader code\n    model.lastBoundBO.replaceShaderPositionVC(shaders, ren, actor);\n  };\n\n  publicAPI.invokeShaderCallbacks = function (cellBO, ren, actor) {\n    var listCallbacks = model.renderable.getViewSpecificProperties().ShadersCallbacks;\n\n    if (listCallbacks) {\n      listCallbacks.forEach(function (object) {\n        object.callback(object.userData, cellBO, ren, actor);\n      });\n    }\n  };\n\n  publicAPI.setMapperShaderParameters = function (cellBO, ren, actor) {\n    // Now to update the VAO too, if necessary.\n    if (cellBO.getProgram().isUniformUsed('PrimitiveIDOffset')) {\n      cellBO.getProgram().setUniformi('PrimitiveIDOffset', model.primitiveIDOffset);\n    }\n\n    if (cellBO.getProgram().isAttributeUsed('vertexWC')) {\n      if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'vertexWC', cellBO.getCABO().getVertexOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, 3, false)) {\n        vtkErrorMacro('Error setting vertexWC in shader VAO.');\n      }\n    }\n\n    if (cellBO.getCABO().getElementCount() && (model.VBOBuildTime.getMTime() > cellBO.getAttributeUpdateTime().getMTime() || cellBO.getShaderSourceTime().getMTime() > cellBO.getAttributeUpdateTime().getMTime())) {\n      model.renderable.getCustomShaderAttributes().forEach(function (attrName, idx) {\n        if (cellBO.getProgram().isAttributeUsed(\"\".concat(attrName, \"MC\"))) {\n          if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), \"\".concat(attrName, \"MC\"), cellBO.getCABO().getCustomData()[idx].offset, cellBO.getCABO().getStride(), model.context.FLOAT, cellBO.getCABO().getCustomData()[idx].components, false)) {\n            vtkErrorMacro(\"Error setting \".concat(attrName, \"MC in shader VAO.\"));\n          }\n        }\n      });\n\n      if (cellBO.getProgram().isAttributeUsed('tcoordMC') && cellBO.getCABO().getTCoordOffset()) {\n        if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'tcoordMC', cellBO.getCABO().getTCoordOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, cellBO.getCABO().getTCoordComponents(), false)) {\n          vtkErrorMacro('Error setting tcoordMC in shader VAO.');\n        }\n      } else {\n        cellBO.getVAO().removeAttributeArray('tcoordMC');\n      }\n\n      if (model.internalColorTexture && cellBO.getProgram().isUniformUsed('texture1')) {\n        cellBO.getProgram().setUniformi('texture1', model.internalColorTexture.getTextureUnit());\n      }\n\n      var tus = model.openGLActor2D.getActiveTextures();\n\n      if (tus) {\n        for (var index = 0; index < tus.length; ++index) {\n          var tex = tus[index];\n          var texUnit = tex.getTextureUnit();\n          var tname = \"texture\".concat(texUnit + 1);\n\n          if (cellBO.getProgram().isUniformUsed(tname)) {\n            cellBO.getProgram().setUniformi(tname, texUnit);\n          }\n        }\n      } // handle wide lines\n\n\n      cellBO.setMapperShaderParameters(ren, actor, model.openGLRenderer.getTiledSizeAndOrigin());\n      var selector = model.openGLRenderer.getSelector();\n      cellBO.getProgram().setUniform3fArray('mapperIndex', selector ? selector.getPropColorValue() : [0.0, 0.0, 0.0]);\n      cellBO.getProgram().setUniformi('picking', selector ? selector.getCurrentPass() + 1 : 0);\n    }\n  };\n\n  publicAPI.setPropertyShaderParameters = function (cellBO, ren, actor) {\n    var c = model.renderable.getColorMapColors();\n\n    if (!c || c.getNumberOfComponents() === 0) {\n      var program = cellBO.getProgram();\n      var ppty = actor.getProperty();\n      var opacity = ppty.getOpacity();\n      var dColor = ppty.getColor();\n      var diffuseColor = [dColor[0], dColor[1], dColor[2], opacity];\n      program.setUniform4f('diffuseColor', diffuseColor);\n    }\n  };\n\n  publicAPI.setLightingShaderParameters = function (cellBO, ren, actor) {// no-op\n  };\n\n  function safeMatrixMultiply(matrixArray, matrixType, tmpMat) {\n    matrixType.identity(tmpMat);\n    return matrixArray.reduce(function (res, matrix, index) {\n      if (index === 0) {\n        return matrix ? matrixType.copy(res, matrix) : matrixType.identity(res);\n      }\n\n      return matrix ? matrixType.multiply(res, res, matrix) : res;\n    }, tmpMat);\n  }\n\n  publicAPI.setCameraShaderParameters = function (cellBO, ren, actor) {\n    var program = cellBO.getProgram();\n    var shiftScaleEnabled = cellBO.getCABO().getCoordShiftAndScaleEnabled();\n    var inverseShiftScaleMatrix = shiftScaleEnabled ? cellBO.getCABO().getInverseShiftAndScaleMatrix() : null; // Get the position of the actor\n\n    var view = ren.getRenderWindow().getViews()[0];\n    var size = view.getViewportSize(ren);\n    var vport = ren.getViewport();\n    var actorPos = actor.getActualPositionCoordinate().getComputedDoubleViewportValue(ren); // Get the window info\n    // Assume tile viewport is 0 1 based on vtkOpenGLRenderer\n\n    var tileViewport = [0.0, 0.0, 1.0, 1.0];\n    var visVP = [0.0, 0.0, 1.0, 1.0];\n    visVP[0] = vport[0] >= tileViewport[0] ? vport[0] : tileViewport[0];\n    visVP[1] = vport[1] >= tileViewport[1] ? vport[1] : tileViewport[1];\n    visVP[2] = vport[2] <= tileViewport[2] ? vport[2] : tileViewport[2];\n    visVP[3] = vport[3] <= tileViewport[3] ? vport[3] : tileViewport[3];\n\n    if (visVP[0] >= visVP[2]) {\n      return;\n    }\n\n    if (visVP[1] >= visVP[3]) {\n      return;\n    }\n\n    size[0] = round(size[0] * (visVP[2] - visVP[0]) / (vport[2] - vport[0]));\n    size[1] = round(size[1] * (visVP[3] - visVP[1]) / (vport[3] - vport[1]));\n    var winSize = model.openGLRenderer.getParent().getSize();\n    var xoff = round(actorPos[0] - (visVP[0] - vport[0]) * winSize[0]);\n    var yoff = round(actorPos[1] - (visVP[1] - vport[1]) * winSize[1]); // set ortho projection\n\n    var left = -xoff;\n    var right = -xoff + size[0];\n    var bottom = -yoff;\n    var top = -yoff + size[1]; // it's an error to call glOrtho with\n    // either left==right or top==bottom\n\n    if (left === right) {\n      right = left + 1.0;\n    }\n\n    if (bottom === top) {\n      top = bottom + 1.0;\n    } // compute the combined ModelView matrix and send it down to save time in the shader\n\n\n    var tmpMat4 = mat4.identity(new Float64Array(16));\n    tmpMat4[0] = 2.0 / (right - left);\n    tmpMat4[1 * 4 + 1] = 2.0 / (top - bottom);\n    tmpMat4[0 * 4 + 3] = -1.0 * (right + left) / (right - left);\n    tmpMat4[1 * 4 + 3] = -1.0 * (top + bottom) / (top - bottom);\n    tmpMat4[2 * 4 + 2] = 0.0;\n    tmpMat4[2 * 4 + 3] = actor.getProperty().getDisplayLocation() === DisplayLocation.FOREGROUND ? -1.0 : 1.0;\n    tmpMat4[3 * 4 + 3] = 1.0;\n    mat4.transpose(tmpMat4, tmpMat4);\n    program.setUniformMatrix('WCVCMatrix', safeMatrixMultiply([tmpMat4, inverseShiftScaleMatrix], mat4, model.tmpMat4));\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  context: null,\n  VBOBuildTime: 0,\n  VBOBuildString: null,\n  primitives: null,\n  primTypes: null,\n  shaderRebuildString: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  vtkReplacementShaderMapper.implementReplaceShaderCoincidentOffset(publicAPI, model, initialValues);\n  model.primitives = [];\n  model.primTypes = primTypes;\n  model.tmpMat4 = mat4.identity(new Float64Array(16));\n\n  for (var i = primTypes.Start; i < primTypes.End; i++) {\n    model.primitives[i] = vtkHelper.newInstance();\n    model.primitives[i].setPrimitiveType(i);\n    model.primitives[i].set({\n      lastLightComplexity: 0,\n      lastLightCount: 0,\n      lastSelectionPass: false\n    }, true);\n  } // Build VTK API\n\n\n  setGet(publicAPI, model, ['context']);\n  model.VBOBuildTime = {};\n  obj(model.VBOBuildTime, {\n    mtime: 0\n  }); // Object methods\n\n  vtkOpenGLPolyDataMapper2D(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkOpenGLPolyDataMapper2D'); // ----------------------------------------------------------------------------\n\nvar vtkPolyDataMapper2D = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to OpenGL backend if imported\n\nregisterOverride('vtkMapper2D', newInstance);\n\nexport { vtkPolyDataMapper2D as default, extend, newInstance };\n", "import { newInstance as newInstance$1 } from '../../macros.js';\nimport vtkScalarBarActor from '../Core/ScalarBarActor.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// vtkOpenGLScalarBarActor methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLScalarBarActor(publicAPI, model) {\n  model.classHierarchy.push('vtkOpenGLScalarBarActor'); // Builds myself.\n\n  publicAPI.buildPass = function (prepass) {\n    if (prepass) {\n      model.openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model._openGLRenderWindow = model.openGLRenderer.getParent();\n\n      if (!model.scalarBarActorHelper.getRenderable()) {\n        model.scalarBarActorHelper.setRenderable(model.renderable);\n      }\n\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.scalarBarActorHelper.getBarActor());\n      publicAPI.addMissingNode(model.scalarBarActorHelper.getTmActor());\n      publicAPI.removeUnusedNodes();\n    }\n  };\n\n  publicAPI.opaquePass = function (prepass, renderPass) {\n    if (prepass) {\n      var camera = model.openGLRenderer ? model.openGLRenderer.getRenderable().getActiveCamera() : null;\n      var tsize = model.openGLRenderer.getTiledSizeAndOrigin();\n      model.scalarBarActorHelper.updateAPISpecificData([tsize.usize, tsize.vsize], camera, model._openGLRenderWindow.getRenderable());\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.scalarBarActorHelper = vtkScalarBarActor.newScalarBarActorHelper(); // Object methods\n\n  vtkOpenGLScalarBarActor(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkOpenGLScalarBarActor'); // ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to OpenGL backend if imported\n\nregisterOverride('vtkScalarBarActor', newInstance);\n\nexport { index as default, extend, newInstance };\n", "import { mat3, mat4 } from 'gl-matrix';\nimport { newInstance as newInstance$1, obj, setGet, get, vtkErrorMacro as vtkErrorMacro$1 } from '../../macros.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkHelper from './Helper.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport vtkOpenGLTexture from './Texture.js';\nimport { Representation } from '../Core/Property/Constants.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\nvar vtkErrorMacro = vtkErrorMacro$1; // ----------------------------------------------------------------------------\n// vtkOpenGLSkybox methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLSkybox(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLSkybox'); // Builds myself.\n\n  publicAPI.buildPass = function (prepass) {\n    if (prepass) {\n      model.openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model._openGLRenderWindow = model.openGLRenderer.getParent();\n      model.context = model._openGLRenderWindow.getContext();\n      model.tris.setOpenGLRenderWindow(model._openGLRenderWindow);\n      model.openGLTexture.setOpenGLRenderWindow(model._openGLRenderWindow);\n      var ren = model.openGLRenderer.getRenderable();\n      model.openGLCamera = model.openGLRenderer.getViewNodeFor(ren.getActiveCamera());\n    }\n  };\n\n  publicAPI.queryPass = function (prepass, renderPass) {\n    if (prepass) {\n      if (!model.renderable || !model.renderable.getVisibility()) {\n        return;\n      }\n\n      renderPass.incrementOpaqueActorCount();\n    }\n  };\n\n  publicAPI.opaquePass = function (prepass, renderPass) {\n    if (prepass && !model.openGLRenderer.getSelector()) {\n      publicAPI.updateBufferObjects();\n      model.context.depthMask(true);\n\n      model._openGLRenderWindow.getShaderCache().readyShaderProgram(model.tris.getProgram());\n\n      model.openGLTexture.render(model._openGLRenderWindow);\n      var texUnit = model.openGLTexture.getTextureUnit();\n      model.tris.getProgram().setUniformi('sbtexture', texUnit);\n      var ren = model.openGLRenderer.getRenderable();\n      var keyMats = model.openGLCamera.getKeyMatrices(ren);\n      var imat = new Float64Array(16);\n      mat4.invert(imat, keyMats.wcpc);\n      model.tris.getProgram().setUniformMatrix('IMCPCMatrix', imat);\n\n      if (model.lastFormat === 'box') {\n        var camPos = ren.getActiveCamera().getPosition();\n        model.tris.getProgram().setUniform3f('camPos', camPos[0], camPos[1], camPos[2]);\n      }\n\n      model.tris.getVAO().bind(); // draw polygons\n\n      model.context.drawArrays(model.context.TRIANGLES, 0, model.tris.getCABO().getElementCount());\n      model.tris.getVAO().release();\n      model.openGLTexture.deactivate();\n    }\n  };\n\n  publicAPI.updateBufferObjects = function () {\n    // build the VBO if needed, only happens once\n    if (!model.tris.getCABO().getElementCount()) {\n      var ptsArray = new Float32Array(12);\n\n      for (var i = 0; i < 4; i++) {\n        ptsArray[i * 3] = i % 2 * 2 - 1.0;\n        ptsArray[i * 3 + 1] = i > 1 ? 1.0 : -1.0;\n        ptsArray[i * 3 + 2] = 1.0;\n      }\n\n      var points = vtkDataArray.newInstance({\n        numberOfComponents: 3,\n        values: ptsArray\n      });\n      points.setName('points');\n      var cellArray = new Uint16Array(8);\n      cellArray[0] = 3;\n      cellArray[1] = 0;\n      cellArray[2] = 1;\n      cellArray[3] = 3;\n      cellArray[4] = 3;\n      cellArray[5] = 0;\n      cellArray[6] = 3;\n      cellArray[7] = 2;\n      var cells = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: cellArray\n      });\n      model.tris.getCABO().createVBO(cells, 'polys', Representation.SURFACE, {\n        points: points,\n        cellOffset: 0\n      });\n    } // update the program?\n\n\n    if (model.renderable.getFormat() !== model.lastFormat) {\n      model.lastFormat = model.renderable.getFormat();\n\n      if (model.lastFormat === 'box') {\n        // we invert Y below because opengl is messed up!\n        // Cube Maps have been specified to follow the RenderMan\n        // specification (for whatever reason), and RenderMan\n        // assumes the images' origin being in the upper left,\n        // contrary to the usual OpenGL behaviour of having the\n        // image origin in the lower left. That's why things get\n        // swapped in the Y direction. It totally breaks with the usual\n        // OpenGL semantics and doesn't make sense at all.\n        // But now we're stuck with it.  From\n        // https://stackoverflow.com/questions/11685608/convention-of-faces-in-opengl-cubemapping\n        //\n        model.tris.setProgram(model._openGLRenderWindow.getShaderCache().readyShaderProgramArray(\"//VTK::System::Dec\\n             attribute vec3 vertexMC;\\n             uniform mat4 IMCPCMatrix;\\n             varying vec3 TexCoords;\\n             void main () {\\n              gl_Position = vec4(vertexMC.xyz, 1.0);\\n              vec4 wpos = IMCPCMatrix * gl_Position;\\n              TexCoords = wpos.xyz/wpos.w;\\n             }\", \"//VTK::System::Dec\\n             //VTK::Output::Dec\\n             varying vec3 TexCoords;\\n             uniform samplerCube sbtexture;\\n             uniform vec3 camPos;\\n             void main () {\\n               // skybox looks from inside out\\n               // which means we have to adjust\\n               // our tcoords. Otherwise text would\\n               // be flipped\\n               vec3 tc = normalize(TexCoords - camPos);\\n               if (abs(tc.z) < max(abs(tc.x),abs(tc.y)))\\n               {\\n                 tc = vec3(1.0, 1.0, -1.0) * tc;\\n               }\\n               else\\n               {\\n                 tc = vec3(-1.0, 1.0, 1.0) * tc;\\n               }\\n               gl_FragData[0] = textureCube(sbtexture, tc);\\n             }\", ''));\n      }\n\n      if (model.lastFormat === 'background') {\n        // maps the texture to the window\n        model.tris.setProgram(model._openGLRenderWindow.getShaderCache().readyShaderProgramArray(\"//VTK::System::Dec\\n             attribute vec3 vertexMC;\\n             uniform mat4 IMCPCMatrix;\\n             varying vec2 TexCoords;\\n             void main () {\\n              gl_Position = vec4(vertexMC.xyz, 1.0);\\n              vec4 wpos = IMCPCMatrix * gl_Position;\\n              TexCoords = vec2(vertexMC.x, vertexMC.y)*0.5 + 0.5;\\n             }\", \"//VTK::System::Dec\\n             //VTK::Output::Dec\\n             varying vec2 TexCoords;\\n             uniform sampler2D sbtexture;\\n             void main () {\\n               gl_FragData[0] = texture2D(sbtexture, TexCoords);\\n             }\", ''));\n      }\n\n      model.tris.getShaderSourceTime().modified();\n      model.tris.getVAO().bind();\n\n      if (!model.tris.getVAO().addAttributeArray(model.tris.getProgram(), model.tris.getCABO(), 'vertexMC', model.tris.getCABO().getVertexOffset(), model.tris.getCABO().getStride(), model.context.FLOAT, 3, model.context.FALSE)) {\n        vtkErrorMacro('Error setting vertexMC in shader VAO.');\n      }\n    } // set/update the texture map if needed\n\n\n    var tmaps = model.renderable.getTextures();\n\n    if (!tmaps.length) {\n      vtkErrorMacro('vtkSkybox requires a texture map');\n    }\n\n    if (model.openGLTexture.getRenderable() !== tmaps[0]) {\n      model.openGLTexture.releaseGraphicsResources(model._openGLRenderWindow);\n      model.openGLTexture.setRenderable(tmaps[0]);\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  context: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.openGLTexture = vtkOpenGLTexture.newInstance();\n  model.tris = vtkHelper.newInstance();\n  model.keyMatrixTime = {};\n  obj(model.keyMatrixTime, {\n    mtime: 0\n  });\n  model.keyMatrices = {\n    normalMatrix: mat3.identity(new Float64Array(9)),\n    mcwc: mat4.identity(new Float64Array(16))\n  }; // Build VTK API\n\n  setGet(publicAPI, model, ['context']);\n  get(publicAPI, model, ['activeTextures']); // Object methods\n\n  vtkOpenGLSkybox(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend); // ----------------------------------------------------------------------------\n\nvar vtkSkybox = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to OpenGL backend if imported\n\nregisterOverride('vtkSkybox', newInstance);\n\nexport { vtkSkybox as default, extend, newInstance };\n", "import { mat4 } from 'gl-matrix';\nimport macro from '../../macros.js';\nimport vtkProp from '../Core/Prop.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\nvar CoordinateSystem = vtkProp.CoordinateSystem; // ----------------------------------------------------------------------------\n// vtkWebGPUActor methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUActor(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUActor'); // Builds myself.\n\n  publicAPI.buildPass = function (prepass) {\n    if (prepass) {\n      model.WebGPURenderer = publicAPI.getFirstAncestorOfType('vtkWebGPURenderer');\n      model.WebGPURenderWindow = model.WebGPURenderer.getFirstAncestorOfType('vtkWebGPURenderWindow');\n\n      if (model.propID === undefined) {\n        model.propID = model.WebGPURenderWindow.getUniquePropID();\n      }\n\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.renderable.getMapper());\n      publicAPI.removeUnusedNodes();\n    }\n  }; // we draw textures, then mapper, then post pass textures\n\n\n  publicAPI.traverseOpaquePass = function (renderPass) {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || !model.renderable.getIsOpaque() || model.WebGPURenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n\n    publicAPI.apply(renderPass, true);\n\n    if (model.children[0]) {\n      model.children[0].traverse(renderPass);\n    }\n\n    publicAPI.apply(renderPass, false);\n  }; // we draw textures, then mapper, then post pass textures\n\n\n  publicAPI.traverseTranslucentPass = function (renderPass) {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || model.renderable.getIsOpaque() || model.WebGPURenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n\n    publicAPI.apply(renderPass, true);\n\n    if (model.children[0]) {\n      model.children[0].traverse(renderPass);\n    }\n\n    publicAPI.apply(renderPass, false);\n  };\n\n  publicAPI.queryPass = function (prepass, renderPass) {\n    if (prepass) {\n      if (!model.renderable || !model.renderable.getVisibility()) {\n        return;\n      }\n\n      if (model.renderable.getIsOpaque()) {\n        renderPass.incrementOpaqueActorCount();\n      } else {\n        renderPass.incrementTranslucentActorCount();\n      }\n    }\n  };\n\n  publicAPI.getBufferShift = function (wgpuRen) {\n    publicAPI.getKeyMatrices(wgpuRen);\n    return model.bufferShift;\n  };\n\n  publicAPI.getKeyMatrices = function (wgpuRen) {\n    // has the actor or stabilization center changed?\n    if (Math.max(model.renderable.getMTime(), wgpuRen.getStabilizedTime()) > model.keyMatricesTime.getMTime()) {\n      model.renderable.computeMatrix();\n      var mcwc = model.renderable.getMatrix(); // compute the net shift, only apply stabilized coords with world coordinates\n\n      model.bufferShift[0] = mcwc[3];\n      model.bufferShift[1] = mcwc[7];\n      model.bufferShift[2] = mcwc[11];\n      var center = wgpuRen.getStabilizedCenterByReference();\n\n      if (model.renderable.getCoordinateSystem() === CoordinateSystem.WORLD) {\n        model.bufferShift[0] -= center[0];\n        model.bufferShift[1] -= center[1];\n        model.bufferShift[2] -= center[2];\n      }\n\n      mat4.transpose(model.keyMatrices.bcwc, mcwc);\n\n      if (model.renderable.getIsIdentity()) {\n        mat4.identity(model.keyMatrices.normalMatrix);\n      } else {\n        // we use bcwc BEFORE the translate below (just to get transposed mcvc)\n        mat4.copy(model.keyMatrices.normalMatrix, model.keyMatrices.bcwc); // zero out translation\n\n        model.keyMatrices.normalMatrix[3] = 0.0;\n        model.keyMatrices.normalMatrix[7] = 0.0;\n        model.keyMatrices.normalMatrix[11] = 0.0;\n        mat4.invert(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);\n        mat4.transpose(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);\n      } // only need the buffer shift to get to world\n\n\n      mat4.translate(model.keyMatrices.bcwc, model.keyMatrices.bcwc, [-model.bufferShift[0], -model.bufferShift[1], -model.bufferShift[2]]); // to get to stabilized we also need the center\n\n      if (model.renderable.getCoordinateSystem() === CoordinateSystem.WORLD) {\n        mat4.translate(model.keyMatrices.bcsc, model.keyMatrices.bcwc, [-center[0], -center[1], -center[2]]);\n      } else {\n        mat4.copy(model.keyMatrices.bcsc, model.keyMatrices.bcwc);\n      }\n\n      model.keyMatricesTime.modified();\n    }\n\n    return model.keyMatrices;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  keyMatricesTime: null,\n  keyMatrices: null,\n  propID: undefined,\n  bufferShift: undefined\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.keyMatricesTime = {};\n  macro.obj(model.keyMatricesTime, {\n    mtime: 0\n  });\n  model.keyMatrices = {\n    normalMatrix: new Float64Array(16),\n    bcwc: new Float64Array(16),\n    bcsc: new Float64Array(16)\n  };\n  macro.get(publicAPI, model, ['propID', 'keyMatricesTime']);\n  model.bufferShift = [0, 0, 0, 0]; // Object methods\n\n  vtkWebGPUActor(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend); // ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to WebGPU backend if imported\n\nregisterOverride('vtkActor', newInstance);\n\nexport { index as default, extend, newInstance };\n", "import { mat4 } from 'gl-matrix';\nimport macro from '../../macros.js';\nimport vtkProp from '../Core/Prop.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\nvar CoordinateSystem = vtkProp.CoordinateSystem; // ----------------------------------------------------------------------------\n// vtkWebGPUActor methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUActor2D(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUActor2D'); // Builds myself.\n\n  publicAPI.buildPass = function (prepass) {\n    if (prepass) {\n      model.WebGPURenderer = publicAPI.getFirstAncestorOfType('vtkWebGPURenderer');\n      model.WebGPURenderWindow = model.WebGPURenderer.getFirstAncestorOfType('vtkWebGPURenderWindow');\n\n      if (model.propID === undefined) {\n        model.propID = model.WebGPURenderWindow.getUniquePropID();\n      }\n\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.renderable.getMapper());\n      publicAPI.removeUnusedNodes();\n    }\n  }; // we draw textures, then mapper, then post pass textures\n\n\n  publicAPI.traverseOpaquePass = function (renderPass) {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || !model.renderable.getIsOpaque() || model.WebGPURenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n\n    publicAPI.apply(renderPass, true);\n\n    if (model.children[0]) {\n      model.children[0].traverse(renderPass);\n    }\n\n    publicAPI.apply(renderPass, false);\n  }; // we draw textures, then mapper, then post pass textures\n\n\n  publicAPI.traverseTranslucentPass = function (renderPass) {\n    if (!model.renderable || !model.renderable.getNestedVisibility() || model.renderable.getIsOpaque() || model.WebGPURenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n\n    publicAPI.apply(renderPass, true);\n\n    if (model.children[0]) {\n      model.children[0].traverse(renderPass);\n    }\n\n    publicAPI.apply(renderPass, false);\n  };\n\n  publicAPI.queryPass = function (prepass, renderPass) {\n    if (prepass) {\n      if (!model.renderable || !model.renderable.getVisibility()) {\n        return;\n      }\n\n      if (model.renderable.getIsOpaque()) {\n        renderPass.incrementOpaqueActorCount();\n      } else {\n        renderPass.incrementTranslucentActorCount();\n      }\n    }\n  };\n\n  publicAPI.getBufferShift = function (wgpuRen) {\n    publicAPI.getKeyMatrices(wgpuRen);\n    return model.bufferShift;\n  };\n\n  publicAPI.getKeyMatrices = function (wgpuRen) {\n    // has the actor or stabilization center changed?\n    if (Math.max(model.renderable.getMTime(), wgpuRen.getStabilizedTime()) > model.keyMatricesTime.getMTime()) {\n      // compute the net shift, only apply stabilized coords with world coordinates\n      model.bufferShift[0] = 0.0;\n      model.bufferShift[1] = 0.0;\n      model.bufferShift[2] = 0.0;\n      var center = wgpuRen.getStabilizedCenterByReference();\n\n      if (model.renderable.getCoordinateSystem() === CoordinateSystem.WORLD) {\n        model.bufferShift[0] -= center[0];\n        model.bufferShift[1] -= center[1];\n        model.bufferShift[2] -= center[2];\n      }\n\n      mat4.identity(model.keyMatrices.bcwc);\n      mat4.identity(model.keyMatrices.normalMatrix); // only meed the buffer shift to get to world\n\n      mat4.translate(model.keyMatrices.bcwc, model.keyMatrices.bcwc, [-model.bufferShift[0], -model.bufferShift[1], -model.bufferShift[2]]); // to get to stabilized we also need the center\n\n      if (model.renderable.getCoordinateSystem() === CoordinateSystem.WORLD) {\n        mat4.translate(model.keyMatrices.bcsc, model.keyMatrices.bcwc, [-center[0], -center[1], -center[2]]);\n      } else {\n        mat4.copy(model.keyMatrices.bcsc, model.keyMatrices.bcwc);\n      }\n\n      model.keyMatricesTime.modified();\n    }\n\n    return model.keyMatrices;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  keyMatricesTime: null,\n  keyMatrices: null,\n  propID: undefined,\n  bufferShift: undefined\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.keyMatricesTime = {};\n  macro.obj(model.keyMatricesTime, {\n    mtime: 0\n  });\n  model.keyMatrices = {\n    normalMatrix: new Float64Array(16),\n    bcwc: new Float64Array(16),\n    bcsc: new Float64Array(16)\n  };\n  macro.get(publicAPI, model, ['propID', 'keyMatricesTime']);\n  model.bufferShift = [0, 0, 0, 0]; // Object methods\n\n  vtkWebGPUActor2D(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend); // ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to WebGPU backend if imported\n\nregisterOverride('vtkActor2D', newInstance);\n\nexport { index as default, extend, newInstance };\n", "import { newInstance as newInstance$1 } from '../../macros.js';\nimport vtkCubeAxesActor from '../Core/CubeAxesActor.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// vtkWebGPUCubeAxesActor methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUCubeAxesActor(publicAPI, model) {\n  model.classHierarchy.push('vtkWebGPUCubeAxesActor'); // Builds myself.\n\n  publicAPI.buildPass = function (prepass) {\n    if (prepass) {\n      model.WebGPURenderer = publicAPI.getFirstAncestorOfType('vtkWebGPURenderer');\n      model.WebGPURenderWindow = model.WebGPURenderer.getParent();\n\n      if (!model.CubeAxesActorHelper.getRenderable()) {\n        model.CubeAxesActorHelper.setRenderable(model.renderable);\n      }\n\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.CubeAxesActorHelper.getTmActor());\n      publicAPI.addMissingNode(model.renderable.getGridActor());\n      publicAPI.removeUnusedNodes();\n    }\n  };\n\n  publicAPI.opaquePass = function (prepass, renderPass) {\n    if (prepass) {\n      var camera = model.WebGPURenderer ? model.WebGPURenderer.getRenderable().getActiveCamera() : null;\n      var tsize = model.WebGPURenderer.getTiledSizeAndOrigin();\n      model.CubeAxesActorHelper.updateAPISpecificData([tsize.usize, tsize.vsize], camera, model.WebGPURenderWindow.getRenderable());\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.CubeAxesActorHelper = vtkCubeAxesActor.newCubeAxesActorHelper(); // Object methods\n\n  vtkWebGPUCubeAxesActor(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkWebGPUCubeAxesActor'); // ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to WebGPU backend if imported\n\nregisterOverride('vtkCubeAxesActor', newInstance);\n\nexport { index as default, extend, newInstance };\n", "import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport macro from '../../macros.js';\nimport Constants from './Property2D/Constants.js';\nimport { Representation } from './Property/Constants.js';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar DisplayLocation = Constants.DisplayLocation; // ----------------------------------------------------------------------------\n// vtkProperty2D methods\n// ----------------------------------------------------------------------------\n\nfunction vtkProperty2D(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkProperty2D');\n\n  publicAPI.setDisplayLocationToBackground = function () {\n    return publicAPI.setDisplayLocation(DisplayLocation.BACKGROUND);\n  };\n\n  publicAPI.setDisplayLocationToForeground = function () {\n    return publicAPI.setDisplayLocation(DisplayLocation.FOREGROUND);\n  };\n\n  publicAPI.setRepresentationToWireframe = function () {\n    return publicAPI.setRepresentation(Representation.WIREFRAME);\n  };\n\n  publicAPI.setRepresentationToSurface = function () {\n    return publicAPI.setRepresentation(Representation.SURFACE);\n  };\n\n  publicAPI.setRepresentationToPoints = function () {\n    return publicAPI.setRepresentation(Representation.POINTS);\n  };\n\n  publicAPI.getRepresentationAsString = function () {\n    return macro.enumToString(Representation, model.representation);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  color: [1, 1, 1],\n  opacity: 1,\n  pointSize: 1,\n  lineWidth: 1,\n  representation: Representation.SURFACE,\n  displayLocation: DisplayLocation.FOREGROUND\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['opacity', 'lineWidth', 'pointSize', 'displayLocation', 'representation']);\n  macro.setGetArray(publicAPI, model, ['color'], 3); // Object methods\n\n  vtkProperty2D(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkProperty2D'); // ----------------------------------------------------------------------------\n\nvar vtkProperty2D$1 = _objectSpread({\n  newInstance: newInstance,\n  extend: extend\n}, Constants);\n\nexport { vtkProperty2D$1 as default, extend, newInstance };\n", "import { mat3, mat4 } from 'gl-matrix';\nimport { newInstance as newInstance$1, setGet } from '../../macros.js';\nimport vtkMapper from '../Core/Mapper.js';\nimport vtkProp from '../Core/Prop.js';\nimport vtkProperty from '../Core/Property.js';\nimport vtkProperty2D from '../Core/Property2D.js';\nimport vtkTexture from '../Core/Texture.js';\nimport vtkWebGPUBufferManager from './BufferManager.js';\nimport vtkWebGPUShaderCache from './ShaderCache.js';\nimport vtkWebGPUUniformBuffer from './UniformBuffer.js';\nimport vtkWebGPUSimpleMapper from './SimpleMapper.js';\nimport vtkWebGPUTypes from './Types.js';\n\nvar BufferUsage = vtkWebGPUBufferManager.BufferUsage,\n    PrimitiveTypes = vtkWebGPUBufferManager.PrimitiveTypes;\nvar Representation = vtkProperty.Representation;\nvar ScalarMode = vtkMapper.ScalarMode;\nvar CoordinateSystem = vtkProp.CoordinateSystem;\nvar DisplayLocation = vtkProperty2D.DisplayLocation;\nvar vtkWebGPUPolyDataVS = \"\\n//VTK::Renderer::Dec\\n\\n//VTK::Color::Dec\\n\\n//VTK::Normal::Dec\\n\\n//VTK::TCoord::Dec\\n\\n//VTK::Select::Dec\\n\\n//VTK::Mapper::Dec\\n\\n//VTK::IOStructs::Dec\\n\\n@vertex\\nfn main(\\n//VTK::IOStructs::Input\\n)\\n//VTK::IOStructs::Output\\n{\\n  var output : vertexOutput;\\n\\n  var vertex: vec4<f32> = vertexBC;\\n\\n  //VTK::Color::Impl\\n\\n  //VTK::Normal::Impl\\n\\n  //VTK::TCoord::Impl\\n\\n  //VTK::Select::Impl\\n\\n  //VTK::Position::Impl\\n\\n  return output;\\n}\\n\";\nvar vtkWebGPUPolyDataFS = \"\\nstruct PBRData {\\n  diffuse: vec3<f32>,\\n  specular: vec3<f32>,\\n}\\n\\n// Dot product with the max already in it\\nfn mdot(a: vec3<f32>, b: vec3<f32>) -> f32 {\\n  return max(0.0, dot(a, b));\\n}\\n// Dot product with a max in it that does not allow for negative values\\n// Physically based rendering is accurate as long as normals are accurate,\\n// however this is pretty often not the case. In order to prevent negative\\n// values from ruining light calculations and creating zones of zero light,\\n// this remapping is used, which smoothly clamps the dot product between\\n// zero and one while still maintaining a good amount of accuracy.\\nfn cdot(a: vec3<f32>, b: vec3<f32>) -> f32 {\\n  var d: f32 = max(0.0, dot(a, b));\\n  d = pow((d + 1) / 2.0, 2.6);\\n  return d;\\n}\\n\\n// Lambertian diffuse model\\nfn lambertDiffuse(base: vec3<f32>, N: vec3<f32>, L: vec3<f32>) -> vec3<f32> {\\n  var pi: f32 = 3.14159265359; \\n  var NdotL: f32 = mdot(N, L);\\n  NdotL = pow(NdotL, 1.5);\\n  return (base/pi)*NdotL;\\n}\\n\\n// Yasuhiro Fujii improvement on the Oren-Nayar model\\n// https://mimosa-pudica.net/improved-oren-nayar.html\\n// p is surface color, o is roughness\\nfn fujiiOrenNayar(p: vec3<f32>, o: f32, N: vec3<f32>, L: vec3<f32>, V: vec3<f32>) -> vec3<f32> {\\n  var invpi: f32 = 0.31830988618; // 1/pi\\n\\n  var o2 = o*o;\\n  var NdotL: f32 = mdot(N, L);\\n  NdotL = pow(NdotL, 1.5); // Less physically accurate, but hides the \\\"seams\\\" between lights better\\n\\n  var NdotV: f32 = mdot(N, V);\\n  var LdotV: f32 = mdot(L, V);\\n\\n  var s: f32 = LdotV - NdotL*NdotV;\\n  var t: f32 = mix(1, max(NdotL, NdotV), step(0, s)); // Mix with step is the equivalent of an if statement\\n  var A: vec3<f32> = 0.5*(o2 / (o2 + 0.33)) + 0.17*p*(o2 / (o2 + 0.13));\\n  A = invpi*(1 - A);\\n  var B: f32 = 0.45*(o2 / (o2 + 0.09));\\n  B = invpi*B;\\n\\n  return p*NdotL*(A + B*(s/t));\\n}\\n\\n// Fresnel portion of BRDF (IOR only, simplified)\\nfn schlickFresnelIOR(V: vec3<f32>, N: vec3<f32>, ior: f32, k: f32) -> f32 {\\n  var NdotV: f32 = mdot(V, N);\\n  var F0: f32 = (pow((ior - 1.0), 2) + k*k) / (pow((ior + 1.0), 2) + k*k); // This takes into account the roughness, which the other one does not\\n  return F0 + (1 - F0) * pow((1-NdotV), 5); \\n}\\n\\n// Fresnel portion of BRDF (Color ior, better)\\nfn schlickFresnelRGB(V: vec3<f32>, N: vec3<f32>, F0: vec3<f32>) -> vec3<f32> {\\n  var NdotV: f32 = mdot(V, N);\\n  return F0 + (1 - F0) * pow((1-NdotV), 5); \\n}\\n\\n// Normal portion of BRDF\\n// https://learnopengl.com/PBR/Theory\\n// Trowbridge-Reitz GGX functions: normal, halfway, roughness^2\\nfn trGGX(N: vec3<f32>, H: vec3<f32>, a: f32) -> f32 {\\n  var pi: f32 = 3.14159265359; \\n\\n  var a2: f32 = a*a;\\n  var NdotH = mdot(N, H);\\n  var NdotH2 = NdotH*NdotH;\\n  \\n  var denom: f32 = NdotH2 * (a2 - 1.0) + 1.0;\\n\\n  return a2 / max((pi*denom*denom), 0.000001);\\n}\\n\\n// A VERY bad approximation of anisotropy. Real anisotropic calculations require tangent and bitangent\\nfn anisotrophicTrGGX(N: vec3<f32>, H: vec3<f32>, O: vec3<f32>, s: f32, a: f32) -> f32 {\\n  var Op: vec3<f32> = (rendererUBO.WCVCNormals * vec4<f32>(normalize(O) * s, 0.)).xyz;\\n\\n  var ggx1: f32 = trGGX(N + Op*s, H, a);\\n  var ggx2: f32 = trGGX(N - Op*s, H, a);\\n  return (0.5 * ggx1 + 0.5 * ggx2);\\n}\\n\\n// Geometry portion of BRDF\\nfn schlickGGX(N: vec3<f32>, X: vec3<f32>, k: f32) -> f32 {\\n  var NdotX = cdot(N, X);\\n  return NdotX / max(0.000001, (NdotX*(1-k) + k));\\n}\\n\\nfn smithSurfaceRoughness(N: vec3<f32>, V: vec3<f32>, L: vec3<f32>, k: f32) -> f32 {\\n  var ggx1: f32 = min(1, schlickGGX(N, V, k));\\n  var ggx2: f32 = min(1, schlickGGX(N, L, k));\\n  return ggx1*ggx2;\\n}\\n\\n// BRDF Combination\\nfn cookTorrance(D: f32, F: f32, G: f32, N: vec3<f32>, V: vec3<f32>, L: vec3<f32>) -> f32 {\\n  var num: f32 = D*F*G;\\n  var denom: f32 = 4*cdot(V, N)*cdot(L, N);\\n\\n  return num / max(denom, 0.000001);\\n}\\n\\n// Different lighting calculations for different light sources\\nfn calcDirectionalLight(N: vec3<f32>, V: vec3<f32>, ior: f32, roughness: f32, metallic: f32, direction: vec3<f32>, color: vec3<f32>, base: vec3<f32>) -> PBRData {  \\n  var L: vec3<f32> = normalize(direction); // Light Vector\\n  var H: vec3<f32> = normalize(L + V); // Halfway Vector\\n\\n  var alpha = roughness*roughness;\\n  var k: f32 = alpha*alpha / 2;\\n\\n  var D: f32 = trGGX(N, H, alpha); // Distribution\\n  // var F: f32 = schlickFresnelIOR(V, N, ior, k); // Fresnel\\n  var G: f32 = smithSurfaceRoughness(N, V, L, k); // Geometry\\n\\n  var brdf: f32 = cookTorrance(D, 1, G, N, V, L); // Fresnel term is replaced with 1 because it is added later\\n  var incoming: vec3<f32> = color;\\n  var angle: f32 = mdot(L, N);\\n  angle = pow(angle, 1.5);\\n\\n  var specular: vec3<f32> = brdf*incoming*angle;\\n  // Oren-Nayar gives a clay-like effect when fully rough which some people may not want, so it might be better to give a separate\\n  // control property for the diffuse vs specular roughness\\n  var diffuse: vec3<f32> = incoming*fujiiOrenNayar(base, roughness, N, L, V); \\n  // Stores the specular and diffuse separately to allow for finer post processing\\n  var out = PBRData(diffuse, specular);\\n  \\n  return out; // Returns angle along with color of light so the final color can be multiplied by angle as well (creates black areas)\\n}\\n\\n// TODO: find some way to reduce the number of arguments going in here\\nfn calcPointLight(N: vec3<f32>, V: vec3<f32>, fragPos: vec3<f32>, ior: f32, roughness: f32, metallic: f32, position: vec3<f32>, color: vec3<f32>, base: vec3<f32>) -> PBRData {\\n  var L: vec3<f32> = normalize(position - fragPos); // Light Vector\\n  var H: vec3<f32> = normalize(L + V); // Halfway Vector\\n  var dist = distance(position, fragPos);\\n\\n  var alpha = roughness*roughness;\\n  var k: f32 = alpha*alpha / 2; // could also be pow(alpha + 1.0, 2) / 8\\n\\n  var D: f32 = trGGX(N, H, alpha); // Distribution\\n  // var F: f32 = schlickFresnelIOR(V, N, ior, k); // Fresnel\\n  var G: f32 = smithSurfaceRoughness(N, V, L, k); // Geometry\\n\\n  var brdf: f32 = cookTorrance(D, 1, G, N, V, L);  \\n  var incoming: vec3<f32> = color * (1. / (dist*dist));\\n  var angle: f32 = mdot(L, N);\\n  angle = pow(angle, 1.5); // Smoothing factor makes it less accurate, but reduces ugly \\\"seams\\\" bewteen light sources\\n\\n  var specular: vec3<f32> = brdf*incoming*angle;\\n  var diffuse: vec3<f32> = incoming*fujiiOrenNayar(base, roughness, N, L, V);\\n\\n  // Stores the specular and diffuse separately to allow for finer post processing\\n  // Could also be done (propably more properly) with a struct\\n  var out = PBRData(diffuse, specular);\\n  \\n  return out; // Returns angle along with color of light so the final color can be multiplied by angle as well (creates black areas)\\n}\\n\\n// For a reason unknown to me, spheres dont seem to behave propperly with head-on spot lights\\nfn calcSpotLight(N: vec3<f32>, V: vec3<f32>, fragPos: vec3<f32>, ior: f32, roughness: f32, metallic: f32, position: vec3<f32>, direction: vec3<f32>, cones: vec2<f32>, color: vec3<f32>, base: vec3<f32>) -> PBRData {\\n  var L: vec3<f32> = normalize(position - fragPos);\\n  var H: vec3<f32> = normalize(L + V); // Halfway Vector\\n  var dist = distance(position, fragPos);\\n\\n  var alpha = roughness*roughness;\\n  var k: f32 = alpha*alpha / 2; // could also be pow(alpha + 1.0, 2) / 8\\n\\n  var D: f32 = trGGX(N, H, alpha); // Distribution\\n  // var F: f32 = schlickFresnelIOR(V, N, ior, k); // Fresnel\\n  var G: f32 = smithSurfaceRoughness(N, V, L, k); // Geometry\\n\\n  var brdf: f32 = cookTorrance(D, 1, G, N, V, L);  \\n  \\n  // Cones.x is the inner phi and cones.y is the outer phi\\n  var theta: f32 = mdot(normalize(direction), L);\\n  var epsilon: f32 = cones.x - cones.y;\\n  var intensity: f32 = (theta - cones.y) / epsilon;\\n  intensity = clamp(intensity, 0.0, 1.0);\\n  intensity /= dist*dist;\\n\\n  var incoming: vec3<f32> = color * intensity;\\n\\n  var angle: f32 = mdot(L, N);\\n  angle = pow(angle, 1.5); // Smoothing factor makes it less accurate, but reduces ugly \\\"seams\\\" bewteen light sources\\n\\n  var specular: vec3<f32> = brdf*incoming*angle;\\n  var diffuse: vec3<f32> = incoming*fujiiOrenNayar(base, roughness, N, L, V);\\n\\n  // Stores the specular and diffuse separately to allow for finer post processing\\n  // Could also be done (propably more properly) with a struct\\n  var out = PBRData(diffuse, specular);\\n  \\n  return out; // Returns angle along with color of light so the final color can be multiplied by angle as well (creates black areas)\\n}\\n\\n// Environment mapping stuff\\n// Takes in a vector and converts it to an equivalent coordinate in a rectilinear texture. Should be replaced with cubemaps at some point\\nfn vecToRectCoord(dir: vec3<f32>) -> vec2<f32> {\\n  var tau: f32 = 6.28318530718;\\n  var pi: f32 = 3.14159265359;\\n  var out: vec2<f32> = vec2<f32>(0.0);\\n\\n  out.x = atan2(dir.z, dir.x) / tau;\\n  out.x += 0.5;\\n\\n  var phix: f32 = length(vec2(dir.x, dir.z));\\n  out.y = atan2(dir.y, phix) / pi + 0.5;\\n\\n  return out;\\n}\\n\\n//VTK::Renderer::Dec\\n\\n//VTK::Color::Dec\\n\\n//VTK::TCoord::Dec\\n\\n// optional surface normal declaration\\n//VTK::Normal::Dec\\n\\n//VTK::Select::Dec\\n\\n//VTK::RenderEncoder::Dec\\n\\n//VTK::Mapper::Dec\\n\\n//VTK::IOStructs::Dec\\n\\n@fragment\\nfn main(\\n//VTK::IOStructs::Input\\n)\\n//VTK::IOStructs::Output\\n{\\n  var output : fragmentOutput;\\n\\n  // Temporary ambient, diffuse, and opacity\\n  var ambientColor: vec4<f32> = mapperUBO.AmbientColor;\\n  var diffuseColor: vec4<f32> = mapperUBO.DiffuseColor;\\n  var opacity: f32 = mapperUBO.Opacity;\\n\\n  // This should be declared somewhere else\\n  var _diffuseMap: vec4<f32> = vec4<f32>(1);\\n  var _roughnessMap: vec4<f32> = vec4<f32>(1);\\n  var _metallicMap: vec4<f32> = vec4<f32>(1);\\n  var _normalMap: vec4<f32> = vec4<f32>(0, 0, 1, 0); // normal map was setting off the normal vector detection in fragment\\n  var _ambientOcclusionMap: vec4<f32> = vec4<f32>(1);\\n  var _emissionMap: vec4<f32> = vec4<f32>(0);\\n\\n  //VTK::Color::Impl\\n\\n  //VTK::TCoord::Impl\\n\\n  //VTK::Normal::Impl\\n\\n  var computedColor: vec4<f32> = vec4<f32>(diffuseColor.rgb, 1.0);\\n\\n  //VTK::Light::Impl\\n\\n  //VTK::Select::Impl\\n\\n  if (computedColor.a == 0.0) { discard; };\\n\\n  //VTK::Position::Impl\\n\\n  //VTK::RenderEncoder::Impl\\n\\n  return output;\\n}\\n\";\n\nfunction isEdges(hash) {\n  // edge pipelines have \"edge\" in them\n  return hash.indexOf('edge') >= 0;\n} // ----------------------------------------------------------------------------\n// vtkWebGPUCellArrayMapper methods\n// ----------------------------------------------------------------------------\n\n\nfunction vtkWebGPUCellArrayMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUCellArrayMapper');\n\n  publicAPI.buildPass = function (prepass) {\n    if (prepass) {\n      if (model.is2D) {\n        model.WebGPUActor = publicAPI.getFirstAncestorOfType('vtkWebGPUActor2D');\n        model.forceZValue = true;\n      } else {\n        model.WebGPUActor = publicAPI.getFirstAncestorOfType('vtkWebGPUActor');\n        model.forceZValue = false;\n      }\n\n      model.coordinateSystem = model.WebGPUActor.getRenderable().getCoordinateSystem();\n      model.useRendererMatrix = model.coordinateSystem !== CoordinateSystem.DISPLAY;\n      model.WebGPURenderer = model.WebGPUActor.getFirstAncestorOfType('vtkWebGPURenderer');\n      model.WebGPURenderWindow = model.WebGPURenderer.getParent();\n      model.device = model.WebGPURenderWindow.getDevice();\n    }\n  }; // Renders myself\n\n\n  publicAPI.translucentPass = function (prepass) {\n    if (prepass) {\n      publicAPI.prepareToDraw(model.WebGPURenderer.getRenderEncoder());\n      model.renderEncoder.registerDrawCallback(model.pipeline, publicAPI.draw);\n    }\n  };\n\n  publicAPI.opaquePass = function (prepass) {\n    if (prepass) {\n      publicAPI.prepareToDraw(model.WebGPURenderer.getRenderEncoder());\n      model.renderEncoder.registerDrawCallback(model.pipeline, publicAPI.draw);\n    }\n  };\n\n  publicAPI.updateUBO = function () {\n    // make sure the data is up to date\n    var actor = model.WebGPUActor.getRenderable();\n    var ppty = actor.getProperty();\n    var utime = model.UBO.getSendTime();\n\n    if (publicAPI.getMTime() > utime || ppty.getMTime() > utime || model.renderable.getMTime() > utime) {\n      var _ppty$getEdgeColorByR;\n\n      // Matricies\n      var keyMats = model.WebGPUActor.getKeyMatrices(model.WebGPURenderer);\n      model.UBO.setArray('BCWCMatrix', keyMats.bcwc);\n      model.UBO.setArray('BCSCMatrix', keyMats.bcsc);\n      model.UBO.setArray('MCWCNormals', keyMats.normalMatrix);\n\n      if (model.is2D) {\n        model.UBO.setValue('ZValue', model.WebGPUActor.getRenderable().getProperty().getDisplayLocation() === DisplayLocation.FOREGROUND ? 1.0 : 0.0);\n\n        var _aColor = ppty.getColorByReference();\n\n        model.UBO.setValue('AmbientIntensity', 1.0);\n        model.UBO.setArray('DiffuseColor', [_aColor[0], _aColor[1], _aColor[2], 1.0]);\n        model.UBO.setValue('DiffuseIntensity', 0.0);\n        model.UBO.setValue('SpecularIntensity', 0.0);\n      } else {\n        // Base Colors\n        var _aColor2 = ppty.getAmbientColorByReference();\n\n        model.UBO.setValue('AmbientIntensity', ppty.getAmbient());\n        model.UBO.setArray('AmbientColor', [_aColor2[0], _aColor2[1], _aColor2[2], 1.0]);\n        model.UBO.setValue('DiffuseIntensity', ppty.getDiffuse());\n        _aColor2 = ppty.getDiffuseColorByReference();\n        model.UBO.setArray('DiffuseColor', [_aColor2[0], _aColor2[1], _aColor2[2], 1.0]); // Roughness\n\n        model.UBO.setValue('Roughness', ppty.getRoughness());\n        model.UBO.setValue('BaseIOR', ppty.getBaseIOR()); // Metallic\n\n        model.UBO.setValue('Metallic', ppty.getMetallic()); // Normal\n\n        model.UBO.setValue('NormalStrength', ppty.getNormalStrength()); // Emission\n\n        model.UBO.setValue('Emission', ppty.getEmission()); // Specular\n\n        model.UBO.setValue('SpecularIntensity', ppty.getSpecular());\n        _aColor2 = ppty.getSpecularColorByReference();\n        model.UBO.setArray('SpecularColor', [_aColor2[0], _aColor2[1], _aColor2[2], 1.0]);\n      } // Edge and line rendering\n\n\n      var aColor = (_ppty$getEdgeColorByR = ppty.getEdgeColorByReference) === null || _ppty$getEdgeColorByR === void 0 ? void 0 : _ppty$getEdgeColorByR.call(ppty);\n\n      if (aColor) {\n        model.UBO.setArray('EdgeColor', [aColor[0], aColor[1], aColor[2], 1.0]);\n      }\n\n      model.UBO.setValue('LineWidth', ppty.getLineWidth());\n      model.UBO.setValue('Opacity', ppty.getOpacity());\n      model.UBO.setValue('PropID', model.WebGPUActor.getPropID());\n      var device = model.WebGPURenderWindow.getDevice();\n      model.UBO.sendIfNeeded(device);\n    }\n  };\n\n  publicAPI.haveWideLines = function () {\n    var actor = model.WebGPUActor.getRenderable();\n    var representation = actor.getProperty().getRepresentation();\n\n    if (actor.getProperty().getLineWidth() <= 1.0) {\n      return false;\n    }\n\n    if (model.primitiveType === PrimitiveTypes.Verts) {\n      return false;\n    }\n\n    if (model.primitiveType === PrimitiveTypes.Triangles || model.primitiveType === PrimitiveTypes.TriangleStrips) {\n      return representation === Representation.WIREFRAME;\n    }\n\n    return true;\n  };\n\n  publicAPI.replaceShaderPosition = function (hash, pipeline, vertexInput) {\n    var vDesc = pipeline.getShaderDescription('vertex');\n    vDesc.addBuiltinOutput('vec4<f32>', '@builtin(position) Position');\n    if (!vDesc.hasOutput('vertexVC')) vDesc.addOutput('vec4<f32>', 'vertexVC');\n    var code = vDesc.getCode();\n\n    if (model.useRendererMatrix) {\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::Position::Impl', ['    var pCoord: vec4<f32> = rendererUBO.SCPCMatrix*mapperUBO.BCSCMatrix*vertexBC;', '    output.vertexVC = rendererUBO.SCVCMatrix * mapperUBO.BCSCMatrix * vec4<f32>(vertexBC.xyz, 1.0);', '//VTK::Position::Impl']).result;\n\n      if (model.forceZValue) {\n        code = vtkWebGPUShaderCache.substitute(code, '//VTK::Position::Impl', ['pCoord = vec4<f32>(pCoord.xyz/pCoord.w, 1.0);', 'pCoord.z = mapperUBO.ZValue;', '//VTK::Position::Impl']).result;\n      }\n    } else {\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::Position::Impl', ['    var pCoord: vec4<f32> = mapperUBO.BCSCMatrix*vertexBC;', '    pCoord.x = 2.0* pCoord.x / rendererUBO.viewportSize.x - 1.0;', '    pCoord.y = 2.0* pCoord.y / rendererUBO.viewportSize.y - 1.0;', '    pCoord.z = 0.5 - 0.5 * pCoord.z;', '//VTK::Position::Impl']).result;\n\n      if (model.forceZValue) {\n        code = vtkWebGPUShaderCache.substitute(code, '//VTK::Position::Impl', ['    pCoord.z = mapperUBO.ZValue;', '//VTK::Position::Impl']).result;\n      }\n    }\n\n    if (publicAPI.haveWideLines()) {\n      vDesc.addBuiltinInput('u32', '@builtin(instance_index) instanceIndex'); // widen the edge\n\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::Position::Impl', ['    var tmpPos: vec4<f32> = pCoord;', '    var numSteps: f32 = ceil(mapperUBO.LineWidth - 1.0);', '    var offset: f32 = (mapperUBO.LineWidth - 1.0) * (f32(input.instanceIndex / 2u) - numSteps/2.0) / numSteps;', '    var tmpPos2: vec3<f32> = tmpPos.xyz / tmpPos.w;', '    tmpPos2.x = tmpPos2.x + 2.0 * (f32(input.instanceIndex) % 2.0) * offset / rendererUBO.viewportSize.x;', '    tmpPos2.y = tmpPos2.y + 2.0 * (f32(input.instanceIndex + 1u) % 2.0) * offset / rendererUBO.viewportSize.y;', '    tmpPos2.z = min(1.0, tmpPos2.z + 0.00001);', // could become a setting\n      '    pCoord = vec4<f32>(tmpPos2.xyz * tmpPos.w, tmpPos.w);', '//VTK::Position::Impl']).result;\n    }\n\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::Position::Impl', ['    output.Position = pCoord;']).result;\n    vDesc.setCode(code);\n  };\n\n  model.shaderReplacements.set('replaceShaderPosition', publicAPI.replaceShaderPosition);\n\n  publicAPI.replaceShaderNormal = function (hash, pipeline, vertexInput) {\n    var normalBuffer = vertexInput.getBuffer('normalMC');\n    var actor = model.WebGPUActor.getRenderable();\n\n    if (normalBuffer) {\n      var vDesc = pipeline.getShaderDescription('vertex');\n\n      if (!vDesc.hasOutput('normalVC')) {\n        vDesc.addOutput('vec3<f32>', 'normalVC', normalBuffer.getArrayInformation()[0].interpolation);\n      }\n\n      if (!vDesc.hasOutput('tangentVC')) {\n        vDesc.addOutput('vec3<f32>', 'tangentVC', normalBuffer.getArrayInformation()[0].interpolation);\n      }\n\n      if (!vDesc.hasOutput('bitangentVC')) {\n        vDesc.addOutput('vec3<f32>', 'bitangentVC', normalBuffer.getArrayInformation()[0].interpolation);\n      }\n\n      var code = vDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::Normal::Impl', ['  output.normalVC = normalize((rendererUBO.WCVCNormals * mapperUBO.MCWCNormals * normalMC).xyz);', // This is just an approximation, but it happens to work extremely well\n      // It only works well for normals that are head on and not super angled though\n      // Definitely needs to be replaced\n      '  var c1: vec3<f32> = cross(output.normalVC, vec3<f32>(0, 0, 1));', '  var c2: vec3<f32> = cross(output.normalVC, vec3<f32>(0, 1, 0));', '  var tangent: vec3<f32> = mix(c1, c2, distance(c1, c2));', '  output.tangentVC = normalize(tangent);', '  output.bitangentVC = normalize(cross(output.normalVC, tangent));']).result;\n      vDesc.setCode(code);\n      var fDesc = pipeline.getShaderDescription('fragment');\n      code = fDesc.getCode();\n\n      if (actor.getProperty().getNormalTexture()) {\n        code = vtkWebGPUShaderCache.substitute(code, '//VTK::Normal::Impl', ['  var normal: vec3<f32> = input.normalVC;', '  if (!input.frontFacing) { normal = -normal; }', '  var tangent: vec3<f32> = input.tangentVC;', '  var bitangent: vec3<f32> = input.bitangentVC;', '  var TCVCMatrix: mat3x3<f32> = mat3x3<f32>(', '    tangent.x, bitangent.x, normal.x,', '    tangent.y, bitangent.y, normal.y,', '    tangent.z, bitangent.z, normal.z,', '  );', '  var mappedNormal: vec3<f32> = TCVCMatrix * (_normalMap.xyz * 2 - 1);', '  normal = mix(normal, mappedNormal, mapperUBO.NormalStrength);', '  normal = normalize(normal);']).result;\n      } else {\n        code = vtkWebGPUShaderCache.substitute(code, '//VTK::Normal::Impl', ['  var normal: vec3<f32> = input.normalVC;', '  if (!input.frontFacing) { normal = -normal; }', '  normal = normalize(normal);']).result;\n      }\n\n      fDesc.setCode(code);\n    }\n  };\n\n  model.shaderReplacements.set('replaceShaderNormal', publicAPI.replaceShaderNormal); // we only apply lighting when there is a \"var normal\" declaration in the\n  // fragment shader code. That is the lighting trigger.\n\n  publicAPI.replaceShaderLight = function (hash, pipeline, vertexInput) {\n    if (hash.includes('sel')) return;\n    var vDesc = pipeline.getShaderDescription('vertex');\n    if (!vDesc.hasOutput('vertexVC')) vDesc.addOutput('vec4<f32>', 'vertexVC');\n    var renderer = model.WebGPURenderer.getRenderable();\n    var fDesc = pipeline.getShaderDescription('fragment');\n    var code = fDesc.getCode(); // Code that runs if the fragment shader includes normals\n\n    if (code.includes('var normal:') && model.useRendererMatrix && !isEdges(hash) && !model.is2D && !hash.includes('sel')) {\n      var _renderer$getEnvironm;\n\n      var lightingCode = [// Constants\n      '  var pi: f32 = 3.14159265359;', // Vectors needed for light calculations\n      '  var fragPos: vec3<f32> = vec3<f32>(input.vertexVC.xyz);', '  var V: vec3<f32> = mix(normalize(-fragPos), vec3<f32>(0, 0, 1), f32(rendererUBO.cameraParallel)); // View Vector', // Values needed for light calculations\n      '  var baseColor: vec3<f32> = _diffuseMap.rgb * diffuseColor.rgb;', '  var roughness: f32 = max(0.000001, mapperUBO.Roughness * _roughnessMap.r);', // Need to have a different way of sampling greyscale values aside from .r\n      '  var metallic: f32 = mapperUBO.Metallic * _metallicMap.r;', '  var alpha: f32 = roughness*roughness;', '  var ior: f32 = mapperUBO.BaseIOR;', '  var k: f32 = alpha*alpha / 2;', // Split diffuse and specular components\n      '  var diffuse: vec3<f32> = vec3<f32>(0.);', '  var specular: vec3<f32> = vec3<f32>(0.);', '  var emission: vec3<f32> = _emissionMap.rgb * mapperUBO.Emission;', // Summing diffuse and specular components of directional lights\n      '  {', '    var i: i32 = 0;', '    loop {', '      if !(i < rendererUBO.LightCount) { break; }', '      switch (i32(rendererLightSSBO.values[i].LightData.x)) {', '         // Point Light', '         case 0 {', '           var color: vec3<f32> = rendererLightSSBO.values[i].LightColor.rgb * rendererLightSSBO.values[i].LightColor.w;', '           var pos: vec3<f32> = (rendererLightSSBO.values[i].LightPos).xyz;', '           var calculated: PBRData = calcPointLight(normal, V, fragPos, ior, roughness, metallic, pos, color, baseColor);', '           diffuse += max(vec3<f32>(0), calculated.diffuse);', '           specular += max(vec3<f32>(0), calculated.specular);', '          }', '         // Directional light', '         case 1 {', '           var dir: vec3<f32> = (rendererUBO.WCVCNormals * vec4<f32>(normalize(rendererLightSSBO.values[i].LightDir.xyz), 0.)).xyz;', '           dir = normalize(dir);', '           var color: vec3<f32> = rendererLightSSBO.values[i].LightColor.rgb * rendererLightSSBO.values[i].LightColor.w;', '           var calculated: PBRData = calcDirectionalLight(normal, V, ior, roughness, metallic, dir, color, baseColor); // diffuseColor.rgb needs to be fixed with a more dynamic diffuse color', '           diffuse += max(vec3<f32>(0), calculated.diffuse);', '           specular += max(vec3<f32>(0), calculated.specular);', '         }', '         // Spot Light', '         case 2 {', '           var color: vec3<f32> = rendererLightSSBO.values[i].LightColor.rgb * rendererLightSSBO.values[i].LightColor.w;', '           var pos: vec3<f32> = (rendererLightSSBO.values[i].LightPos).xyz;', '           var dir: vec3<f32> = (rendererUBO.WCVCNormals * vec4<f32>(normalize(rendererLightSSBO.values[i].LightDir.xyz), 0.)).xyz;', '           dir = normalize(dir);', '           var cones: vec2<f32> = vec2<f32>(rendererLightSSBO.values[i].LightData.y, rendererLightSSBO.values[i].LightData.z);', '           var calculated: PBRData = calcSpotLight(normal, V, fragPos, ior, roughness, metallic, pos, dir, cones, color, baseColor);', '           diffuse += max(vec3<f32>(0), calculated.diffuse);', '           specular += max(vec3<f32>(0), calculated.specular);', '         }', '         default { continue; }', '       }', '      continuing { i++; }', '    }', '  }', // Final variables for combining specular and diffuse\n      '  var fresnel: f32 = schlickFresnelIOR(V, normal, ior, k); // Fresnel', '  fresnel = min(1, fresnel);', '  // This could be controlled with its own variable (that isnt base color) for better artistic control', '  var fresnelMetallic: vec3<f32> = schlickFresnelRGB(V, normal, baseColor); // Fresnel for metal, takes color into account', '  var kS: vec3<f32> = mix(vec3<f32>(fresnel), fresnelMetallic, metallic);', '  kS = min(vec3<f32>(1), kS);', '  var kD: vec3<f32> = (1.0 - kS) * (1.0 - metallic);', '  var PBR: vec3<f32> = mapperUBO.DiffuseIntensity*kD*diffuse + kS*specular;', '  PBR += emission;', '  computedColor = vec4<f32>(PBR, mapperUBO.Opacity);'];\n\n      if ((_renderer$getEnvironm = renderer.getEnvironmentTexture()) !== null && _renderer$getEnvironm !== void 0 && _renderer$getEnvironm.getImageLoaded()) {\n        lightingCode.push('  // To get diffuse IBL, the texture is sampled with normals in worldspace', '  var diffuseIBLCoords: vec3<f32> = (transpose(rendererUBO.WCVCNormals) * vec4<f32>(normal, 1.)).xyz;', '  var diffuseCoords: vec2<f32> = vecToRectCoord(diffuseIBLCoords);', '  // To get specular IBL, the texture is sampled as the worldspace reflection between the normal and view vectors', '  // Reflections are first calculated in viewspace, then converted to worldspace to sample the environment', '  var VreflN: vec3<f32> = normalize(reflect(-V, normal));', '  var reflectionIBLCoords = (transpose(rendererUBO.WCVCNormals) * vec4<f32>(VreflN, 1.)).xyz;', '  var specularCoords: vec2<f32> = vecToRectCoord(reflectionIBLCoords);', '  var diffuseIBL = textureSampleLevel(EnvironmentTexture, EnvironmentTextureSampler, diffuseCoords, rendererUBO.MaxEnvironmentMipLevel);', // Level multiplier should be set by UBO\n        '  var level = roughness * rendererUBO.MaxEnvironmentMipLevel;', '  var specularIBL = textureSampleLevel(EnvironmentTexture, EnvironmentTextureSampler, specularCoords, level);', // Manual mip smoothing since not all formats support smooth level sampling\n        '  var specularIBLContribution: vec3<f32> = specularIBL.rgb*rendererUBO.BackgroundSpecularStrength;', '  computedColor += vec4<f32>(specularIBLContribution*kS, 0);', '  var diffuseIBLContribution: vec3<f32> = diffuseIBL.rgb*rendererUBO.BackgroundDiffuseStrength;', '  diffuseIBLContribution *= baseColor * _ambientOcclusionMap.rgb;', // Multipy by baseColor may be changed\n        '  computedColor += vec4<f32>(diffuseIBLContribution*kD, 0);');\n      }\n\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::Light::Impl', lightingCode).result;\n      fDesc.setCode(code); // If theres no normals, just set the specular color to be flat\n    } else {\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::Light::Impl', ['  var diffuse: vec3<f32> = diffuseColor.rgb;', '  var specular: vec3<f32> = mapperUBO.SpecularColor.rgb * mapperUBO.SpecularColor.a;', '  computedColor = vec4<f32>(diffuse * _diffuseMap.rgb, mapperUBO.Opacity);']).result;\n      fDesc.setCode(code);\n    }\n  };\n\n  model.shaderReplacements.set('replaceShaderLight', publicAPI.replaceShaderLight);\n\n  publicAPI.replaceShaderColor = function (hash, pipeline, vertexInput) {\n    // By default, set the colors to be flat\n    if (isEdges(hash)) {\n      var _fDesc = pipeline.getShaderDescription('fragment');\n\n      var _code = _fDesc.getCode();\n\n      _code = vtkWebGPUShaderCache.substitute(_code, '//VTK::Color::Impl', ['ambientColor = mapperUBO.EdgeColor;', 'diffuseColor = mapperUBO.EdgeColor;']).result;\n\n      _fDesc.setCode(_code);\n\n      return;\n    } // If there's no vertex color buffer return the shader as is\n\n\n    var colorBuffer = vertexInput.getBuffer('colorVI');\n    if (!colorBuffer) return; // Modifies the vertex shader to include the vertex colors and interpolation in the outputs\n\n    var vDesc = pipeline.getShaderDescription('vertex');\n    vDesc.addOutput('vec4<f32>', 'color', colorBuffer.getArrayInformation()[0].interpolation);\n    var code = vDesc.getCode();\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::Color::Impl', ['  output.color = colorVI;']).result;\n    vDesc.setCode(code); // Sets the fragment shader to accept the color inputs from the vertex shader\n\n    var fDesc = pipeline.getShaderDescription('fragment');\n    code = fDesc.getCode();\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::Color::Impl', ['ambientColor = input.color;', 'diffuseColor = input.color;', 'opacity = mapperUBO.Opacity * input.color.a;']).result;\n    fDesc.setCode(code);\n  };\n\n  model.shaderReplacements.set('replaceShaderColor', publicAPI.replaceShaderColor);\n\n  publicAPI.replaceShaderTCoord = function (hash, pipeline, vertexInput) {\n    var _actor$getProperty$ge, _actor$getProperty, _actor$getProperty$ge2, _actor$getProperty$ge4, _actor$getProperty3, _actor$getProperty$ge5, _actor$getProperty$ge6, _actor$getProperty4, _actor$getProperty$ge7, _actor$getProperty$ge8, _actor$getProperty5, _actor$getProperty$ge9, _actor$getProperty$ge10, _actor$getProperty6, _actor$getProperty$ge11, _actor$getProperty$ge12, _actor$getProperty7, _actor$getProperty$ge13;\n\n    if (!vertexInput.hasAttribute('tcoord')) return;\n    var vDesc = pipeline.getShaderDescription('vertex');\n    var tcoords = vertexInput.getBuffer('tcoord');\n    var numComp = vtkWebGPUTypes.getNumberOfComponentsFromBufferFormat(tcoords.getArrayInformation()[0].format);\n    var code = vDesc.getCode();\n    vDesc.addOutput(\"vec\".concat(numComp, \"<f32>\"), 'tcoordVS');\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::TCoord::Impl', ['  output.tcoordVS = tcoord;']).result;\n    vDesc.setCode(code);\n    var fDesc = pipeline.getShaderDescription('fragment');\n    code = fDesc.getCode();\n    var actor = model.WebGPUActor.getRenderable();\n\n    var checkDims = function checkDims(texture) {\n      if (!texture) return false;\n      var dims = texture.getDimensionality();\n      return dims === numComp;\n    };\n\n    var usedTextures = [];\n\n    if ((_actor$getProperty$ge = (_actor$getProperty = actor.getProperty()).getDiffuseTexture) !== null && _actor$getProperty$ge !== void 0 && (_actor$getProperty$ge2 = _actor$getProperty$ge.call(_actor$getProperty)) !== null && _actor$getProperty$ge2 !== void 0 && _actor$getProperty$ge2.getImageLoaded() || actor.getTextures()[0] || model.colorTexture) {\n      var _actor$getProperty$ge3, _actor$getProperty2;\n\n      if ( // Chained or statements here are questionable\n      checkDims((_actor$getProperty$ge3 = (_actor$getProperty2 = actor.getProperty()).getDiffuseTexture) === null || _actor$getProperty$ge3 === void 0 ? void 0 : _actor$getProperty$ge3.call(_actor$getProperty2)) || checkDims(actor.getTextures()[0]) || checkDims(model.colorTexture)) {\n        usedTextures.push('_diffuseMap = textureSample(DiffuseTexture, DiffuseTextureSampler, input.tcoordVS);');\n      }\n    }\n\n    if ((_actor$getProperty$ge4 = (_actor$getProperty3 = actor.getProperty()).getRoughnessTexture) !== null && _actor$getProperty$ge4 !== void 0 && (_actor$getProperty$ge5 = _actor$getProperty$ge4.call(_actor$getProperty3)) !== null && _actor$getProperty$ge5 !== void 0 && _actor$getProperty$ge5.getImageLoaded()) {\n      if (checkDims(actor.getProperty().getRoughnessTexture())) {\n        usedTextures.push('_roughnessMap = textureSample(RoughnessTexture, RoughnessTextureSampler, input.tcoordVS);');\n      }\n    }\n\n    if ((_actor$getProperty$ge6 = (_actor$getProperty4 = actor.getProperty()).getMetallicTexture) !== null && _actor$getProperty$ge6 !== void 0 && (_actor$getProperty$ge7 = _actor$getProperty$ge6.call(_actor$getProperty4)) !== null && _actor$getProperty$ge7 !== void 0 && _actor$getProperty$ge7.getImageLoaded()) {\n      if (checkDims(actor.getProperty().getMetallicTexture())) {\n        usedTextures.push('_metallicMap = textureSample(MetallicTexture, MetallicTextureSampler, input.tcoordVS);');\n      }\n    }\n\n    if ((_actor$getProperty$ge8 = (_actor$getProperty5 = actor.getProperty()).getNormalTexture) !== null && _actor$getProperty$ge8 !== void 0 && (_actor$getProperty$ge9 = _actor$getProperty$ge8.call(_actor$getProperty5)) !== null && _actor$getProperty$ge9 !== void 0 && _actor$getProperty$ge9.getImageLoaded()) {\n      if (checkDims(actor.getProperty().getNormalTexture())) {\n        usedTextures.push('_normalMap = textureSample(NormalTexture, NormalTextureSampler, input.tcoordVS);');\n      }\n    }\n\n    if ((_actor$getProperty$ge10 = (_actor$getProperty6 = actor.getProperty()).getAmbientOcclusionTexture) !== null && _actor$getProperty$ge10 !== void 0 && (_actor$getProperty$ge11 = _actor$getProperty$ge10.call(_actor$getProperty6)) !== null && _actor$getProperty$ge11 !== void 0 && _actor$getProperty$ge11.getImageLoaded()) {\n      if (checkDims(actor.getProperty().getAmbientOcclusionTexture())) {\n        usedTextures.push('_ambientOcclusionMap = textureSample(AmbientOcclusionTexture, AmbientOcclusionTextureSampler, input.tcoordVS);');\n      }\n    }\n\n    if ((_actor$getProperty$ge12 = (_actor$getProperty7 = actor.getProperty()).getEmissionTexture) !== null && _actor$getProperty$ge12 !== void 0 && (_actor$getProperty$ge13 = _actor$getProperty$ge12.call(_actor$getProperty7)) !== null && _actor$getProperty$ge13 !== void 0 && _actor$getProperty$ge13.getImageLoaded()) {\n      if (checkDims(actor.getProperty().getEmissionTexture())) {\n        usedTextures.push('_emissionMap = textureSample(EmissionTexture, EmissionTextureSampler, input.tcoordVS);');\n      }\n    }\n\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::TCoord::Impl', usedTextures).result;\n    fDesc.setCode(code);\n  };\n\n  model.shaderReplacements.set('replaceShaderTCoord', publicAPI.replaceShaderTCoord);\n\n  publicAPI.replaceShaderSelect = function (hash, pipeline, vertexInput) {\n    if (hash.includes('sel')) {\n      var fDesc = pipeline.getShaderDescription('fragment');\n      var code = fDesc.getCode(); // by default there are no composites, so just 0\n\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::Select::Impl', ['  var compositeID: u32 = 0u;']).result;\n      fDesc.setCode(code);\n    }\n  };\n\n  model.shaderReplacements.set('replaceShaderSelect', publicAPI.replaceShaderSelect);\n\n  publicAPI.getUsage = function (rep, i) {\n    if (rep === Representation.POINTS || i === PrimitiveTypes.Points) {\n      return BufferUsage.Verts;\n    }\n\n    if (i === PrimitiveTypes.Lines) {\n      return BufferUsage.Lines;\n    }\n\n    if (rep === Representation.WIREFRAME) {\n      if (i === PrimitiveTypes.Triangles) {\n        return BufferUsage.LinesFromTriangles;\n      }\n\n      return BufferUsage.LinesFromStrips;\n    }\n\n    if (i === PrimitiveTypes.Triangles) {\n      return BufferUsage.Triangles;\n    }\n\n    if (i === PrimitiveTypes.TriangleStrips) {\n      return BufferUsage.Strips;\n    }\n\n    if (i === PrimitiveTypes.TriangleEdges) {\n      return BufferUsage.LinesFromTriangles;\n    } // only strip edges left which are lines\n\n\n    return BufferUsage.LinesFromStrips;\n  };\n\n  publicAPI.getHashFromUsage = function (usage) {\n    return \"pt\".concat(usage);\n  };\n\n  publicAPI.getTopologyFromUsage = function (usage) {\n    switch (usage) {\n      case BufferUsage.Triangles:\n        return 'triangle-list';\n\n      case BufferUsage.Verts:\n        return 'point-list';\n\n      case BufferUsage.Lines:\n      default:\n        return 'line-list';\n    }\n  }; // TODO: calculate tangents\n\n\n  publicAPI.buildVertexInput = function () {\n    var _model$renderable$get, _model$renderable;\n\n    var pd = model.currentInput;\n    var cells = model.cellArray;\n    var primType = model.primitiveType;\n    var actor = model.WebGPUActor.getRenderable();\n    var representation = actor.getProperty().getRepresentation();\n    var device = model.WebGPURenderWindow.getDevice();\n    var edges = false;\n\n    if (primType === PrimitiveTypes.TriangleEdges) {\n      edges = true;\n      representation = Representation.WIREFRAME;\n    }\n\n    var vertexInput = model.vertexInput;\n    var points = pd.getPoints();\n    var indexBuffer; // get the flat mapping indexBuffer for the cells\n\n    if (cells) {\n      var buffRequest = {\n        hash: \"R\".concat(representation, \"P\").concat(primType).concat(cells.getMTime()),\n        usage: BufferUsage.Index,\n        cells: cells,\n        numberOfPoints: points.getNumberOfPoints(),\n        primitiveType: primType,\n        representation: representation\n      };\n      indexBuffer = device.getBufferManager().getBuffer(buffRequest);\n      vertexInput.setIndexBuffer(indexBuffer);\n    } else {\n      vertexInput.setIndexBuffer(null);\n    } // hash = all things that can change the values on the buffer\n    // since mtimes are unique we can use\n    // - indexBuffer mtime - because cells drive how we pack\n    // - relevant dataArray mtime - the source data\n    // - shift - not currently captured\n    // - scale - not currently captured\n    // - format\n    // - usage\n    // - packExtra - covered by format\n    // points\n\n\n    if (points) {\n      var shift = model.WebGPUActor.getBufferShift(model.WebGPURenderer);\n      var _buffRequest = {\n        hash: \"\".concat(points.getMTime(), \"I\").concat(indexBuffer.getMTime()).concat(shift.join(), \"float32x4\"),\n        usage: BufferUsage.PointArray,\n        format: 'float32x4',\n        dataArray: points,\n        indexBuffer: indexBuffer,\n        shift: shift,\n        packExtra: true\n      };\n      var buff = device.getBufferManager().getBuffer(_buffRequest);\n      vertexInput.addBuffer(buff, ['vertexBC']);\n    } else {\n      vertexInput.removeBufferIfPresent('vertexBC');\n    } // normals, only used for surface rendering\n\n\n    var usage = publicAPI.getUsage(representation, primType);\n    model._usesCellNormals = false;\n\n    if (!model.is2D && ( // no lighting on Property2D\n    usage === BufferUsage.Triangles || usage === BufferUsage.Strips)) {\n      var normals = pd.getPointData().getNormals(); // https://vtk.org/doc/nightly/html/classvtkPolyDataTangents.html\n      // Need to find some way of using precomputed tangents (or computing new ones)\n\n      var _buffRequest2 = {\n        format: 'snorm8x4',\n        indexBuffer: indexBuffer,\n        packExtra: true,\n        shift: 0,\n        scale: 127\n      };\n\n      if (normals) {\n        _buffRequest2.hash = \"\".concat(normals.getMTime(), \"I\").concat(indexBuffer.getMTime(), \"snorm8x4\");\n        _buffRequest2.dataArray = normals;\n        _buffRequest2.usage = BufferUsage.PointArray;\n\n        var _buff = device.getBufferManager().getBuffer(_buffRequest2);\n\n        vertexInput.addBuffer(_buff, ['normalMC']);\n      } else if (primType === PrimitiveTypes.Triangles) {\n        model._usesCellNormals = true;\n        _buffRequest2.hash = \"PFN\".concat(points.getMTime(), \"I\").concat(indexBuffer.getMTime(), \"snorm8x4\");\n        _buffRequest2.dataArray = points;\n        _buffRequest2.cells = cells;\n        _buffRequest2.usage = BufferUsage.NormalsFromPoints;\n\n        var _buff2 = device.getBufferManager().getBuffer(_buffRequest2);\n\n        vertexInput.addBuffer(_buff2, ['normalMC']);\n      } else {\n        vertexInput.removeBufferIfPresent('normalMC');\n      }\n    } else {\n      vertexInput.removeBufferIfPresent('normalMC');\n    } // deal with colors but only if modified\n\n\n    var haveColors = false;\n\n    if (model.renderable.getScalarVisibility()) {\n      var c = model.renderable.getColorMapColors();\n\n      if (c && !edges) {\n        var scalarMode = model.renderable.getScalarMode();\n        var haveCellScalars = false; // We must figure out how the scalars should be mapped to the polydata.\n\n        if ((scalarMode === ScalarMode.USE_CELL_DATA || scalarMode === ScalarMode.USE_CELL_FIELD_DATA || scalarMode === ScalarMode.USE_FIELD_DATA || !pd.getPointData().getScalars()) && scalarMode !== ScalarMode.USE_POINT_FIELD_DATA && c) {\n          haveCellScalars = true;\n        }\n\n        var _buffRequest3 = {\n          usage: BufferUsage.PointArray,\n          format: 'unorm8x4',\n          hash: \"\".concat(haveCellScalars).concat(c.getMTime(), \"I\").concat(indexBuffer.getMTime(), \"unorm8x4\"),\n          dataArray: c,\n          indexBuffer: indexBuffer,\n          cellData: haveCellScalars,\n          cellOffset: 0\n        };\n\n        var _buff3 = device.getBufferManager().getBuffer(_buffRequest3);\n\n        vertexInput.addBuffer(_buff3, ['colorVI']);\n        haveColors = true;\n      }\n    }\n\n    if (!haveColors) {\n      vertexInput.removeBufferIfPresent('colorVI');\n    }\n\n    var tcoords = null;\n\n    if ((_model$renderable$get = (_model$renderable = model.renderable).getInterpolateScalarsBeforeMapping) !== null && _model$renderable$get !== void 0 && _model$renderable$get.call(_model$renderable) && model.renderable.getColorCoordinates()) {\n      tcoords = model.renderable.getColorCoordinates();\n    } else {\n      tcoords = pd.getPointData().getTCoords();\n    }\n\n    if (tcoords && !edges) {\n      var _buff4 = device.getBufferManager().getBufferForPointArray(tcoords, vertexInput.getIndexBuffer());\n\n      vertexInput.addBuffer(_buff4, ['tcoord']);\n    } else {\n      vertexInput.removeBufferIfPresent('tcoord');\n    }\n  };\n\n  publicAPI.updateTextures = function () {\n    var _model$renderable$get2, _model$renderable2, _actor$getProperty$ge14, _actor$getProperty8, _actor$getProperty$ge15, _actor$getProperty9, _actor$getProperty$ge16, _actor$getProperty10, _actor$getProperty$ge17, _actor$getProperty11, _actor$getProperty$ge18, _actor$getProperty12, _actor$getProperty$ge19, _actor$getProperty13, _renderer$getEnvironm2;\n\n    // we keep track of new and used textures so\n    // that we can clean up any unused textures so we don't hold onto them\n    var usedTextures = [];\n    var newTextures = []; // do we have a scalar color texture\n\n    var idata = (_model$renderable$get2 = (_model$renderable2 = model.renderable).getColorTextureMap) === null || _model$renderable$get2 === void 0 ? void 0 : _model$renderable$get2.call(_model$renderable2);\n\n    if (idata) {\n      if (!model.colorTexture) {\n        model.colorTexture = vtkTexture.newInstance({\n          label: 'polyDataColor'\n        });\n      }\n\n      model.colorTexture.setInputData(idata);\n      newTextures.push(['Diffuse', model.colorTexture]);\n    } // actor textures?\n\n\n    var actor = model.WebGPUActor.getRenderable();\n    var renderer = model.WebGPURenderer.getRenderable(); // Reusing the old code for new and old textures, just loading in from properties instead of actor.getTextures()\n\n    var textures = []; // Feels like there should be a better way than individually adding all\n\n    if ((_actor$getProperty$ge14 = (_actor$getProperty8 = actor.getProperty()).getDiffuseTexture) !== null && _actor$getProperty$ge14 !== void 0 && _actor$getProperty$ge14.call(_actor$getProperty8)) {\n      var pair = ['Diffuse', actor.getProperty().getDiffuseTexture()];\n      textures.push(pair);\n    }\n\n    if (actor.getTextures()[0]) {\n      var _pair = ['Diffuse', actor.getTextures()[0]];\n      textures.push(_pair);\n    }\n\n    if (model.colorTexture) {\n      var _pair2 = ['Diffuse', model.colorTexture];\n      textures.push(_pair2);\n    }\n\n    if ((_actor$getProperty$ge15 = (_actor$getProperty9 = actor.getProperty()).getRoughnessTexture) !== null && _actor$getProperty$ge15 !== void 0 && _actor$getProperty$ge15.call(_actor$getProperty9)) {\n      var _pair3 = ['Roughness', actor.getProperty().getRoughnessTexture()];\n      textures.push(_pair3);\n    }\n\n    if ((_actor$getProperty$ge16 = (_actor$getProperty10 = actor.getProperty()).getMetallicTexture) !== null && _actor$getProperty$ge16 !== void 0 && _actor$getProperty$ge16.call(_actor$getProperty10)) {\n      var _pair4 = ['Metallic', actor.getProperty().getMetallicTexture()];\n      textures.push(_pair4);\n    }\n\n    if ((_actor$getProperty$ge17 = (_actor$getProperty11 = actor.getProperty()).getNormalTexture) !== null && _actor$getProperty$ge17 !== void 0 && _actor$getProperty$ge17.call(_actor$getProperty11)) {\n      var _pair5 = ['Normal', actor.getProperty().getNormalTexture()];\n      textures.push(_pair5);\n    }\n\n    if ((_actor$getProperty$ge18 = (_actor$getProperty12 = actor.getProperty()).getAmbientOcclusionTexture) !== null && _actor$getProperty$ge18 !== void 0 && _actor$getProperty$ge18.call(_actor$getProperty12)) {\n      var _pair6 = ['AmbientOcclusion', actor.getProperty().getAmbientOcclusionTexture()];\n      textures.push(_pair6);\n    }\n\n    if ((_actor$getProperty$ge19 = (_actor$getProperty13 = actor.getProperty()).getEmissionTexture) !== null && _actor$getProperty$ge19 !== void 0 && _actor$getProperty$ge19.call(_actor$getProperty13)) {\n      var _pair7 = ['Emission', actor.getProperty().getEmissionTexture()];\n      textures.push(_pair7);\n    }\n\n    if ((_renderer$getEnvironm2 = renderer.getEnvironmentTexture) !== null && _renderer$getEnvironm2 !== void 0 && _renderer$getEnvironm2.call(renderer)) {\n      var _pair8 = ['Environment', renderer.getEnvironmentTexture()];\n      textures.push(_pair8);\n    }\n\n    for (var i = 0; i < textures.length; i++) {\n      if (textures[i][1].getInputData() || textures[i][1].getJsImageData() || textures[i][1].getCanvas()) {\n        newTextures.push(textures[i]);\n      }\n\n      if (textures[i][1].getImage() && textures[i][1].getImageLoaded()) {\n        newTextures.push(textures[i]);\n      }\n    }\n\n    for (var _i = 0; _i < newTextures.length; _i++) {\n      var srcTexture = newTextures[_i][1];\n      var textureName = newTextures[_i][0];\n      var newTex = model.device.getTextureManager().getTextureForVTKTexture(srcTexture); // Generates hash\n\n      if (newTex.getReady()) {\n        // is this a new texture\n        var found = false;\n\n        for (var t = 0; t < model.textures.length; t++) {\n          if (model.textures[t] === newTex) {\n            found = true;\n            usedTextures[t] = true;\n          }\n        }\n\n        if (!found) {\n          usedTextures[model.textures.length] = true;\n          var tview = newTex.createView(\"\".concat(textureName, \"Texture\"));\n          model.textures.push(newTex);\n          model.textureViews.push(tview);\n          var interpolate = srcTexture.getInterpolate() ? 'linear' : 'nearest';\n          var addressMode = null;\n          if (!addressMode && srcTexture.getEdgeClamp() && srcTexture.getRepeat()) addressMode = 'mirror-repeat';\n          if (!addressMode && srcTexture.getEdgeClamp()) addressMode = 'clamp-to-edge';\n          if (!addressMode && srcTexture.getRepeat()) addressMode = 'repeat';\n\n          if (textureName !== 'Environment') {\n            tview.addSampler(model.device, {\n              addressModeU: addressMode,\n              addressModeV: addressMode,\n              addressModeW: addressMode,\n              minFilter: interpolate,\n              magFilter: interpolate\n            });\n          } else {\n            tview.addSampler(model.device, {\n              addressModeU: 'repeat',\n              addressModeV: 'clamp-to-edge',\n              addressModeW: 'repeat',\n              minFilter: interpolate,\n              magFilter: interpolate,\n              mipmapFilter: 'linear'\n            });\n          }\n        }\n      }\n    } // remove unused textures\n\n\n    for (var _i2 = model.textures.length - 1; _i2 >= 0; _i2--) {\n      if (!usedTextures[_i2]) {\n        model.textures.splice(_i2, 1);\n        model.textureViews.splice(_i2, 1);\n      }\n    }\n  }; // compute a unique hash for a pipeline, this needs to be unique enough to\n  // capture any pipeline code changes (which includes shader changes)\n  // or vertex input changes/ bind groups/ etc\n\n\n  publicAPI.computePipelineHash = function () {\n    var pipelineHash = \"pd\".concat(model.useRendererMatrix ? 'r' : '').concat(model.forceZValue ? 'z' : '');\n\n    if (model.primitiveType === PrimitiveTypes.TriangleEdges || model.primitiveType === PrimitiveTypes.TriangleStripEdges) {\n      pipelineHash += 'edge';\n    } else {\n      if (model.vertexInput.hasAttribute(\"normalMC\")) {\n        pipelineHash += \"n\";\n      }\n\n      if (model.vertexInput.hasAttribute(\"colorVI\")) {\n        pipelineHash += \"c\";\n      }\n\n      if (model.vertexInput.hasAttribute(\"tcoord\")) {\n        var tcoords = model.vertexInput.getBuffer('tcoord');\n        var numComp = vtkWebGPUTypes.getNumberOfComponentsFromBufferFormat(tcoords.getArrayInformation()[0].format);\n        pipelineHash += \"t\".concat(numComp);\n      }\n\n      if (model.textures.length) {\n        pipelineHash += \"tx\".concat(model.textures.length);\n      }\n    }\n\n    if (model._usesCellNormals) {\n      pipelineHash += \"cn\";\n    }\n\n    if (model.SSBO) {\n      pipelineHash += \"ssbo\";\n    }\n\n    var uhash = publicAPI.getHashFromUsage(model.usage);\n    pipelineHash += uhash;\n    pipelineHash += model.renderEncoder.getPipelineHash();\n    model.pipelineHash = pipelineHash;\n  };\n\n  publicAPI.updateBuffers = function () {\n    // handle textures if not edges\n    if (model.primitiveType !== PrimitiveTypes.TriangleEdges && model.primitiveType !== PrimitiveTypes.TriangleStripEdges) {\n      publicAPI.updateTextures();\n    }\n\n    var actor = model.WebGPUActor.getRenderable();\n    var rep = actor.getProperty().getRepresentation(); // handle per primitive type\n\n    model.usage = publicAPI.getUsage(rep, model.primitiveType);\n    publicAPI.buildVertexInput();\n    var vbo = model.vertexInput.getBuffer('vertexBC');\n    publicAPI.setNumberOfVertices(vbo.getSizeInBytes() / vbo.getStrideInBytes());\n    publicAPI.setTopology(publicAPI.getTopologyFromUsage(model.usage));\n    publicAPI.updateUBO();\n\n    if (publicAPI.haveWideLines()) {\n      var ppty = actor.getProperty();\n      publicAPI.setNumberOfInstances(Math.ceil(ppty.getLineWidth() * 2.0));\n    } else {\n      publicAPI.setNumberOfInstances(1);\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  is2D: false,\n  cellArray: null,\n  currentInput: null,\n  cellOffset: 0,\n  primitiveType: 0,\n  colorTexture: null,\n  renderEncoder: null,\n  textures: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initiaLalues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initiaLalues); // Inheritance\n\n  vtkWebGPUSimpleMapper.extend(publicAPI, model, initiaLalues);\n  model.fragmentShaderTemplate = vtkWebGPUPolyDataFS;\n  model.vertexShaderTemplate = vtkWebGPUPolyDataVS;\n  model._tmpMat3 = mat3.identity(new Float64Array(9));\n  model._tmpMat4 = mat4.identity(new Float64Array(16)); // UBO\n\n  model.UBO = vtkWebGPUUniformBuffer.newInstance({\n    label: 'mapperUBO'\n  });\n  model.UBO.addEntry('BCWCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('BCSCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('MCWCNormals', 'mat4x4<f32>');\n  model.UBO.addEntry('AmbientColor', 'vec4<f32>');\n  model.UBO.addEntry('DiffuseColor', 'vec4<f32>');\n  model.UBO.addEntry('EdgeColor', 'vec4<f32>');\n  model.UBO.addEntry('SpecularColor', 'vec4<f32>');\n  model.UBO.addEntry('AmbientIntensity', 'f32');\n  model.UBO.addEntry('DiffuseIntensity', 'f32');\n  model.UBO.addEntry('Roughness', 'f32');\n  model.UBO.addEntry('Metallic', 'f32');\n  model.UBO.addEntry('Ambient', 'f32');\n  model.UBO.addEntry('Normal', 'f32');\n  model.UBO.addEntry('Emission', 'f32');\n  model.UBO.addEntry('NormalStrength', 'f32');\n  model.UBO.addEntry('BaseIOR', 'f32');\n  model.UBO.addEntry('SpecularIntensity', 'f32');\n  model.UBO.addEntry('LineWidth', 'f32');\n  model.UBO.addEntry('Opacity', 'f32');\n  model.UBO.addEntry('ZValue', 'f32');\n  model.UBO.addEntry('PropID', 'u32');\n  model.UBO.addEntry('ClipNear', 'f32');\n  model.UBO.addEntry('ClipFar', 'f32');\n  model.UBO.addEntry('Time', 'u32'); // Build VTK API\n\n  setGet(publicAPI, model, ['cellArray', 'currentInput', 'cellOffset', 'is2D', 'primitiveType', 'renderEncoder']);\n  model.textures = []; // Object methods\n\n  vtkWebGPUCellArrayMapper(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkWebGPUCellArrayMapper'); // ----------------------------------------------------------------------------\n\nvar vtkWebGPUCellArrayMapper$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkWebGPUCellArrayMapper$1 as default, extend, newInstance };\n", "import { newInstance as newInstance$1 } from '../../macros.js';\nimport vtkWebGPUBufferManager from './BufferManager.js';\nimport vtkWebGPUCellArrayMapper from './CellArrayMapper.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\nvar PrimitiveTypes = vtkWebGPUBufferManager.PrimitiveTypes; // ----------------------------------------------------------------------------\n// vtkWebGPUPolyDataMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUPolyDataMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUPolyDataMapper');\n\n  publicAPI.createCellArrayMapper = function () {\n    return vtkWebGPUCellArrayMapper.newInstance();\n  };\n\n  publicAPI.buildPass = function (prepass) {\n    if (prepass) {\n      model.WebGPUActor = publicAPI.getFirstAncestorOfType('vtkWebGPUActor');\n\n      if (!model.renderable.getStatic()) {\n        model.renderable.update();\n      }\n\n      var poly = model.renderable.getInputData();\n      model.renderable.mapScalars(poly, 1.0);\n      publicAPI.updateCellArrayMappers(poly);\n    }\n  };\n\n  publicAPI.updateCellArrayMappers = function (poly) {\n    var prims = [poly.getVerts(), poly.getLines(), poly.getPolys(), poly.getStrips()]; // we instantiate a cell array mapper for each cellArray that has cells\n    // and they handle the rendering of that cell array\n\n    var cellMappers = [];\n    var cellOffset = 0;\n\n    for (var i = PrimitiveTypes.Points; i <= PrimitiveTypes.Triangles; i++) {\n      if (prims[i].getNumberOfValues() > 0) {\n        if (!model.primitives[i]) {\n          model.primitives[i] = publicAPI.createCellArrayMapper();\n        }\n\n        var cellMapper = model.primitives[i];\n        cellMapper.setCellArray(prims[i]);\n        cellMapper.setCurrentInput(poly);\n        cellMapper.setCellOffset(cellOffset);\n        cellMapper.setPrimitiveType(i);\n        cellMapper.setRenderable(model.renderable);\n        cellOffset += prims[i].getNumberOfCells();\n        cellMappers.push(cellMapper);\n      } else {\n        model.primitives[i] = null;\n      }\n    }\n\n    if (model.WebGPUActor.getRenderable().getProperty().getEdgeVisibility()) {\n      for (var _i = PrimitiveTypes.TriangleEdges; _i <= PrimitiveTypes.TriangleStripEdges; _i++) {\n        if (prims[_i - 2].getNumberOfValues() > 0) {\n          if (!model.primitives[_i]) {\n            model.primitives[_i] = publicAPI.createCellArrayMapper();\n          }\n\n          var _cellMapper = model.primitives[_i];\n\n          _cellMapper.setCellArray(prims[_i - 2]);\n\n          _cellMapper.setCurrentInput(poly);\n\n          _cellMapper.setCellOffset(model.primitives[_i - 2].getCellOffset());\n\n          _cellMapper.setPrimitiveType(_i);\n\n          _cellMapper.setRenderable(model.renderable);\n\n          cellMappers.push(_cellMapper);\n        } else {\n          model.primitives[_i] = null;\n        }\n      }\n    }\n\n    publicAPI.prepareNodes();\n    publicAPI.addMissingChildren(cellMappers);\n    publicAPI.removeUnusedNodes();\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  primitives: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.primitives = []; // Object methods\n\n  vtkWebGPUPolyDataMapper(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkWebGPUPolyDataMapper'); // ----------------------------------------------------------------------------\n\nvar vtkWebGPUPolyDataMapper$1 = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to WebGPU backend if imported\n\nregisterOverride('vtkMapper', newInstance);\n\nexport { vtkWebGPUPolyDataMapper$1 as default, extend, newInstance };\n", "import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { newInstance as newInstance$1 } from '../../macros.js';\nimport vtkWebGPUBufferManager from './BufferManager.js';\nimport vtkWebGPUCellArrayMapper from './CellArrayMapper.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar PrimitiveTypes = vtkWebGPUBufferManager.PrimitiveTypes; // ----------------------------------------------------------------------------\n// vtkWebGPUPolyDataMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUPolyDataMapper2D(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUPolyDataMapper2D');\n\n  publicAPI.createCellArrayMapper = function () {\n    return vtkWebGPUCellArrayMapper.newInstance();\n  };\n\n  publicAPI.buildPass = function (prepass) {\n    if (prepass) {\n      model.WebGPUActor = publicAPI.getFirstAncestorOfType('vtkWebGPUActor2D');\n\n      if (!model.renderable.getStatic()) {\n        model.renderable.update();\n      }\n\n      var poly = model.renderable.getInputData();\n      model.renderable.mapScalars(poly, 1.0);\n      publicAPI.updateCellArrayMappers(poly);\n    }\n  };\n\n  publicAPI.updateCellArrayMappers = function (poly) {\n    var prims = [poly.getVerts(), poly.getLines(), poly.getPolys(), poly.getStrips()]; // we instantiate a cell array mapper for each cellArray that has cells\n    // and they handle the rendering of that cell array\n\n    var cellMappers = [];\n    var cellOffset = 0;\n\n    for (var i = PrimitiveTypes.Points; i <= PrimitiveTypes.Triangles; i++) {\n      if (prims[i].getNumberOfValues() > 0) {\n        if (!model.primitives[i]) {\n          model.primitives[i] = publicAPI.createCellArrayMapper();\n        }\n\n        var cellMapper = model.primitives[i];\n        cellMapper.setCellArray(prims[i]);\n        cellMapper.setCurrentInput(poly);\n        cellMapper.setCellOffset(cellOffset);\n        cellMapper.setPrimitiveType(i);\n        cellMapper.setRenderable(model.renderable);\n        cellMapper.setIs2D(true);\n        cellOffset += prims[i].getNumberOfCells();\n        cellMappers.push(cellMapper);\n      } else {\n        model.primitives[i] = null;\n      }\n    }\n\n    publicAPI.prepareNodes();\n    publicAPI.addMissingChildren(cellMappers);\n    publicAPI.removeUnusedNodes();\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nfunction defaultValues(initialValues) {\n  return _objectSpread({\n    primitives: []\n  }, initialValues);\n} // ----------------------------------------------------------------------------\n\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, defaultValues(initialValues)); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.primitives = []; // Object methods\n\n  vtkWebGPUPolyDataMapper2D(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkWebGPUPolyDataMapper2D'); // ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to WebGPU backend if imported\n\nregisterOverride('vtkMapper2D', newInstance);\n\nexport { index as default, extend, newInstance };\n", "import { newInstance as newInstance$1 } from '../../macros.js';\nimport vtkScalarBarActor from '../Core/ScalarBarActor.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// vtkWebGPUScalarBarActor methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUScalarBarActor(publicAPI, model) {\n  model.classHierarchy.push('vtkWebGPUScalarBarActor'); // Builds myself.\n\n  publicAPI.buildPass = function (prepass) {\n    if (prepass) {\n      model.WebGPURenderer = publicAPI.getFirstAncestorOfType('vtkWebGPURenderer');\n      model.WebGPURenderWindow = model.WebGPURenderer.getParent();\n\n      if (!model.scalarBarActorHelper.getRenderable()) {\n        model.scalarBarActorHelper.setRenderable(model.renderable);\n      }\n\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.scalarBarActorHelper.getBarActor());\n      publicAPI.addMissingNode(model.scalarBarActorHelper.getTmActor());\n      publicAPI.removeUnusedNodes();\n    }\n  };\n\n  publicAPI.opaquePass = function (prepass, renderPass) {\n    if (prepass) {\n      var camera = model.WebGPURenderer ? model.WebGPURenderer.getRenderable().getActiveCamera() : null;\n      var tsize = model.WebGPURenderer.getTiledSizeAndOrigin();\n      model.scalarBarActorHelper.updateAPISpecificData([tsize.usize, tsize.vsize], camera, model.WebGPURenderWindow.getRenderable());\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.scalarBarActorHelper = vtkScalarBarActor.newScalarBarActorHelper(); // Object methods\n\n  vtkWebGPUScalarBarActor(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkWebGPUScalarBarActor'); // ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to WebGPU backend if imported\n\nregisterOverride('vtkScalarBarActor', newInstance);\n\nexport { index as default, extend, newInstance };\n"],
  "mappings": "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",
  "names": ["newInstance", "newInstance", "DEFAULT_VALUES", "extend", "newInstance", "newInstance", "extend", "newInstance", "DEFAULT_VALUES", "extend", "newInstance", "newInstance", "Representation", "vtkErrorMacro", "DEFAULT_VALUES", "extend", "newInstance", "newInstance", "ScalarMode", "DEFAULT_VALUES", "extend", "newInstance", "Constants", "primTypes", "ScalarMode", "vtkErrorMacro", "StartEvent", "EndEvent", "DEFAULT_VALUES", "extend", "newInstance", "newInstance", "DEFAULT_VALUES", "extend", "newInstance", "newInstance", "vtkErrorMacro", "DEFAULT_VALUES", "extend", "newInstance", "newInstance", "CoordinateSystem", "DEFAULT_VALUES", "extend", "newInstance", "registerOverride", "newInstance", "CoordinateSystem", "DEFAULT_VALUES", "extend", "newInstance", "registerOverride", "newInstance", "DEFAULT_VALUES", "extend", "newInstance", "registerOverride", "newInstance", "ownKeys", "_objectSpread", "DisplayLocation", "Constants", "DEFAULT_VALUES", "extend", "newInstance", "Representation", "ScalarMode", "CoordinateSystem", "DisplayLocation", "checkDims", "DEFAULT_VALUES", "extend", "newInstance", "PrimitiveTypes", "DEFAULT_VALUES", "extend", "newInstance", "registerOverride", "newInstance", "ownKeys", "_objectSpread", "PrimitiveTypes", "defaultValues", "extend", "newInstance", "registerOverride", "newInstance", "DEFAULT_VALUES", "extend", "newInstance", "registerOverride", "newInstance"]
}
