import {
  styleInject
} from "./chunk-XK2Y52IZ.js";
import {
  macro
} from "./chunk-OTTIIP4A.js";
import {
  _defineProperty
} from "./chunk-HKWV5KNA.js";
import "./chunk-XL65WI7U.js";
import "./chunk-HUBM7RA2.js";

// node_modules/@kitware/vtk.js/Interaction/UI/FPSMonitor/FPSMonitor.module.css.js
var css_248z = ".FPSMonitor-module_verticalContainer__1oES5 {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: stretch;\n}\n\n.FPSMonitor-module_horizontalContainer__3dO_q {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n}\n\n.FPSMonitor-module_leftPane__3PHsp {\n  flex: none;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: stretch;\n}\n\n.FPSMonitor-module_rightPane__30Een {\n  flex: 1;\n  display: grid;\n  grid-template-columns: auto auto;\n  grid-auto-rows: 1.5em;\n  grid-column-gap: 5px;\n  grid-row-gap: 2px;\n  padding: 10px;\n}\n\n.FPSMonitor-module_title__3a5vQ {\n  flex: 1;\n  font-weight: bold;\n  padding: 5px 10px 0 10px;\n}\n\n.FPSMonitor-module_graph__lvtIQ {\n  flex: none;\n  border: solid 1px black;\n  margin: 10px ;\n  border-radius: 2px;\n  overflow: hidden;\n}\n\n.FPSMonitor-module_label__3saqc {\n  font-weight: bold;\n  text-transform: capitalize;\n  text-align: right;\n  align-self: center;\n}\n\n.FPSMonitor-module_value__2WrfF {\n  font-style: italic;\n  text-align: center;\n  align-self: center;\n}\n";
var style = { "verticalContainer": "FPSMonitor-module_verticalContainer__1oES5", "horizontalContainer": "FPSMonitor-module_horizontalContainer__3dO_q", "leftPane": "FPSMonitor-module_leftPane__3PHsp", "rightPane": "FPSMonitor-module_rightPane__30Een", "title": "FPSMonitor-module_title__3a5vQ", "graph": "FPSMonitor-module_graph__lvtIQ", "label": "FPSMonitor-module_label__3saqc", "value": "FPSMonitor-module_value__2WrfF" };
styleInject(css_248z);

// node_modules/@kitware/vtk.js/Interaction/UI/FPSMonitor.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var noOp = Function.prototype;
function formatNumbers(n) {
  var sections = [];
  var size = n;
  while (size > 1e3) {
    sections.push("000".concat(size % 1e3).slice(-3));
    size = Math.floor(size / 1e3);
  }
  if (size > 0) {
    sections.push(size);
  }
  sections.reverse();
  return sections.join("'");
}
function vtkFPSMonitor(publicAPI, model) {
  model.classHierarchy.push("vtkFPSMonitor");
  model.fpsMonitorContainer = document.createElement("div");
  model.fpsMonitorContainer.setAttribute("class", model.orientationClass);
  model.fpsMonitorContainer.innerHTML = '\n    <div class="'.concat(style.leftPane, '">\n      <div class="js-title ').concat(style.title, '">Mean N/A - Current N/A</div>\n      <canvas class="js-graph ').concat(style.graph, '"></canvas>\n    </div>\n    <div class="js-info ').concat(style.rightPane, '">\n    </div>');
  model.canvas = model.fpsMonitorContainer.querySelector(".js-graph");
  model.title = model.fpsMonitorContainer.querySelector(".js-title");
  model.info = model.fpsMonitorContainer.querySelector(".js-info");
  function renderTitle() {
    model.title.style.display = model.titleVisibility ? "block" : "none";
    if (!model.titleVisibility) {
      return;
    }
    var nextFPS = model.buffer[model.buffer.length - 1];
    var newTxt = "Mean: ".concat(Math.round(model.fpsSum / model.buffer.length), " - Current: ").concat(Math.round(nextFPS));
    if (newTxt !== model.lastText) {
      model.lastText = newTxt;
      model.title.innerHTML = newTxt;
    }
  }
  function renderInfo() {
    model.info.style.display = model.infoVisibility ? "grid" : "none";
    if (!model.infoVisibility) {
      return;
    }
    var infoItems = [];
    if (model.renderWindow) {
      var realView = model.renderWindow.getViews()[0];
      if (realView && realView.getSize) {
        infoItems.push('<label class="'.concat(style.label, '">Resolution</label><span class="').concat(style.value, '">').concat(realView.getSize().join("x"), "</span>"));
      }
      var stats = _objectSpread(_objectSpread({}, model.renderWindow.getStatistics()), model.addOnStats);
      var keys = Object.keys(stats);
      keys.sort();
      for (var i = 0; i < keys.length; i++) {
        if (keys[i] === "str") {
          continue;
        }
        if (stats[keys[i]]) {
          infoItems.push('<label class="'.concat(style.label, '">').concat(keys[i], '</label><span class="').concat(style.value, '">').concat(formatNumbers(stats[keys[i]]), "</span>"));
        }
      }
    }
    model.info.innerHTML = infoItems.join("");
  }
  function renderCanvas() {
    model.canvas.style.display = model.canvasVisibility ? "block" : "none";
    if (!model.canvasVisibility) {
      return;
    }
    model.canvas.setAttribute("width", model.bufferSize);
    model.canvas.setAttribute("height", model.graphHeight);
    var ctx = model.canvas.getContext("2d");
    var _model$canvas = model.canvas, width = _model$canvas.width, height = _model$canvas.height;
    ctx.clearRect(0, 0, width, height);
    ctx.strokeStyle = "green";
    ctx.beginPath();
    ctx.moveTo(0, height - model.buffer[0]);
    for (var i = 1; i < model.buffer.length; i++) {
      ctx.lineTo(i, height - model.buffer[i]);
    }
    ctx.stroke();
    ctx.strokeStyle = "black";
    ctx.beginPath();
    ctx.moveTo(0, height - 60);
    ctx.lineTo(width, height - 60);
    ctx.stroke();
  }
  function frameChanged() {
    if (!model.interactor) {
      return;
    }
    var nextFPS = 1 / model.interactor.getLastFrameTime();
    model.buffer.push(nextFPS);
    model.fpsSum += nextFPS;
    while (model.buffer.length > model.bufferSize) {
      model.fpsSum -= model.buffer.shift();
    }
    renderTitle();
    renderCanvas();
  }
  publicAPI.update = function() {
    publicAPI.render();
  };
  publicAPI.setRenderWindow = function(rw) {
    while (model.subscriptions.length) {
      model.subscriptions.pop().unsubscribe();
    }
    model.renderWindow = rw;
    model.interactor = rw ? rw.getInteractor() : null;
    if (model.interactor) {
      model.subscriptions.push(model.interactor.onAnimation(frameChanged));
    }
  };
  publicAPI.setContainer = function(el) {
    if (model.container && model.container !== el) {
      model.container.removeChild(model.fpsMonitorContainer);
    }
    if (model.container !== el) {
      model.container = el;
      if (model.container) {
        model.container.appendChild(model.fpsMonitorContainer);
        publicAPI.resize();
      }
      publicAPI.modified();
    }
  };
  publicAPI.render = function() {
    renderTitle();
    renderInfo();
    renderCanvas();
  };
  publicAPI.resize = noOp;
  publicAPI.setOrientationToHorizontal = function() {
    model.fpsMonitorContainer.classList.remove(model.orientationClass);
    model.orientationClass = style.horizontalContainer;
    model.fpsMonitorContainer.classList.add(model.orientationClass);
  };
  publicAPI.setOrientationToVertical = function() {
    model.fpsMonitorContainer.classList.remove(model.orientationClass);
    model.orientationClass = style.verticalContainer;
    model.fpsMonitorContainer.classList.add(model.orientationClass);
  };
  publicAPI.setOrientation = function() {
    var mode = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "horizontal";
    if (mode === "horizontal") {
      publicAPI.setOrientationToHorizontal();
    } else {
      publicAPI.setOrientationToVertical();
    }
  };
  publicAPI.setAddOnStats = function(addOn) {
    if (!model.addOnStats) {
      model.addOnStats = {};
    }
    Object.assign(model.addOnStats, addOn);
    renderInfo();
  };
  publicAPI.setMonitorVisibility = function() {
    var title = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
    var graph = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    var info = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    publicAPI.setCanvasVisibility(graph);
    publicAPI.setInfoVisibility(info);
    publicAPI.setTitleVisibility(title);
  };
  var superDelete = publicAPI.delete;
  publicAPI.delete = function() {
    publicAPI.setRenderWindow(null);
    publicAPI.setContainer(null);
    superDelete();
  };
  model.subscriptions.push(publicAPI.onModified(publicAPI.update));
}
var DEFAULT_VALUES = {
  bufferSize: 200,
  graphHeight: 120,
  buffer: [60],
  subscriptions: [],
  fpsSum: 0,
  orientationClass: style.horizontalContainer,
  canvasVisibility: true,
  titleVisibility: true,
  infoVisibility: true
};
function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues);
  macro.obj(publicAPI, model);
  macro.get(publicAPI, model, ["fpsMonitorContainer", "renderWindow", "addOnStats"]);
  macro.setGet(publicAPI, model, ["bufferSize", "canvasVisibility", "infoVisibility", "titleVisibility"]);
  vtkFPSMonitor(publicAPI, model);
}
var newInstance = macro.newInstance(extend, "vtkFPSMonitor");
var vtkFPSMonitor$1 = {
  newInstance,
  extend
};

// dep:@kitware_vtk__js_Interaction_UI_FPSMonitor
var kitware_vtk_js_Interaction_UI_FPSMonitor_default = vtkFPSMonitor$1;
export {
  kitware_vtk_js_Interaction_UI_FPSMonitor_default as default,
  extend,
  newInstance
};
//# sourceMappingURL=@kitware_vtk__js_Interaction_UI_FPSMonitor.js.map
