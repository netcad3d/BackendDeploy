{
  "version": 3,
  "sources": ["../../@kitware/vtk.js/IO/Legacy/LegacyAsciiParser.js", "../../@kitware/vtk.js/IO/Legacy/PolyDataReader.js", "dep:@kitware_vtk__js_IO_Legacy_PolyDataReader"],
  "sourcesContent": ["import _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\n\nvar METHOD_MAPPING = {\n  POINTS: 'getPoints',\n  VERTICES: 'getVerts',\n  LINES: 'getLines',\n  TRIANGLE_STRIPS: 'getStrips',\n  POLYGONS: 'getPolys',\n  POINT_DATA: 'getPointData',\n  CELL_DATA: 'getCellData',\n  FIELD: 'getFieldData'\n};\nvar DATATYPES = {\n  bit: Uint8Array,\n  unsigned_char: Uint8Array,\n  char: Int8Array,\n  unsigned_short: Uint16Array,\n  short: Int16Array,\n  unsigned_int: Uint32Array,\n  int: Int32Array,\n  unsigned_long: Uint32Array,\n  long: Int32Array,\n  float: Float32Array,\n  double: Float64Array\n};\nvar REGISTER_MAPPING = {\n  SCALARS: 'addArray',\n  COLOR_SCALARS: 'addArray',\n  VECTORS: 'setVectors',\n  NORMALS: 'setNormals',\n  TEXTURE_COORDINATES: 'setTCoords',\n  TENSORS: 'setTensors',\n  FIELD: 'addArray'\n};\n\nfunction createArrayHandler(array, setData, nbComponents) {\n  var offset = 0;\n\n  function fillWith(line) {\n    line.split(' ').forEach(function (token) {\n      if (token.length) {\n        array[offset++] = Number(token);\n      }\n    });\n\n    if (offset < array.length) {\n      return true;\n    }\n\n    setData(array, nbComponents);\n    return false;\n  }\n\n  return fillWith;\n}\n\nvar GENERIC_CELL_HANDLER = {\n  init: function init(line, dataModel) {\n    var _line$split = line.split(' '),\n        _line$split2 = _slicedToArray(_line$split, 3),\n        name = _line$split2[0],\n        nbCells = _line$split2[1],\n        nbValues = _line$split2[2];\n\n    var cellArray = dataModel.dataset[METHOD_MAPPING[name]]();\n    cellArray.set({\n      numberOfCells: Number(nbCells)\n    }, true); // Force numberOfCells update\n\n    dataModel.arrayHandler = createArrayHandler(new Uint32Array(Number(nbValues)), cellArray.setData, 1);\n    return true;\n  },\n  parse: function parse(line, dataModel) {\n    return dataModel.arrayHandler(line);\n  }\n};\nvar TYPE_PARSER = {\n  DATASET: {\n    init: function init(line, datamodel) {\n      var type = line.split(' ')[1];\n\n      switch (type) {\n        case 'POLYDATA':\n          datamodel.dataset = vtkPolyData.newInstance();\n          break;\n\n        default:\n          console.error(\"Dataset of type \".concat(type, \" not supported\"));\n      }\n\n      return false;\n    },\n    parse: function parse(line, datamodel) {\n      return false;\n    }\n  },\n  POINTS: {\n    init: function init(line, dataModel) {\n      var _line$split3 = line.split(' '),\n          _line$split4 = _slicedToArray(_line$split3, 3),\n          name = _line$split4[0],\n          size = _line$split4[1],\n          type = _line$split4[2];\n\n      var array = type === 'float' ? new Float32Array(3 * Number(size)) : new Float64Array(3 * Number(size));\n      var dataArray = dataModel.dataset.getPoints();\n      dataArray.setName(name);\n      dataModel.arrayHandler = createArrayHandler(array, dataArray.setData, 3);\n      return true;\n    },\n    parse: function parse(line, dataModel) {\n      return dataModel.arrayHandler(line);\n    }\n  },\n  METADATA: {\n    init: function init(line, dataModel) {\n      return true;\n    },\n    parse: function parse(line, dataModel) {\n      return !!line.length;\n    }\n  },\n  VERTICES: GENERIC_CELL_HANDLER,\n  LINES: GENERIC_CELL_HANDLER,\n  TRIANGLE_STRIPS: GENERIC_CELL_HANDLER,\n  POLYGONS: GENERIC_CELL_HANDLER,\n  POINT_DATA: {\n    init: function init(line, dataModel) {\n      dataModel.POINT_DATA = Number(line.split(' ')[1]);\n      dataModel.activeFieldLocation = 'POINT_DATA';\n      return false;\n    },\n    parse: function parse(line, dataModel) {\n      return false;\n    }\n  },\n  CELL_DATA: {\n    init: function init(line, dataModel) {\n      dataModel.CELL_DATA = Number(line.split(' ')[1]);\n      dataModel.activeFieldLocation = 'CELL_DATA';\n      return false;\n    },\n    parse: function parse(line, dataModel) {\n      return false;\n    }\n  },\n  SCALARS: {\n    init: function init(line, dataModel) {\n      var _line$split5 = line.split(' '),\n          _line$split6 = _slicedToArray(_line$split5, 4),\n          type = _line$split6[0],\n          name = _line$split6[1],\n          dataType = _line$split6[2],\n          numComp = _line$split6[3];\n\n      var numOfComp = Number(numComp) > 0 ? Number(numComp) : 1;\n      var size = dataModel[dataModel.activeFieldLocation] * numOfComp;\n      var array = new DATATYPES[dataType](size);\n      var dataArray = vtkDataArray.newInstance({\n        name: name,\n        empty: true\n      });\n      dataModel.dataset[METHOD_MAPPING[dataModel.activeFieldLocation]]()[REGISTER_MAPPING[type]](dataArray);\n      dataModel.arrayHandler = createArrayHandler(array, dataArray.setData, numOfComp);\n      return true;\n    },\n    parse: function parse(line, dataModel) {\n      if (line.split(' ')[0] === 'LOOKUP_TABLE') {\n        return true;\n      }\n\n      return dataModel.arrayHandler(line);\n    }\n  },\n  COLOR_SCALARS: {\n    init: function init(line, dataModel) {\n      var _line$split7 = line.split(' '),\n          _line$split8 = _slicedToArray(_line$split7, 3),\n          type = _line$split8[0],\n          name = _line$split8[1],\n          numComp = _line$split8[2];\n\n      var numOfComp = Number(numComp) > 0 ? Number(numComp) : 1;\n      var size = dataModel[dataModel.activeFieldLocation] * numOfComp;\n      var array = new Uint8Array(size);\n      var dataArray = vtkDataArray.newInstance({\n        name: name,\n        empty: true\n      });\n      dataModel.dataset[METHOD_MAPPING[dataModel.activeFieldLocation]]()[REGISTER_MAPPING[type]](dataArray);\n      dataModel.arrayHandler = createArrayHandler(array, dataArray.setData, numOfComp);\n      return true;\n    },\n    parse: function parse(line, dataModel) {\n      if (line.split(' ')[0] === 'LOOKUP_TABLE') {\n        return true;\n      }\n\n      return dataModel.arrayHandler(line);\n    }\n  },\n  VECTORS: {\n    init: function init(line, dataModel) {\n      var _line$split9 = line.split(' '),\n          _line$split10 = _slicedToArray(_line$split9, 3),\n          type = _line$split10[0],\n          name = _line$split10[1],\n          dataType = _line$split10[2];\n\n      var size = dataModel[dataModel.activeFieldLocation] * 3;\n      var array = new DATATYPES[dataType](size);\n      var dataArray = vtkDataArray.newInstance({\n        name: name,\n        empty: true\n      });\n      dataModel.dataset[METHOD_MAPPING[dataModel.activeFieldLocation]]()[REGISTER_MAPPING[type]](dataArray);\n      dataModel.arrayHandler = createArrayHandler(array, dataArray.setData, 3);\n      return true;\n    },\n    parse: function parse(line, dataModel) {\n      return dataModel.arrayHandler(line);\n    }\n  },\n  NORMALS: {\n    init: function init(line, dataModel) {\n      var _line$split11 = line.split(' '),\n          _line$split12 = _slicedToArray(_line$split11, 2),\n          type = _line$split12[0],\n          name = _line$split12[1];\n\n      var size = dataModel[dataModel.activeFieldLocation] * 3;\n      var array = new Float32Array(size);\n      var dataArray = vtkDataArray.newInstance({\n        name: name,\n        empty: true\n      });\n      dataModel.dataset[METHOD_MAPPING[dataModel.activeFieldLocation]]()[REGISTER_MAPPING[type]](dataArray);\n      dataModel.arrayHandler = createArrayHandler(array, dataArray.setData, 3);\n      return true;\n    },\n    parse: function parse(line, dataModel) {\n      return dataModel.arrayHandler(line);\n    }\n  },\n  TEXTURE_COORDINATES: {\n    init: function init(line, dataModel) {\n      var _line$split13 = line.split(' '),\n          _line$split14 = _slicedToArray(_line$split13, 4),\n          type = _line$split14[0],\n          name = _line$split14[1],\n          numberOfComponents = _line$split14[2],\n          dataType = _line$split14[3];\n\n      var size = dataModel[dataModel.activeFieldLocation] * Number(numberOfComponents);\n      var array = new DATATYPES[dataType](size);\n      var dataArray = vtkDataArray.newInstance({\n        name: name,\n        empty: true\n      });\n      dataModel.dataset[METHOD_MAPPING[dataModel.activeFieldLocation]]()[REGISTER_MAPPING[type]](dataArray);\n      dataModel.arrayHandler = createArrayHandler(array, dataArray.setData, 3);\n      return true;\n    },\n    parse: function parse(line, dataModel) {\n      return dataModel.arrayHandler(line);\n    }\n  },\n  TENSORS: {\n    init: function init(line, dataModel) {\n      var _line$split15 = line.split(' '),\n          _line$split16 = _slicedToArray(_line$split15, 3),\n          type = _line$split16[0],\n          name = _line$split16[1],\n          dataType = _line$split16[2];\n\n      var size = dataModel[dataModel.activeFieldLocation] * 9;\n      var array = new DATATYPES[dataType](size);\n      var dataArray = vtkDataArray.newInstance({\n        name: name,\n        empty: true\n      });\n      dataModel.dataset[METHOD_MAPPING[dataModel.activeFieldLocation]]()[REGISTER_MAPPING[type]](dataArray);\n      dataModel.arrayHandler = createArrayHandler(array, dataArray.setData, 9);\n      return true;\n    },\n    parse: function parse(line, dataModel) {\n      return dataModel.arrayHandler(line);\n    }\n  }\n};\n\nfunction getParser(line, dataModel) {\n  var tokens = line.split(' ');\n  return TYPE_PARSER[tokens[0]];\n}\n\nfunction parseLegacyASCII(content) {\n  var dataModel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var parser = null;\n  var separatorRegExp = /\\r?\\n/;\n  var separatorRes = separatorRegExp.exec(content);\n  var separator = separatorRes !== null ? separatorRes[0] : null;\n  content.split(separator).forEach(function (line, index) {\n    if (index < 2) {\n      return;\n    }\n\n    if (!parser) {\n      parser = getParser(line);\n\n      if (!parser) {\n        return;\n      }\n\n      parser = parser.init(line, dataModel) ? parser : null;\n      return;\n    }\n\n    if (parser && !parser.parse(line, dataModel)) {\n      parser = null;\n    }\n  });\n  return dataModel;\n}\n\nvar vtkLegacyAsciiParser = {\n  parseLegacyASCII: parseLegacyASCII\n};\n\nexport { vtkLegacyAsciiParser as default };\n", "import macro from '../../macros.js';\nimport DataAccessHelper from '../Core/DataAccessHelper.js';\nimport vtkLegacyAsciiParser from './LegacyAsciiParser.js';\nimport '../Core/DataAccessHelper/LiteHttpDataAccessHelper.js';\n\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HttpDataAccessHelper'; // HTTP + zip\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HtmlDataAccessHelper'; // html + base64 + zip\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/JSZipDataAccessHelper'; // zip\n// ----------------------------------------------------------------------------\n// vtkPolyDataReader methods\n// ----------------------------------------------------------------------------\n\nfunction vtkPolyDataReader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkPolyDataReader'); // Create default dataAccessHelper if not available\n\n  if (!model.dataAccessHelper) {\n    model.dataAccessHelper = DataAccessHelper.get('http');\n  } // Internal method to fetch Array\n\n\n  function fetchData(url) {\n    var compression = model.compression,\n        progressCallback = model.progressCallback;\n    return model.dataAccessHelper.fetchText(publicAPI, url, {\n      compression: compression,\n      progressCallback: progressCallback\n    });\n  } // Set DataSet url\n\n\n  publicAPI.setUrl = function (url) {\n    var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    model.url = url; // Remove the file in the URL\n\n    var path = url.split('/');\n    path.pop();\n    model.baseURL = path.join('/');\n    model.compression = option.compression; // Fetch metadata\n\n    return publicAPI.loadData({\n      progressCallback: option.progressCallback\n    });\n  }; // Fetch the actual data arrays\n\n\n  publicAPI.loadData = function () {\n    var promise = fetchData(model.url);\n    promise.then(publicAPI.parseAsText);\n    return promise;\n  };\n\n  publicAPI.parseAsText = function (content) {\n    if (!content) {\n      return;\n    }\n\n    if (content !== model.parseData) {\n      publicAPI.modified();\n    } else {\n      return;\n    }\n\n    model.parseData = content;\n    model.output[0] = vtkLegacyAsciiParser.parseLegacyASCII(model.parseData).dataset;\n  };\n\n  publicAPI.requestData = function (inData, outData) {\n    publicAPI.parseAsText(model.parseData);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {// baseURL: null,\n  // dataAccessHelper: null,\n  // url: null,\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['url', 'baseURL']);\n  macro.setGet(publicAPI, model, ['dataAccessHelper']);\n  macro.algo(publicAPI, model, 0, 1); // vtkPolyDataReader methods\n\n  vtkPolyDataReader(publicAPI, model); // To support destructuring\n\n  if (!model.compression) {\n    model.compression = null;\n  }\n\n  if (!model.progressCallback) {\n    model.progressCallback = null;\n  }\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkPolyDataReader'); // ----------------------------------------------------------------------------\n\nvar vtkPolyDataReader$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkPolyDataReader$1 as default, extend, newInstance };\n", "import d from \"./node_modules/@kitware/vtk.js/IO/Legacy/PolyDataReader.js\";export default d;\nexport * from \"./node_modules/@kitware/vtk.js/IO/Legacy/PolyDataReader.js\""],
  "mappings": "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",
  "names": ["init", "parse"]
}
