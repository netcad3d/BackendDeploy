{
  "version": 3,
  "sources": ["../../@kitware/vtk.js/Common/DataModel/Plane.js"],
  "sourcesContent": ["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { s as subtract, d as dot, k as cross, l as add } from '../Core/Math/index.js';\nimport macro from '../../macros.js';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar PLANE_TOLERANCE = 1.0e-6;\nvar COINCIDE = 'coincide';\nvar DISJOINT = 'disjoint'; // ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\nfunction evaluate(normal, origin, x) {\n  return normal[0] * (x[0] - origin[0]) + normal[1] * (x[1] - origin[1]) + normal[2] * (x[2] - origin[2]);\n}\n\nfunction distanceToPlane(x, origin, normal) {\n  var distance = normal[0] * (x[0] - origin[0]) + normal[1] * (x[1] - origin[1]) + normal[2] * (x[2] - origin[2]);\n  return Math.abs(distance);\n}\n\nfunction projectPoint(x, origin, normal, xproj) {\n  var xo = [];\n  subtract(x, origin, xo);\n  var t = dot(normal, xo);\n  xproj[0] = x[0] - t * normal[0];\n  xproj[1] = x[1] - t * normal[1];\n  xproj[2] = x[2] - t * normal[2];\n}\n\nfunction projectVector(v, normal, vproj) {\n  var t = dot(v, normal);\n  var n2 = dot(normal, normal);\n\n  if (n2 === 0) {\n    n2 = 1.0;\n  }\n\n  vproj[0] = v[0] - t * normal[0] / n2;\n  vproj[1] = v[1] - t * normal[1] / n2;\n  vproj[2] = v[2] - t * normal[2] / n2;\n  return vproj;\n}\n\nfunction generalizedProjectPoint(x, origin, normal, xproj) {\n  var xo = [];\n  subtract(x, origin, xo);\n  var t = dot(normal, xo);\n  var n2 = dot(normal, normal);\n\n  if (n2 !== 0) {\n    xproj[0] = x[0] - t * normal[0] / n2;\n    xproj[1] = x[1] - t * normal[1] / n2;\n    xproj[2] = x[2] - t * normal[2] / n2;\n  } else {\n    xproj[0] = x[0];\n    xproj[1] = x[1];\n    xproj[2] = x[2];\n  }\n}\n\nfunction intersectWithLine(p1, p2, origin, normal) {\n  var outObj = {\n    intersection: false,\n    betweenPoints: false,\n    t: Number.MAX_VALUE,\n    x: []\n  };\n  var p21 = [];\n  var p1Origin = []; // Compute line vector\n\n  subtract(p2, p1, p21);\n  subtract(origin, p1, p1Origin); // Compute denominator.  If ~0, line and plane are parallel.\n  // const num = vtkMath.dot(normal, origin) - vtkMath.dot(normal, p1);\n\n  var num = dot(normal, p1Origin);\n  var den = dot(normal, p21); // If denominator with respect to numerator is \"zero\", then the line and\n  // plane are considered parallel.\n\n  var fabsden;\n  var fabstolerance; // Trying to avoid an expensive call to fabs()\n\n  if (den < 0.0) {\n    fabsden = -den;\n  } else {\n    fabsden = den;\n  }\n\n  if (num < 0.0) {\n    fabstolerance = -num * PLANE_TOLERANCE;\n  } else {\n    fabstolerance = num * PLANE_TOLERANCE;\n  }\n\n  if (fabsden <= fabstolerance) {\n    return outObj;\n  } // Where on the line between p1 and p2 is the intersection\n  // If between 0 and 1, it is between the two points. If < 0 it's before p1, if > 1 it's after p2\n\n\n  outObj.t = num / den;\n  outObj.x[0] = p1[0] + outObj.t * p21[0];\n  outObj.x[1] = p1[1] + outObj.t * p21[1];\n  outObj.x[2] = p1[2] + outObj.t * p21[2];\n  outObj.intersection = true;\n  outObj.betweenPoints = outObj.t >= 0.0 && outObj.t <= 1.0;\n  return outObj;\n}\n\nfunction intersectWithPlane(plane1Origin, plane1Normal, plane2Origin, plane2Normal) {\n  var outObj = {\n    intersection: false,\n    l0: [],\n    l1: [],\n    error: null\n  };\n  var cross$1 = [];\n  cross(plane1Normal, plane2Normal, cross$1);\n  var absCross = cross$1.map(function (n) {\n    return Math.abs(n);\n  }); // test if the two planes are parallel\n\n  if (absCross[0] + absCross[1] + absCross[2] < PLANE_TOLERANCE) {\n    // test if disjoint or coincide\n    var v = [];\n    subtract(plane1Origin, plane2Origin, v);\n\n    if (dot(plane1Normal, v) === 0) {\n      outObj.error = COINCIDE;\n    } else {\n      outObj.error = DISJOINT;\n    }\n\n    return outObj;\n  } // Plane1 and Plane2 intersect in a line\n  // first determine max abs coordinate of the cross product\n\n\n  var maxc;\n\n  if (absCross[0] > absCross[1] && absCross[0] > absCross[2]) {\n    maxc = 'x';\n  } else if (absCross[1] > absCross[2]) {\n    maxc = 'y';\n  } else {\n    maxc = 'z';\n  } // To get a point on the intersect line, zero the max coord, and solve for the other two\n\n\n  var iP = []; // intersectionPoint\n  // the constants in the 2 plane equations\n\n  var d1 = -dot(plane1Normal, plane1Origin);\n  var d2 = -dot(plane2Normal, plane2Origin); // eslint-disable-next-line default-case\n\n  switch (maxc) {\n    case 'x':\n      // intersect with x=0\n      iP[0] = 0;\n      iP[1] = (d2 * plane1Normal[2] - d1 * plane2Normal[2]) / cross$1[0];\n      iP[2] = (d1 * plane2Normal[1] - d2 * plane1Normal[1]) / cross$1[0];\n      break;\n\n    case 'y':\n      // intersect with y=0\n      iP[0] = (d1 * plane2Normal[2] - d2 * plane1Normal[2]) / cross$1[1];\n      iP[1] = 0;\n      iP[2] = (d2 * plane1Normal[0] - d1 * plane2Normal[0]) / cross$1[1];\n      break;\n\n    case 'z':\n      // intersect with z=0\n      iP[0] = (d2 * plane1Normal[1] - d1 * plane2Normal[1]) / cross$1[2];\n      iP[1] = (d1 * plane2Normal[0] - d2 * plane1Normal[0]) / cross$1[2];\n      iP[2] = 0;\n      break;\n  }\n\n  outObj.l0 = iP;\n  add(iP, cross$1, outObj.l1);\n  outObj.intersection = true;\n  return outObj;\n} // ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\n\nvar STATIC = {\n  evaluate: evaluate,\n  distanceToPlane: distanceToPlane,\n  projectPoint: projectPoint,\n  projectVector: projectVector,\n  generalizedProjectPoint: generalizedProjectPoint,\n  intersectWithLine: intersectWithLine,\n  intersectWithPlane: intersectWithPlane,\n  DISJOINT: DISJOINT,\n  COINCIDE: COINCIDE\n}; // ----------------------------------------------------------------------------\n// vtkPlane methods\n// ----------------------------------------------------------------------------\n\nfunction vtkPlane(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkPlane');\n\n  publicAPI.distanceToPlane = function (x) {\n    return distanceToPlane(x, model.origin, model.normal);\n  };\n\n  publicAPI.projectPoint = function (x, xproj) {\n    projectPoint(x, model.origin, model.normal, xproj);\n  };\n\n  publicAPI.projectVector = function (v, vproj) {\n    return projectVector(v, model.normal, vproj);\n  };\n\n  publicAPI.push = function (distance) {\n    if (distance === 0.0) {\n      return;\n    }\n\n    for (var i = 0; i < 3; i++) {\n      model.origin[i] += distance * model.normal[i];\n    }\n  };\n\n  publicAPI.generalizedProjectPoint = function (x, xproj) {\n    generalizedProjectPoint(x, model.origin, model.normal, xproj);\n  };\n\n  publicAPI.evaluateFunction = function (x, y, z) {\n    if (!Array.isArray(x)) {\n      return model.normal[0] * (x - model.origin[0]) + model.normal[1] * (y - model.origin[1]) + model.normal[2] * (z - model.origin[2]);\n    }\n\n    return model.normal[0] * (x[0] - model.origin[0]) + model.normal[1] * (x[1] - model.origin[1]) + model.normal[2] * (x[2] - model.origin[2]);\n  };\n\n  publicAPI.evaluateGradient = function (xyz) {\n    var retVal = [model.normal[0], model.normal[1], model.normal[2]];\n    return retVal;\n  };\n\n  publicAPI.intersectWithLine = function (p1, p2) {\n    return intersectWithLine(p1, p2, model.origin, model.normal);\n  };\n\n  publicAPI.intersectWithPlane = function (planeOrigin, planeNormal) {\n    return intersectWithPlane(planeOrigin, planeNormal, model.origin, model.normal);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  normal: [0.0, 0.0, 1.0],\n  origin: [0.0, 0.0, 0.0]\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods\n\n  macro.obj(publicAPI, model);\n  macro.setGetArray(publicAPI, model, ['normal', 'origin'], 3);\n  vtkPlane(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkPlane'); // ----------------------------------------------------------------------------\n\nvar vtkPlane$1 = _objectSpread({\n  newInstance: newInstance,\n  extend: extend\n}, STATIC);\n\nexport { STATIC, vtkPlane$1 as default, extend, newInstance, vtkPlane };\n"],
  "mappings": "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",
  "names": []
}
