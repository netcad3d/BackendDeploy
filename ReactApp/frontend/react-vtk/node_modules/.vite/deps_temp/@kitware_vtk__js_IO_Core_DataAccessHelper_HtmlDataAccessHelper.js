import {
  Base64
} from "./chunk-RUO4W2U5.js";
import {
  decompressSync,
  strFromU8
} from "./chunk-PCBY7TQL.js";
import {
  Endian,
  registerType
} from "./chunk-2MWAGLL3.js";
import {
  DataTypeByteSize
} from "./chunk-SWDS6M4V.js";
import {
  macro
} from "./chunk-OTTIIP4A.js";
import "./chunk-HKWV5KNA.js";
import "./chunk-XL65WI7U.js";
import "./chunk-HUBM7RA2.js";

// node_modules/@kitware/vtk.js/IO/Core/DataAccessHelper/HtmlDataAccessHelper.js
var vtkErrorMacro = macro.vtkErrorMacro;
var vtkDebugMacro = macro.vtkDebugMacro;
var requestCount = 0;
function getContent(url) {
  var el = document.querySelector('.webResource[data-url="'.concat(url, '"]'));
  return el ? el.innerHTML : null;
}
function getElement(url) {
  return document.querySelector('.webResource[data-url="'.concat(url, '"]'));
}
function removeLeadingSlash(str) {
  return str[0] === "/" ? str.substr(1) : str;
}
function fetchText(instance, url) {
  return new Promise(function(resolve, reject) {
    var txt = getContent(url);
    if (txt === null) {
      reject(new Error("No such text ".concat(url)));
    } else {
      resolve(txt);
    }
  });
}
function fetchJSON(instance, url) {
  return new Promise(function(resolve, reject) {
    var txt = getContent(removeLeadingSlash(url));
    if (txt === null) {
      reject(new Error("No such JSON ".concat(url)));
    } else {
      resolve(JSON.parse(txt));
    }
  });
}
function fetchArray(instance, baseURL, array) {
  var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
  return new Promise(function(resolve, reject) {
    var url = removeLeadingSlash([baseURL, array.ref.basepath, options.compression ? "".concat(array.ref.id, ".gz") : array.ref.id].join("/"));
    var txt = getContent(url);
    if (txt === null) {
      reject(new Error("No such array ".concat(url)));
    } else {
      if (array.dataType === "string") {
        var bText = atob(txt);
        if (options.compression) {
          bText = strFromU8(decompressSync(bText));
        }
        array.values = JSON.parse(bText);
      } else {
        var uint8array = new Uint8Array(Base64.toArrayBuffer(txt));
        array.buffer = new ArrayBuffer(uint8array.length);
        var view = new Uint8Array(array.buffer);
        view.set(uint8array);
        if (options.compression) {
          if (array.dataType === "string" || array.dataType === "JSON") {
            array.buffer = strFromU8(decompressSync(new Uint8Array(array.buffer)));
          } else {
            array.buffer = decompressSync(new Uint8Array(array.buffer)).buffer;
          }
        }
        if (array.ref.encode === "JSON") {
          array.values = JSON.parse(array.buffer);
        } else {
          if (Endian.ENDIANNESS !== array.ref.encode && Endian.ENDIANNESS) {
            vtkDebugMacro("Swap bytes of ".concat(array.name));
            Endian.swapBytes(array.buffer, DataTypeByteSize[array.dataType]);
          }
          array.values = macro.newTypedArray(array.dataType, array.buffer);
        }
        if (array.values.length !== array.size) {
          vtkErrorMacro("Error in FetchArray: ".concat(array.name, " does not have the proper array size. Got ").concat(array.values.length, ", instead of ").concat(array.size));
        }
      }
      delete array.ref;
      if (--requestCount === 0 && instance !== null && instance !== void 0 && instance.invokeBusy) {
        instance.invokeBusy(false);
      }
      if (instance !== null && instance !== void 0 && instance.modified) {
        instance.modified();
      }
      resolve(array);
    }
  });
}
function fetchImage(instance, url) {
  return new Promise(function(resolve, reject) {
    var img = getElement(url);
    if (img) {
      resolve(img);
    } else {
      reject(new Error("No such image ".concat(url)));
    }
  });
}
var HtmlDataAccessHelper = {
  fetchJSON,
  fetchText,
  fetchArray,
  fetchImage
};
registerType("html", function(options) {
  return HtmlDataAccessHelper;
});

// dep:@kitware_vtk__js_IO_Core_DataAccessHelper_HtmlDataAccessHelper
var kitware_vtk_js_IO_Core_DataAccessHelper_HtmlDataAccessHelper_default = HtmlDataAccessHelper;
export {
  kitware_vtk_js_IO_Core_DataAccessHelper_HtmlDataAccessHelper_default as default
};
//# sourceMappingURL=@kitware_vtk__js_IO_Core_DataAccessHelper_HtmlDataAccessHelper.js.map
