import {
  macro
} from "./chunk-OTTIIP4A.js";

// node_modules/@kitware/vtk.js/Rendering/Core/RenderWindow.js
var DEFAULT_VIEW_API = navigator.gpu ? "WebGPU" : "WebGL";
var VIEW_CONSTRUCTORS = /* @__PURE__ */ Object.create(null);
function registerViewConstructor(name, constructor) {
  VIEW_CONSTRUCTORS[name] = constructor;
}
function listViewAPIs() {
  return Object.keys(VIEW_CONSTRUCTORS);
}
function newAPISpecificView(name) {
  var initialValues = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  return VIEW_CONSTRUCTORS[name] && VIEW_CONSTRUCTORS[name](initialValues);
}
function vtkRenderWindow(publicAPI, model) {
  model.classHierarchy.push("vtkRenderWindow");
  publicAPI.addRenderer = function(renderer) {
    if (publicAPI.hasRenderer(renderer)) {
      return;
    }
    renderer.setRenderWindow(publicAPI);
    model.renderers.push(renderer);
    publicAPI.modified();
  };
  publicAPI.removeRenderer = function(renderer) {
    model.renderers = model.renderers.filter(function(r) {
      return r !== renderer;
    });
    publicAPI.modified();
  };
  publicAPI.hasRenderer = function(ren) {
    return model.renderers.indexOf(ren) !== -1;
  };
  publicAPI.newAPISpecificView = function(name) {
    var initialValues = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return newAPISpecificView(name || model.defaultViewAPI, initialValues);
  };
  publicAPI.addView = function(view) {
    if (publicAPI.hasView(view)) {
      return;
    }
    view.setRenderable(publicAPI);
    model.views.push(view);
    publicAPI.modified();
  };
  publicAPI.removeView = function(view) {
    model.views = model.views.filter(function(r) {
      return r !== view;
    });
    publicAPI.modified();
  };
  publicAPI.hasView = function(view) {
    return model.views.indexOf(view) !== -1;
  };
  publicAPI.preRender = function() {
    model.renderers.forEach(function(ren) {
      if (!ren.isActiveCameraCreated()) {
        ren.resetCamera();
      }
    });
  };
  publicAPI.render = function() {
    publicAPI.preRender();
    if (model.interactor) {
      model.interactor.render();
    } else {
      model.views.forEach(function(view) {
        return view.traverseAllPasses();
      });
    }
  };
  publicAPI.getStatistics = function() {
    var results = {
      propCount: 0,
      invisiblePropCount: 0
    };
    model.renderers.forEach(function(ren) {
      var props = ren.getViewProps();
      props.forEach(function(prop) {
        if (prop.getVisibility()) {
          results.propCount += 1;
          var mpr = prop.getMapper && prop.getMapper();
          if (mpr && mpr.getPrimitiveCount) {
            var pcount = mpr.getPrimitiveCount();
            Object.keys(pcount).forEach(function(keyName) {
              if (!results[keyName]) {
                results[keyName] = 0;
              }
              results[keyName] += pcount[keyName];
            });
          }
        } else {
          results.invisiblePropCount += 1;
        }
      });
    });
    results.str = Object.keys(results).map(function(keyName) {
      return "".concat(keyName, ": ").concat(results[keyName]);
    }).join("\n");
    return results;
  };
  publicAPI.captureImages = function() {
    var format = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "image/png";
    var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    macro.setImmediate(publicAPI.render);
    return model.views.map(function(view) {
      return view.captureNextImage ? view.captureNextImage(format, opts) : void 0;
    }).filter(function(i) {
      return !!i;
    });
  };
}
var DEFAULT_VALUES = {
  defaultViewAPI: DEFAULT_VIEW_API,
  renderers: [],
  views: [],
  interactor: null,
  neverRendered: true,
  numberOfLayers: 1
};
function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues);
  macro.obj(publicAPI, model);
  macro.setGet(publicAPI, model, ["interactor", "numberOfLayers", "views", "defaultViewAPI"]);
  macro.get(publicAPI, model, ["neverRendered"]);
  macro.getArray(publicAPI, model, ["renderers"]);
  macro.event(publicAPI, model, "completion");
  vtkRenderWindow(publicAPI, model);
}
var newInstance = macro.newInstance(extend, "vtkRenderWindow");
var vtkRenderWindow$1 = {
  newInstance,
  extend,
  registerViewConstructor,
  listViewAPIs,
  newAPISpecificView
};

export {
  registerViewConstructor,
  listViewAPIs,
  newAPISpecificView,
  extend,
  newInstance,
  vtkRenderWindow$1
};
//# sourceMappingURL=chunk-5C4CJZQ5.js.map
