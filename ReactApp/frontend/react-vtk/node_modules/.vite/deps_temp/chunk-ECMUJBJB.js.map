{
  "version": 3,
  "sources": ["../../@kitware/vtk.js/Rendering/WebGPU/TextureView.js", "../../@kitware/vtk.js/Rendering/WebGPU/Texture.js"],
  "sourcesContent": ["import macro from '../../macros.js';\nimport vtkWebGPUSampler from './Sampler.js';\nimport vtkWebGPUTypes from './Types.js';\n\n// vtkWebGPUTextureView methods\n// ----------------------------------------------------------------------------\n\n/* eslint-disable no-bitwise */\n\nfunction vtkWebGPUTextureView(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUTextureView');\n\n  publicAPI.create = function (texture, options) {\n    model.texture = texture;\n    model.options = options;\n    model.options.dimension = model.options.dimension || '2d';\n    model.options.label = model.label;\n    model.textureHandle = texture.getHandle();\n    model.handle = model.textureHandle.createView(model.options);\n    model.bindGroupLayoutEntry.texture.viewDimension = model.options.dimension;\n    var tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.texture.getFormat());\n    model.bindGroupLayoutEntry.texture.sampleType = tDetails.sampleType;\n  };\n\n  publicAPI.createFromTextureHandle = function (textureHandle, options) {\n    model.texture = null;\n    model.options = options;\n    model.options.dimension = model.options.dimension || '2d';\n    model.options.label = model.label;\n    model.textureHandle = textureHandle;\n    model.handle = model.textureHandle.createView(model.options);\n    model.bindGroupLayoutEntry.texture.viewDimension = model.options.dimension;\n    var tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(options.format);\n    model.bindGroupLayoutEntry.texture.sampleType = tDetails.sampleType;\n    model.bindGroupTime.modified();\n  };\n\n  publicAPI.getBindGroupEntry = function () {\n    var foo = {\n      resource: publicAPI.getHandle()\n    };\n    return foo;\n  };\n\n  publicAPI.getShaderCode = function (binding, group) {\n    var ttype = 'f32';\n\n    if (model.bindGroupLayoutEntry.texture.sampleType === 'sint') {\n      ttype = 'i32';\n    } else if (model.bindGroupLayoutEntry.texture.sampleType === 'uint') {\n      ttype = 'u32';\n    }\n\n    var result = \"@binding(\".concat(binding, \") @group(\").concat(group, \") var \").concat(model.label, \": texture_\").concat(model.options.dimension, \"<\").concat(ttype, \">;\");\n\n    if (model.bindGroupLayoutEntry.texture.sampleType === 'depth') {\n      result = \"@binding(\".concat(binding, \") @group(\").concat(group, \") var \").concat(model.label, \": texture_depth_\").concat(model.options.dimension, \";\");\n    }\n\n    return result;\n  };\n\n  publicAPI.addSampler = function (device, options) {\n    var newSamp = vtkWebGPUSampler.newInstance({\n      label: \"\".concat(model.label, \"Sampler\")\n    });\n    newSamp.create(device, options);\n    publicAPI.setSampler(newSamp);\n  };\n\n  publicAPI.getBindGroupTime = function () {\n    // check if the handle changed\n    if (model.texture && model.texture.getHandle() !== model.textureHandle) {\n      model.textureHandle = model.texture.getHandle();\n      model.handle = model.textureHandle.createView(model.options);\n      model.bindGroupTime.modified();\n    }\n\n    return model.bindGroupTime;\n  }; // if the texture has changed then get a new view\n\n\n  publicAPI.getHandle = function () {\n    if (model.texture && model.texture.getHandle() !== model.textureHandle) {\n      model.textureHandle = model.texture.getHandle();\n      model.handle = model.textureHandle.createView(model.options);\n      model.bindGroupTime.modified();\n    }\n\n    return model.handle;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  texture: null,\n  handle: null,\n  sampler: null,\n  label: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods\n\n  macro.obj(publicAPI, model);\n  model.bindGroupLayoutEntry = {\n    /* eslint-disable no-undef */\n    visibility: GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT,\n\n    /* eslint-enable no-undef */\n    texture: {\n      sampleType: 'float',\n      viewDimension: '2d' // multisampled: false,\n\n    }\n  };\n  model.bindGroupTime = {};\n  macro.obj(model.bindGroupTime, {\n    mtime: 0\n  });\n  macro.get(publicAPI, model, ['bindGroupTime', 'texture']);\n  macro.setGet(publicAPI, model, ['bindGroupLayoutEntry', 'label', 'sampler']);\n  vtkWebGPUTextureView(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend); // ----------------------------------------------------------------------------\n\nvar vtkWebGPUTextureView$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkWebGPUTextureView$1 as default, extend, newInstance };\n", "import macro from '../../macros.js';\nimport HalfFloat from '../../Common/Core/HalfFloat.js';\nimport vtkWebGPUBufferManager from './BufferManager.js';\nimport vtkWebGPUTextureView from './TextureView.js';\nimport vtkWebGPUTypes from './Types.js';\nimport vtkTexture from '../Core/Texture.js';\n\nvar BufferUsage = vtkWebGPUBufferManager.BufferUsage; // ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// vtkWebGPUTexture methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUTexture(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUTexture');\n\n  publicAPI.create = function (device, options) {\n    model.device = device;\n    model.width = options.width;\n    model.height = options.height;\n    model.depth = options.depth ? options.depth : 1;\n    var dimension = model.depth === 1 ? '2d' : '3d';\n    model.format = options.format ? options.format : 'rgba8unorm';\n    model.mipLevel = options.mipLevel ? options.mipLevel : 0;\n    /* eslint-disable no-undef */\n\n    /* eslint-disable no-bitwise */\n\n    model.usage = options.usage ? options.usage : GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;\n    /* eslint-enable no-undef */\n\n    /* eslint-enable no-bitwise */\n\n    model.handle = model.device.getHandle().createTexture({\n      size: [model.width, model.height, model.depth],\n      format: model.format,\n      // 'rgba8unorm',\n      usage: model.usage,\n      label: model.label,\n      dimension: dimension,\n      mipLevelCount: model.mipLevel + 1\n    });\n  };\n\n  publicAPI.assignFromHandle = function (device, handle, options) {\n    model.device = device;\n    model.handle = handle;\n    model.width = options.width;\n    model.height = options.height;\n    model.depth = options.depth ? options.depth : 1;\n    model.format = options.format ? options.format : 'rgba8unorm';\n    /* eslint-disable no-undef */\n\n    /* eslint-disable no-bitwise */\n\n    model.usage = options.usage ? options.usage : GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;\n    /* eslint-enable no-undef */\n\n    /* eslint-enable no-bitwise */\n  };\n\n  publicAPI.writeImageData = function (req) {\n    var nativeArray = [];\n\n    if (req.canvas) {\n      model.device.getHandle().queue.copyExternalImageToTexture({\n        source: req.canvas,\n        flipY: req.flip\n      }, {\n        texture: model.handle,\n        premultipliedAlpha: true\n      }, [model.width, model.height, model.depth]);\n      model.ready = true;\n      return;\n    }\n\n    if (req.jsImageData && !req.nativeArray) {\n      req.width = req.jsImageData.width;\n      req.height = req.jsImageData.height;\n      req.depth = 1;\n      req.format = 'rgba8unorm';\n      req.flip = true;\n      req.nativeArray = req.jsImageData.data;\n    }\n\n    var tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.format);\n    var bufferBytesPerRow = model.width * tDetails.stride;\n\n    var fixAll = function fixAll(arr, height, depth) {\n      // bytesPerRow must be a multiple of 256 so we might need to rebuild\n      // the data here before passing to the buffer. e.g. if it is unorm8x4 then\n      // we need to have width be a multiple of 64\n      var inWidthInBytes = arr.length / (height * depth) * arr.BYTES_PER_ELEMENT; // is this a half float texture?\n\n      var halfFloat = tDetails.elementSize === 2 && tDetails.sampleType === 'float'; // if we need to copy the data\n\n      if (halfFloat || inWidthInBytes % 256) {\n        var inArray = arr;\n        var inWidth = inWidthInBytes / inArray.BYTES_PER_ELEMENT;\n        var outBytesPerElement = tDetails.elementSize;\n        var outWidthInBytes = 256 * Math.floor((inWidth * outBytesPerElement + 255) / 256);\n        var outWidth = outWidthInBytes / outBytesPerElement;\n        var outArray = macro.newTypedArray(halfFloat ? 'Uint16Array' : inArray.constructor.name, outWidth * height * depth);\n\n        for (var v = 0; v < height * depth; v++) {\n          if (halfFloat) {\n            for (var i = 0; i < inWidth; i++) {\n              outArray[v * outWidth + i] = HalfFloat.toHalf(inArray[v * inWidth + i]);\n            }\n          } else {\n            outArray.set(inArray.subarray(v * inWidth, (v + 1) * inWidth), v * outWidth);\n          }\n        }\n\n        return [outArray, outWidthInBytes];\n      }\n\n      return [arr, inWidthInBytes];\n    };\n\n    if (req.nativeArray) {\n      nativeArray = req.nativeArray;\n    }\n\n    if (req.image) {\n      var canvas = document.createElement('canvas');\n      canvas.width = req.image.width;\n      canvas.height = req.image.height;\n      var ctx = canvas.getContext('2d');\n      ctx.translate(0, canvas.height);\n      ctx.scale(1, -1);\n      ctx.drawImage(req.image, 0, 0, req.image.width, req.image.height, 0, 0, canvas.width, canvas.height);\n      var imageData = ctx.getImageData(0, 0, req.image.width, req.image.height);\n      nativeArray = imageData.data;\n    }\n\n    var cmdEnc = model.device.createCommandEncoder();\n\n    if (publicAPI.getDimensionality() !== 3) {\n      // Non-3D, supports mipmaps\n      var mips = vtkTexture.generateMipmaps(nativeArray, model.width, model.height, model.mipLevel);\n      var currentWidth = model.width;\n      var currentHeight = model.height;\n\n      for (var m = 0; m <= model.mipLevel; m++) {\n        var fix = fixAll(mips[m], currentHeight, 1);\n        bufferBytesPerRow = fix[1];\n        var buffRequest = {\n          dataArray: req.dataArray ? req.dataArray : null,\n          nativeArray: fix[0],\n\n          /* eslint-disable no-undef */\n          usage: BufferUsage.Texture\n          /* eslint-enable no-undef */\n\n        };\n        var buff = model.device.getBufferManager().getBuffer(buffRequest);\n        cmdEnc.copyBufferToTexture({\n          buffer: buff.getHandle(),\n          offset: 0,\n          bytesPerRow: bufferBytesPerRow,\n          rowsPerImage: currentHeight\n        }, {\n          texture: model.handle,\n          mipLevel: m\n        }, [currentWidth, currentHeight, 1]);\n        currentWidth /= 2;\n        currentHeight /= 2;\n      }\n\n      model.device.submitCommandEncoder(cmdEnc);\n      model.ready = true;\n    } else {\n      // 3D, no mipmaps\n      var _fix = fixAll(nativeArray, model.height, model.depth);\n\n      bufferBytesPerRow = _fix[1];\n      var _buffRequest = {\n        dataArray: req.dataArray ? req.dataArray : null,\n\n        /* eslint-disable no-undef */\n        usage: BufferUsage.Texture\n        /* eslint-enable no-undef */\n\n      };\n      _buffRequest.nativeArray = _fix[0];\n\n      var _buff = model.device.getBufferManager().getBuffer(_buffRequest);\n\n      cmdEnc.copyBufferToTexture({\n        buffer: _buff.getHandle(),\n        offset: 0,\n        bytesPerRow: bufferBytesPerRow,\n        rowsPerImage: model.height\n      }, {\n        texture: model.handle\n      }, [model.width, model.height, model.depth]);\n      model.device.submitCommandEncoder(cmdEnc);\n      model.ready = true;\n    }\n  }; // when data is pulled out of this texture what scale must be applied to\n  // get back to the original source data. For formats such as r8unorm we\n  // have to multiply by 255.0, for formats such as r16float it is 1.0\n\n\n  publicAPI.getScale = function () {\n    var tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.format);\n    var halfFloat = tDetails.elementSize === 2 && tDetails.sampleType === 'float';\n    return halfFloat ? 1.0 : 255.0;\n  };\n\n  publicAPI.getNumberOfComponents = function () {\n    var tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.format);\n    return tDetails.numComponents;\n  };\n\n  publicAPI.getDimensionality = function () {\n    var dims = 0;\n    if (model.width > 1) dims++;\n    if (model.height > 1) dims++;\n    if (model.depth > 1) dims++;\n    return dims;\n  };\n\n  publicAPI.resizeToMatch = function (tex) {\n    if (tex.getWidth() !== model.width || tex.getHeight() !== model.height || tex.getDepth() !== model.depth) {\n      model.width = tex.getWidth();\n      model.height = tex.getHeight();\n      model.depth = tex.getDepth();\n      model.handle = model.device.getHandle().createTexture({\n        size: [model.width, model.height, model.depth],\n        format: model.format,\n        usage: model.usage,\n        label: model.label\n      });\n    }\n  };\n\n  publicAPI.resize = function (width, height) {\n    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n    if (width !== model.width || height !== model.height || depth !== model.depth) {\n      model.width = width;\n      model.height = height;\n      model.depth = depth;\n      model.handle = model.device.getHandle().createTexture({\n        size: [model.width, model.height, model.depth],\n        format: model.format,\n        usage: model.usage,\n        label: model.label\n      });\n    }\n  };\n\n  publicAPI.createView = function (label) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    // if options is missing values try to add them in\n    if (!options.dimension) {\n      options.dimension = model.depth === 1 ? '2d' : '3d';\n    }\n\n    var view = vtkWebGPUTextureView.newInstance({\n      label: label\n    });\n    view.create(publicAPI, options);\n    return view;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  device: null,\n  handle: null,\n  buffer: null,\n  ready: false,\n  label: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods\n\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['handle', 'ready', 'width', 'height', 'depth', 'format', 'usage']);\n  macro.setGet(publicAPI, model, ['device', 'label']);\n  vtkWebGPUTexture(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend); // ----------------------------------------------------------------------------\n\nvar vtkWebGPUTexture$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkWebGPUTexture$1 as default, extend, newInstance };\n"],
  "mappings": "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",
  "names": ["fixAll", "DEFAULT_VALUES", "extend", "newInstance"]
}
