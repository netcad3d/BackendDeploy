{
  "version": 3,
  "sources": ["../../@kitware/vtk.js/Filters/Sources/CylinderSource.js", "dep:@kitware_vtk__js_Filters_Sources_CylinderSource"],
  "sourcesContent": ["import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport macro from '../../macros.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkMatrixBuilder from '../../Common/Core/MatrixBuilder.js';\n\n// vtkCylinderSource methods\n// ----------------------------------------------------------------------------\n\nfunction vtkCylinderSource(publicAPI, model) {\n  // Set our classname\n  model.classHierarchy.push('vtkCylinderSource');\n\n  function requestData(inData, outData) {\n    var _vtkMatrixBuilder$bui, _vtkMatrixBuilder$bui2;\n\n    if (model.deleted) {\n      return;\n    }\n\n    var dataset = outData[0];\n    var angle = 2.0 * Math.PI / model.resolution;\n    var numberOfPoints = 2 * model.resolution;\n    var numberOfPolys = 5 * model.resolution;\n\n    if (model.capping) {\n      numberOfPoints = 4 * model.resolution;\n      numberOfPolys = 7 * model.resolution + 2;\n    } // Points\n\n\n    var points = macro.newTypedArray(model.pointType, numberOfPoints * 3); // Cells\n\n    var cellLocation = 0;\n    var polys = new Uint32Array(numberOfPolys); // Normals\n\n    var normalsData = new Float32Array(numberOfPoints * 3);\n    var normals = vtkDataArray.newInstance({\n      numberOfComponents: 3,\n      values: normalsData,\n      name: 'Normals'\n    }); // Texture coords\n\n    var tcData = new Float32Array(numberOfPoints * 2);\n    var tcoords = vtkDataArray.newInstance({\n      numberOfComponents: 2,\n      values: tcData,\n      name: 'TCoords'\n    }); // Generate points for all sides\n\n    var nbot = [0.0, 0.0, 0.0];\n    var ntop = [0.0, 0.0, 0.0];\n    var xbot = [0.0, 0.0, 0.0];\n    var xtop = [0.0, 0.0, 0.0];\n    var tcbot = [0.0, 0.0];\n    var tctop = [0.0, 0.0];\n    var otherRadius = model.otherRadius == null ? model.radius : model.otherRadius;\n\n    for (var i = 0; i < model.resolution; i++) {\n      // x coordinate\n      nbot[0] = Math.cos(i * angle + model.initAngle);\n      ntop[0] = nbot[0];\n      xbot[0] = model.radius * nbot[0] + model.center[0];\n      xtop[0] = xbot[0];\n      tcbot[0] = Math.abs(2.0 * i / model.resolution - 1.0);\n      tctop[0] = tcbot[0]; // y coordinate\n\n      xbot[1] = 0.5 * model.height + model.center[1];\n      xtop[1] = -0.5 * model.height + model.center[1];\n      tcbot[1] = 0.0;\n      tctop[1] = 1.0; // z coordinate\n\n      nbot[2] = -Math.sin(i * angle + model.initAngle);\n      ntop[2] = nbot[2];\n      xbot[2] = otherRadius * nbot[2] + model.center[2];\n      xtop[2] = xbot[2];\n      var pointIdx = 2 * i;\n\n      for (var j = 0; j < 3; j++) {\n        normalsData[pointIdx * 3 + j] = nbot[j];\n        normalsData[(pointIdx + 1) * 3 + j] = ntop[j];\n        points[pointIdx * 3 + j] = xbot[j];\n        points[(pointIdx + 1) * 3 + j] = xtop[j];\n\n        if (j < 2) {\n          tcData[pointIdx * 2 + j] = tcbot[j];\n          tcData[(pointIdx + 1) * 2 + j] = tctop[j];\n        }\n      }\n    } // Generate polygons for sides\n\n\n    for (var _i = 0; _i < model.resolution; _i++) {\n      polys[cellLocation++] = 4;\n      polys[cellLocation++] = 2 * _i;\n      polys[cellLocation++] = 2 * _i + 1;\n      var pt = (2 * _i + 3) % (2 * model.resolution);\n      polys[cellLocation++] = pt;\n      polys[cellLocation++] = pt - 1;\n    }\n\n    if (model.capping) {\n      // Generate points for top/bottom polygons\n      for (var _i2 = 0; _i2 < model.resolution; _i2++) {\n        // x coordinate\n        xbot[0] = model.radius * Math.cos(_i2 * angle + model.initAngle);\n        xtop[0] = xbot[0];\n        tcbot[0] = xbot[0];\n        tctop[0] = xbot[0];\n        xbot[0] += model.center[0];\n        xtop[0] += model.center[0]; // y coordinate\n\n        nbot[1] = 1.0;\n        ntop[1] = -1.0;\n        xbot[1] = 0.5 * model.height + model.center[1];\n        xtop[1] = -0.5 * model.height + model.center[1]; // z coordinate\n\n        xbot[2] = -otherRadius * Math.sin(_i2 * angle + model.initAngle);\n        xtop[2] = xbot[2];\n        tcbot[1] = xbot[2];\n        tctop[1] = xbot[2];\n        xbot[2] += model.center[2];\n        xtop[2] += model.center[2];\n        var botIdx = 2 * model.resolution + _i2;\n        var topIdx = 3 * model.resolution + model.resolution - _i2 - 1;\n\n        for (var _j = 0; _j < 3; _j++) {\n          normalsData[3 * botIdx + _j] = nbot[_j];\n          normalsData[3 * topIdx + _j] = ntop[_j];\n          points[3 * botIdx + _j] = xbot[_j];\n          points[3 * topIdx + _j] = xtop[_j];\n\n          if (_j < 2) {\n            tcData[2 * botIdx + _j] = tcbot[_j];\n            tcData[2 * topIdx + _j] = tctop[_j];\n          }\n        }\n      } // Generate polygons for top/bottom\n\n\n      polys[cellLocation++] = model.resolution;\n\n      for (var _i3 = 0; _i3 < model.resolution; _i3++) {\n        polys[cellLocation++] = 2 * model.resolution + _i3;\n      }\n\n      polys[cellLocation++] = model.resolution;\n\n      for (var _i4 = 0; _i4 < model.resolution; _i4++) {\n        polys[cellLocation++] = 3 * model.resolution + _i4;\n      }\n    } // Apply transformation to the points coordinates\n\n\n    (_vtkMatrixBuilder$bui = (_vtkMatrixBuilder$bui2 = vtkMatrixBuilder.buildFromRadian()).translate.apply(_vtkMatrixBuilder$bui2, _toConsumableArray(model.center)).rotateFromDirections([0, 1, 0], model.direction)).translate.apply(_vtkMatrixBuilder$bui, _toConsumableArray(model.center.map(function (c) {\n      return c * -1;\n    }))).apply(points);\n\n    dataset = vtkPolyData.newInstance();\n    dataset.getPoints().setData(points, 3);\n    dataset.getPolys().setData(polys, 1);\n    dataset.getPointData().setNormals(normals);\n    dataset.getPointData().setTCoords(tcoords); // Update output\n\n    outData[0] = dataset;\n  } // Expose methods\n\n\n  publicAPI.requestData = requestData;\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  height: 1.0,\n  initAngle: 0,\n  radius: 1.0,\n  resolution: 6,\n  center: [0, 0, 0],\n  direction: [0.0, 1.0, 0.0],\n  capping: true,\n  pointType: 'Float64Array'\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['height', 'initAngle', 'otherRadius', 'radius', 'resolution', 'capping']);\n  macro.setGetArray(publicAPI, model, ['center', 'direction'], 3);\n  macro.algo(publicAPI, model, 0, 1);\n  vtkCylinderSource(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkCylinderSource'); // ----------------------------------------------------------------------------\n\nvar vtkCylinderSource$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkCylinderSource$1 as default, extend, newInstance };\n", "import d from \"./node_modules/@kitware/vtk.js/Filters/Sources/CylinderSource.js\";export default d;\nexport * from \"./node_modules/@kitware/vtk.js/Filters/Sources/CylinderSource.js\""],
  "mappings": "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",
  "names": []
}
