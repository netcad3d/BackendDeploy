{
  "version": 3,
  "sources": ["../../@kitware/vtk.js/Rendering/OpenGL/Camera.js", "../../@kitware/vtk.js/Rendering/OpenGL/Renderer.js", "../../@kitware/vtk.js/Rendering/OpenGL/PixelSpaceCallbackMapper.js", "../../@kitware/vtk.js/Rendering/WebGPU/Camera.js", "../../@kitware/vtk.js/Rendering/WebGPU/Renderer.js", "../../@kitware/vtk.js/Rendering/WebGPU/PixelSpaceCallbackMapper.js", "../../@kitware/vtk.js/Rendering/OpenGL/glsl/vtkPolyDataVS.glsl.js", "../../@kitware/vtk.js/Rendering/OpenGL/glsl/vtkPolyDataFS.glsl.js", "../../@kitware/vtk.js/Rendering/OpenGL/ReplacementShaderMapper.js"],
  "sourcesContent": ["import { mat4, mat3 } from 'gl-matrix';\nimport { newInstance as newInstance$1, obj, setGet } from '../../macros.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// vtkOpenGLCamera methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLCamera(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLCamera');\n\n  publicAPI.buildPass = function (prepass) {\n    if (prepass) {\n      model.openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model._openGLRenderWindow = model.openGLRenderer.getParent();\n      model.context = model._openGLRenderWindow.getContext();\n    }\n  }; // Renders myself\n\n\n  publicAPI.opaquePass = function (prepass) {\n    if (prepass) {\n      var tsize = model.openGLRenderer.getTiledSizeAndOrigin();\n      model.context.viewport(tsize.lowerLeftU, tsize.lowerLeftV, tsize.usize, tsize.vsize);\n      model.context.scissor(tsize.lowerLeftU, tsize.lowerLeftV, tsize.usize, tsize.vsize);\n    }\n  };\n\n  publicAPI.translucentPass = publicAPI.opaquePass;\n  publicAPI.opaqueZBufferPass = publicAPI.opaquePass;\n  publicAPI.volumePass = publicAPI.opaquePass;\n\n  publicAPI.getKeyMatrices = function (ren) {\n    // has the camera changed?\n    if (ren !== model.lastRenderer || model._openGLRenderWindow.getMTime() > model.keyMatrixTime.getMTime() || publicAPI.getMTime() > model.keyMatrixTime.getMTime() || ren.getMTime() > model.keyMatrixTime.getMTime() || model.renderable.getMTime() > model.keyMatrixTime.getMTime()) {\n      mat4.copy(model.keyMatrices.wcvc, model.renderable.getViewMatrix());\n      mat3.fromMat4(model.keyMatrices.normalMatrix, model.keyMatrices.wcvc);\n      mat3.invert(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);\n      mat4.transpose(model.keyMatrices.wcvc, model.keyMatrices.wcvc);\n      var aspectRatio = model.openGLRenderer.getAspectRatio();\n      mat4.copy(model.keyMatrices.vcpc, model.renderable.getProjectionMatrix(aspectRatio, -1, 1));\n      mat4.transpose(model.keyMatrices.vcpc, model.keyMatrices.vcpc);\n      mat4.multiply(model.keyMatrices.wcpc, model.keyMatrices.vcpc, model.keyMatrices.wcvc);\n      model.keyMatrixTime.modified();\n      model.lastRenderer = ren;\n    }\n\n    return model.keyMatrices;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  context: null,\n  lastRenderer: null,\n  keyMatrixTime: null,\n  keyMatrices: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.keyMatrixTime = {};\n  obj(model.keyMatrixTime); // values always get set by the get method\n\n  model.keyMatrices = {\n    normalMatrix: new Float64Array(9),\n    vcpc: new Float64Array(16),\n    wcvc: new Float64Array(16),\n    wcpc: new Float64Array(16)\n  }; // Build VTK API\n\n  setGet(publicAPI, model, ['context', 'keyMatrixTime']); // Object methods\n\n  vtkOpenGLCamera(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend); // ----------------------------------------------------------------------------\n\nvar vtkCamera = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to OpenGL backend if imported\n\nregisterOverride('vtkCamera', newInstance);\n\nexport { vtkCamera as default, extend, newInstance };\n", "import { newInstance as newInstance$1, get, setGet, moveToProtected, vtkDebugMacro as vtkDebugMacro$1 } from '../../macros.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\nvar vtkDebugMacro = vtkDebugMacro$1; // ----------------------------------------------------------------------------\n// vtkOpenGLRenderer methods\n// ----------------------------------------------------------------------------\n\n/* eslint-disable no-bitwise */\n\nfunction vtkOpenGLRenderer(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLRenderer'); // Builds myself.\n\n  publicAPI.buildPass = function (prepass) {\n    if (prepass) {\n      if (!model.renderable) {\n        return;\n      }\n\n      publicAPI.updateLights();\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.renderable.getActiveCamera());\n      publicAPI.addMissingNodes(model.renderable.getViewPropsWithNestedProps());\n      publicAPI.removeUnusedNodes();\n    }\n  };\n\n  publicAPI.updateLights = function () {\n    var count = 0;\n    var lights = model.renderable.getLightsByReference();\n\n    for (var index = 0; index < lights.length; ++index) {\n      if (lights[index].getSwitch() > 0.0) {\n        count++;\n      }\n    }\n\n    if (!count) {\n      vtkDebugMacro('No lights are on, creating one.');\n      model.renderable.createLight();\n    }\n\n    return count;\n  };\n\n  publicAPI.opaqueZBufferPass = function (prepass) {\n    if (prepass) {\n      var clearMask = 0;\n      var gl = model.context;\n\n      if (!model.renderable.getTransparent()) {\n        model.context.clearColor(1.0, 0.0, 0.0, 1.0);\n        clearMask |= gl.COLOR_BUFFER_BIT;\n      }\n\n      if (!model.renderable.getPreserveDepthBuffer()) {\n        gl.clearDepth(1.0);\n        clearMask |= gl.DEPTH_BUFFER_BIT;\n        model.context.depthMask(true);\n      }\n\n      var ts = publicAPI.getTiledSizeAndOrigin();\n      gl.enable(gl.SCISSOR_TEST);\n      gl.scissor(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);\n      gl.viewport(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);\n      gl.colorMask(true, true, true, true);\n\n      if (clearMask) {\n        gl.clear(clearMask);\n      }\n\n      gl.enable(gl.DEPTH_TEST);\n    }\n  }; // Renders myself\n\n\n  publicAPI.cameraPass = function (prepass) {\n    if (prepass) {\n      publicAPI.clear();\n    }\n  };\n\n  publicAPI.getAspectRatio = function () {\n    var size = model._parent.getSizeByReference();\n\n    var viewport = model.renderable.getViewportByReference();\n    return size[0] * (viewport[2] - viewport[0]) / ((viewport[3] - viewport[1]) * size[1]);\n  };\n\n  publicAPI.getTiledSizeAndOrigin = function () {\n    var vport = model.renderable.getViewportByReference(); // if there is no window assume 0 1\n\n    var tileViewPort = [0.0, 0.0, 1.0, 1.0]; // find the lower left corner of the viewport, taking into account the\n    // lower left boundary of this tile\n\n    var vpu = vport[0] - tileViewPort[0];\n    var vpv = vport[1] - tileViewPort[1]; // store the result as a pixel value\n\n    var ndvp = model._parent.normalizedDisplayToDisplay(vpu, vpv);\n\n    var lowerLeftU = Math.round(ndvp[0]);\n    var lowerLeftV = Math.round(ndvp[1]); // find the upper right corner of the viewport, taking into account the\n    // lower left boundary of this tile\n\n    var vpu2 = vport[2] - tileViewPort[0];\n    var vpv2 = vport[3] - tileViewPort[1];\n\n    var ndvp2 = model._parent.normalizedDisplayToDisplay(vpu2, vpv2); // now compute the size of the intersection of the viewport with the\n    // current tile\n\n\n    var usize = Math.round(ndvp2[0]) - lowerLeftU;\n    var vsize = Math.round(ndvp2[1]) - lowerLeftV;\n\n    if (usize < 0) {\n      usize = 0;\n    }\n\n    if (vsize < 0) {\n      vsize = 0;\n    }\n\n    return {\n      usize: usize,\n      vsize: vsize,\n      lowerLeftU: lowerLeftU,\n      lowerLeftV: lowerLeftV\n    };\n  };\n\n  publicAPI.clear = function () {\n    var clearMask = 0;\n    var gl = model.context;\n\n    if (!model.renderable.getTransparent()) {\n      var background = model.renderable.getBackgroundByReference(); // renderable ensures that background has 4 entries.\n\n      model.context.clearColor(background[0], background[1], background[2], background[3]);\n      clearMask |= gl.COLOR_BUFFER_BIT;\n    }\n\n    if (!model.renderable.getPreserveDepthBuffer()) {\n      gl.clearDepth(1.0);\n      clearMask |= gl.DEPTH_BUFFER_BIT;\n      model.context.depthMask(true);\n    }\n\n    gl.colorMask(true, true, true, true);\n    var ts = publicAPI.getTiledSizeAndOrigin();\n    gl.enable(gl.SCISSOR_TEST);\n    gl.scissor(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);\n    gl.viewport(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);\n\n    if (clearMask) {\n      gl.clear(clearMask);\n    }\n\n    gl.enable(gl.DEPTH_TEST);\n    /* eslint-enable no-bitwise */\n  };\n\n  publicAPI.releaseGraphicsResources = function () {\n    if (model.selector !== null) {\n      model.selector.releaseGraphicsResources();\n    }\n  };\n\n  publicAPI.setOpenGLRenderWindow = function (rw) {\n    if (model._openGLRenderWindow === rw) {\n      return;\n    }\n\n    publicAPI.releaseGraphicsResources();\n    model._openGLRenderWindow = rw;\n    model.context = null;\n\n    if (rw) {\n      model.context = model._openGLRenderWindow.getContext();\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  context: null,\n  // _openGLRenderWindow: null,\n  selector: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues); // Build VTK API\n\n  get(publicAPI, model, ['shaderCache']);\n  setGet(publicAPI, model, ['selector']);\n  moveToProtected(publicAPI, model, ['openGLRenderWindow']); // Object methods\n\n  vtkOpenGLRenderer(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkOpenGLRenderer'); // ----------------------------------------------------------------------------\n\nvar vtkRenderer = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to OpenGL backend if imported\n\nregisterOverride('vtkRenderer', newInstance);\n\nexport { vtkRenderer as default, extend, newInstance };\n", "import { newInstance as newInstance$1, vtkDebugMacro as vtkDebugMacro$1 } from '../../macros.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// import { mat4, vec3 }     from 'gl-matrix';\nvar vtkDebugMacro = vtkDebugMacro$1; // ----------------------------------------------------------------------------\n// vtkOpenGLPixelSpaceCallbackMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLPixelSpaceCallbackMapper(publicAPI, model) {\n  model.classHierarchy.push('vtkOpenGLPixelSpaceCallbackMapper');\n\n  publicAPI.opaquePass = function (prepass, renderPass) {\n    model.openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n    model._openGLRenderWindow = model.openGLRenderer.getParent();\n    var aspectRatio = model.openGLRenderer.getAspectRatio();\n    var camera = model.openGLRenderer ? model.openGLRenderer.getRenderable().getActiveCamera() : null;\n    var tsize = model.openGLRenderer.getTiledSizeAndOrigin();\n    var texels = null;\n\n    if (model.renderable.getUseZValues()) {\n      var zbt = renderPass.getZBufferTexture();\n      var width = Math.floor(zbt.getWidth());\n      var height = Math.floor(zbt.getHeight());\n\n      var gl = model._openGLRenderWindow.getContext();\n\n      zbt.bind(); // Here we need to use vtkFramebuffer to save current settings (bindings/buffers)\n\n      var fb = renderPass.getFramebuffer();\n\n      if (!fb) {\n        vtkDebugMacro('No framebuffer to save/restore');\n      } else {\n        // save framebuffer settings\n        fb.saveCurrentBindingsAndBuffers();\n      }\n\n      var framebuffer = gl.createFramebuffer();\n      gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, zbt.getHandle(), 0);\n\n      if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE) {\n        texels = new Uint8Array(width * height * 4);\n        gl.viewport(0, 0, width, height);\n        gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, texels);\n      } // Now we need to restore framebuffer bindings/buffers\n\n\n      if (fb) {\n        fb.restorePreviousBindingsAndBuffers();\n      }\n\n      gl.deleteFramebuffer(framebuffer);\n    }\n\n    model.renderable.invokeCallback(model.renderable.getInputData(), camera, aspectRatio, tsize, texels);\n  };\n\n  publicAPI.queryPass = function (prepass, renderPass) {\n    if (prepass) {\n      if (model.renderable.getUseZValues()) {\n        renderPass.requestDepth();\n      }\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues); // Object methods\n\n  vtkOpenGLPixelSpaceCallbackMapper(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkOpenGLPixelSpaceCallbackMapper'); // ----------------------------------------------------------------------------\n\nvar vtkPixelSpaceCallbackMapper = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to OpenGL backend if imported\n\nregisterOverride('vtkPixelSpaceCallbackMapper', newInstance);\n\nexport { vtkPixelSpaceCallbackMapper as default, extend, newInstance };\n", "import { mat4 } from 'gl-matrix';\nimport macro from '../../macros.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// vtkWebGPUCamera methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUCamera(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUCamera');\n\n  publicAPI.getProjectionMatrix = function (outMat, aspect, cRange, windowCenter) {\n    mat4.identity(outMat);\n\n    if (model.renderable.getParallelProjection()) {\n      // set up a rectangular parallelipiped\n      var parallelScale = model.renderable.getParallelScale();\n      var width = parallelScale * aspect;\n      var height = parallelScale;\n      var xmin = (windowCenter[0] - 1.0) * width;\n      var xmax = (windowCenter[0] + 1.0) * width;\n      var ymin = (windowCenter[1] - 1.0) * height;\n      var ymax = (windowCenter[1] + 1.0) * height;\n      var xr = 1.0 / (xmax - xmin);\n      var yr = 1.0 / (ymax - ymin);\n      outMat[0] = 2.0 * xr;\n      outMat[5] = 2.0 * yr;\n      outMat[10] = 1.0 / (cRange[1] - cRange[0]);\n      outMat[12] = (xmax + xmin) * xr;\n      outMat[13] = (ymax + ymin) * yr;\n      outMat[14] = cRange[1] / (cRange[1] - cRange[0]);\n    } else {\n      var tmp = Math.tan(Math.PI * model.renderable.getViewAngle() / 360.0);\n\n      var _width;\n\n      var _height;\n\n      if (model.renderable.getUseHorizontalViewAngle() === true) {\n        _width = cRange[0] * tmp;\n        _height = cRange[0] * tmp / aspect;\n      } else {\n        _width = cRange[0] * tmp * aspect;\n        _height = cRange[0] * tmp;\n      }\n\n      var _xmin = (windowCenter[0] - 1.0) * _width;\n\n      var _xmax = (windowCenter[0] + 1.0) * _width;\n\n      var _ymin = (windowCenter[1] - 1.0) * _height;\n\n      var _ymax = (windowCenter[1] + 1.0) * _height;\n\n      outMat[0] = 2.0 * cRange[0] / (_xmax - _xmin);\n      outMat[5] = 2.0 * cRange[0] / (_ymax - _ymin);\n      outMat[12] = (_xmin + _xmax) / (_xmax - _xmin);\n      outMat[13] = (_ymin + _ymax) / (_ymax - _ymin);\n      outMat[10] = 0.0;\n      outMat[14] = cRange[0];\n      outMat[11] = -1.0;\n      outMat[15] = 0.0;\n    }\n  };\n\n  publicAPI.convertToOpenGLDepth = function (val) {\n    if (model.renderable.getParallelProjection()) {\n      return 1.0 - val;\n    }\n\n    var cRange = model.renderable.getClippingRangeByReference();\n    var zval = -cRange[0] / val;\n    zval = (cRange[0] + cRange[1]) / (cRange[1] - cRange[0]) + 2.0 * cRange[0] * cRange[1] / (zval * (cRange[1] - cRange[0]));\n    return 0.5 * zval + 0.5;\n  };\n\n  publicAPI.getKeyMatrices = function (webGPURenderer) {\n    // has the camera changed?\n    var ren = webGPURenderer.getRenderable();\n    var webGPURenderWindow = webGPURenderer.getParent();\n\n    if (Math.max(webGPURenderWindow.getMTime(), publicAPI.getMTime(), ren.getMTime(), model.renderable.getMTime(), webGPURenderer.getStabilizedTime()) > model.keyMatrixTime.getMTime()) {\n      var wcvc = model.renderable.getViewMatrix();\n      mat4.copy(model.keyMatrices.normalMatrix, wcvc); // zero out translation\n\n      model.keyMatrices.normalMatrix[3] = 0.0;\n      model.keyMatrices.normalMatrix[7] = 0.0;\n      model.keyMatrices.normalMatrix[11] = 0.0;\n      mat4.invert(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);\n      mat4.transpose(model.keyMatrices.wcvc, wcvc);\n      var center = webGPURenderer.getStabilizedCenterByReference();\n      mat4.translate(model.keyMatrices.scvc, model.keyMatrices.wcvc, center);\n      var aspectRatio = webGPURenderer.getAspectRatio();\n      var cRange = model.renderable.getClippingRangeByReference();\n      publicAPI.getProjectionMatrix(model.keyMatrices.vcpc, aspectRatio, cRange, model.renderable.getWindowCenterByReference());\n      mat4.multiply(model.keyMatrices.scpc, model.keyMatrices.vcpc, model.keyMatrices.scvc);\n      mat4.invert(model.keyMatrices.pcsc, model.keyMatrices.scpc);\n      model.keyMatrixTime.modified();\n    }\n\n    return model.keyMatrices;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  keyMatrixTime: null,\n  keyMatrices: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.keyMatrixTime = {};\n  macro.obj(model.keyMatrixTime); // values always get set by the get method\n\n  model.keyMatrices = {\n    normalMatrix: new Float64Array(16),\n    vcpc: new Float64Array(16),\n    pcsc: new Float64Array(16),\n    wcvc: new Float64Array(16),\n    scpc: new Float64Array(16),\n    scvc: new Float64Array(16)\n  }; // Build VTK API\n\n  macro.setGet(publicAPI, model, ['keyMatrixTime']); // Object methods\n\n  vtkWebGPUCamera(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend); // ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to WebGPU backend if imported\n\nregisterOverride('vtkCamera', newInstance);\n\nexport { index as default, extend, newInstance };\n", "import { mat4, vec3 } from 'gl-matrix';\nimport { newInstance as newInstance$1, obj, get, getArray, setGet, vtkDebugMacro as vtkDebugMacro$1 } from '../../macros.js';\nimport { r as radiansFromDegrees } from '../../Common/Core/Math/index.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport vtkWebGPUBindGroup from './BindGroup.js';\nimport vtkWebGPUFullScreenQuad from './FullScreenQuad.js';\nimport vtkWebGPUStorageBuffer from './StorageBuffer.js';\nimport vtkWebGPUUniformBuffer from './UniformBuffer.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\nvar vtkDebugMacro = vtkDebugMacro$1;\nvar clearFragColorTemplate = \"\\n//VTK::Renderer::Dec\\n\\n//VTK::Mapper::Dec\\n\\n//VTK::TCoord::Dec\\n\\n//VTK::RenderEncoder::Dec\\n\\n//VTK::IOStructs::Dec\\n\\n@fragment\\nfn main(\\n//VTK::IOStructs::Input\\n)\\n//VTK::IOStructs::Output\\n{\\n  var output: fragmentOutput;\\n\\n  var computedColor: vec4<f32> = mapperUBO.BackgroundColor;\\n\\n  //VTK::RenderEncoder::Impl\\n  return output;\\n}\\n\";\nvar clearFragTextureTemplate = \"\\nfn vecToRectCoord(dir: vec3<f32>) -> vec2<f32> {\\n  var tau: f32 = 6.28318530718;\\n  var pi: f32 = 3.14159265359;\\n  var out: vec2<f32> = vec2<f32>(0.0);\\n\\n  out.x = atan2(dir.z, dir.x) / tau;\\n  out.x += 0.5;\\n\\n  var phix: f32 = length(vec2(dir.x, dir.z));\\n  out.y = atan2(dir.y, phix) / pi + 0.5;\\n\\n  return out;\\n}\\n\\n//VTK::Renderer::Dec\\n\\n//VTK::Mapper::Dec\\n\\n//VTK::TCoord::Dec\\n\\n//VTK::RenderEncoder::Dec\\n\\n//VTK::IOStructs::Dec\\n\\n@fragment\\nfn main(\\n//VTK::IOStructs::Input\\n)\\n//VTK::IOStructs::Output\\n{\\n  var output: fragmentOutput;\\n\\n  var tcoord: vec4<f32> = vec4<f32>(input.vertexVC.xy, -1, 1);\\n  var V: vec4<f32> = normalize(mapperUBO.FSQMatrix * tcoord); // vec2<f32>((input.tcoordVS.x - 0.5) * 2, -(input.tcoordVS.y - 0.5) * 2);\\n  // textureSampleLevel gets rid of some ugly artifacts\\n  var background = textureSampleLevel(EnvironmentTexture, EnvironmentTextureSampler, vecToRectCoord(V.xyz), 0);\\n  var computedColor: vec4<f32> = vec4<f32>(background.rgb, 1);\\n\\n  //VTK::RenderEncoder::Impl\\n  return output;\\n}\\n\";\n\nvar _fsqClearMat4 = new Float64Array(16);\n\nvar _tNormalMat4 = new Float64Array(16); // Light type index gives either 0, 1, or 2 which indicates what type of light there is.\n// While technically, there are only spot and directional lights, within the CellArrayMapper\n// there is a third, positional light. It is technically just a variant of a spot light with\n// a cone angle of 90 or above, however certain calculations can be skipped if it is treated\n// separately.\n// The mappings are shown below:\n// 0 -> positional light\n// 1 -> directional light\n// 2 -> spot light\n\n\nfunction getLightTypeIndex(light) {\n  if (light.getPositional()) {\n    if (light.getConeAngle() >= 90) {\n      return 0;\n    }\n\n    return 2;\n  }\n\n  return 1;\n} // ----------------------------------------------------------------------------\n// vtkWebGPURenderer methods\n// ----------------------------------------------------------------------------\n\n/* eslint-disable no-bitwise */\n\n\nfunction vtkWebGPURenderer(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPURenderer'); // Builds myself.\n\n  publicAPI.buildPass = function (prepass) {\n    if (prepass) {\n      if (!model.renderable) {\n        return;\n      }\n\n      model.camera = model.renderable.getActiveCamera();\n      publicAPI.updateLights();\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.camera);\n      publicAPI.addMissingNodes(model.renderable.getViewPropsWithNestedProps());\n      publicAPI.removeUnusedNodes();\n      model.webgpuCamera = publicAPI.getViewNodeFor(model.camera);\n      publicAPI.updateStabilizedMatrix();\n    }\n  };\n\n  publicAPI.updateStabilizedMatrix = function () {\n    // This method is designed to help with floating point\n    // issues when rendering datasets that push the limits of\n    // resolutions on float.\n    //\n    // One of the most common cases is when the dataset is located far\n    // away from the origin relative to the clipping range we are looking\n    // at. For that case we want to perform the floating point sensitive\n    // multiplications on the CPU in double. To this end we want the\n    // vertex rendering ops to look something like\n    //\n    // Compute shifted points and load those into the VBO\n    // pointCoordsSC = WorldToStabilizedMatrix * pointCoords;\n    //\n    // In the vertex shader do the following\n    // positionVC = StabilizedToDeviceMatrix * ModelToStabilizedMatrix*vertexIn;\n    //\n    // We use two matrices because it is expensive to change the\n    // WorldToStabilized matrix as we have to reupload all pointCoords\n    // So that matrix (MCSCMatrix) is fairly static, the Stabilized to\n    // Device matrix is the one that gets updated every time the camera\n    // changes.\n    //\n    // The basic idea is that we should translate the data so that\n    // when the center of the view frustum moves a lot\n    // we recenter it. The center of the view frustum is roughly\n    // camPos + dirOfProj*(far + near)*0.5\n    var clipRange = model.camera.getClippingRange();\n    var pos = model.camera.getPositionByReference();\n    var dop = model.camera.getDirectionOfProjectionByReference();\n    var center = [];\n    var offset = [];\n    vec3.scale(offset, dop, 0.5 * (clipRange[0] + clipRange[1]));\n    vec3.add(center, pos, offset);\n    vec3.sub(offset, center, model.stabilizedCenter);\n    var length = vec3.len(offset);\n\n    if (length / (clipRange[1] - clipRange[0]) > model.recenterThreshold) {\n      model.stabilizedCenter = center;\n      model.stabilizedTime.modified();\n    }\n  };\n\n  publicAPI.updateLights = function () {\n    var count = 0;\n    var lights = model.renderable.getLightsByReference();\n\n    for (var index = 0; index < lights.length; ++index) {\n      if (lights[index].getSwitch() > 0.0) {\n        count++;\n      }\n    }\n\n    if (!count) {\n      vtkDebugMacro('No lights are on, creating one.');\n      model.renderable.createLight();\n    }\n\n    return count;\n  };\n\n  publicAPI.updateUBO = function () {\n    // make sure the data is up to date\n    // has the camera changed?\n    var utime = model.UBO.getSendTime();\n\n    if (model._parent.getMTime() > utime || publicAPI.getMTime() > utime || model.camera.getMTime() > utime || model.renderable.getMTime() > utime) {\n      var _model$renderable$get;\n\n      var keyMats = model.webgpuCamera.getKeyMatrices(publicAPI);\n      model.UBO.setArray('WCVCMatrix', keyMats.wcvc);\n      model.UBO.setArray('SCPCMatrix', keyMats.scpc);\n      model.UBO.setArray('PCSCMatrix', keyMats.pcsc);\n      model.UBO.setArray('SCVCMatrix', keyMats.scvc);\n      model.UBO.setArray('VCPCMatrix', keyMats.vcpc);\n      model.UBO.setArray('WCVCNormals', keyMats.normalMatrix);\n      model.UBO.setValue('LightCount', model.renderable.getLights().length);\n      model.UBO.setValue('MaxEnvironmentMipLevel', (_model$renderable$get = model.renderable.getEnvironmentTexture()) === null || _model$renderable$get === void 0 ? void 0 : _model$renderable$get.getMipLevel());\n      model.UBO.setValue('BackgroundDiffuseStrength', model.renderable.getEnvironmentTextureDiffuseStrength());\n      model.UBO.setValue('BackgroundSpecularStrength', model.renderable.getEnvironmentTextureSpecularStrength());\n      var tsize = publicAPI.getYInvertedTiledSizeAndOrigin();\n      model.UBO.setArray('viewportSize', [tsize.usize, tsize.vsize]);\n      model.UBO.setValue('cameraParallel', model.camera.getParallelProjection());\n\n      var device = model._parent.getDevice();\n\n      model.UBO.sendIfNeeded(device);\n    }\n  };\n\n  publicAPI.updateSSBO = function () {\n    var lights = model.renderable.getLights();\n    var keyMats = model.webgpuCamera.getKeyMatrices(publicAPI);\n    var lightTimeString = \"\".concat(model.renderable.getMTime());\n\n    for (var i = 0; i < lights.length; i++) {\n      lightTimeString += lights[i].getMTime();\n    }\n\n    if (lightTimeString !== model.lightTimeString) {\n      var lightPosArray = new Float32Array(lights.length * 4);\n      var lightDirArray = new Float32Array(lights.length * 4);\n      var lightColorArray = new Float32Array(lights.length * 4);\n      var lightTypeArray = new Float32Array(lights.length * 4);\n\n      for (var _i = 0; _i < lights.length; _i++) {\n        var offset = _i * 4; // Position\n\n        var viewCoordinatePosition = lights[_i].getPosition();\n\n        vec3.transformMat4(viewCoordinatePosition, viewCoordinatePosition, keyMats.wcvc); // viewCoordinatePosition\n\n        lightPosArray[offset] = viewCoordinatePosition[0];\n        lightPosArray[offset + 1] = viewCoordinatePosition[1];\n        lightPosArray[offset + 2] = viewCoordinatePosition[2];\n        lightPosArray[offset + 3] = 0; // Rotation (All are negative to correct for -Z being forward)\n\n        lightDirArray[offset] = -lights[_i].getDirection()[0];\n        lightDirArray[offset + 1] = -lights[_i].getDirection()[1];\n        lightDirArray[offset + 2] = -lights[_i].getDirection()[2];\n        lightDirArray[offset + 3] = 0; // Color\n\n        lightColorArray[offset] = lights[_i].getColor()[0];\n        lightColorArray[offset + 1] = lights[_i].getColor()[1];\n        lightColorArray[offset + 2] = lights[_i].getColor()[2];\n        lightColorArray[offset + 3] = lights[_i].getIntensity() * 5; // arbitrary multiplication to fix the dullness of low value PBR lights\n        // Type\n\n        lightTypeArray[offset] = getLightTypeIndex(lights[_i]); // Type\n\n        lightTypeArray[offset + 1] = Math.cos(radiansFromDegrees(lights[_i].getConeAngle())); // Inner Phi, should probably do some check on these to make sure they dont excede limits\n\n        lightTypeArray[offset + 2] = Math.cos(radiansFromDegrees(lights[_i].getConeAngle() + lights[_i].getConeFalloff())); // Outer Phi\n\n        lightTypeArray[offset + 3] = 0;\n      } // Im not sure how correct this is, but this is what the example does\n      // https://kitware.github.io/vtk-js/api/Rendering_WebGPU_VolumePassFSQ.html\n\n\n      model.SSBO.clearData();\n      model.SSBO.setNumberOfInstances(lights.length);\n      model.SSBO.addEntry('LightPos', 'vec4<f32>'); // Position\n\n      model.SSBO.addEntry('LightDir', 'vec4<f32>'); // Direction\n\n      model.SSBO.addEntry('LightColor', 'vec4<f32>'); // Color (r, g, b, intensity)\n\n      model.SSBO.addEntry('LightData', 'vec4<f32>'); // Other data (type, etc, etc, etc)\n\n      model.SSBO.setAllInstancesFromArray('LightPos', lightPosArray);\n      model.SSBO.setAllInstancesFromArray('LightDir', lightDirArray);\n      model.SSBO.setAllInstancesFromArray('LightColor', lightColorArray);\n      model.SSBO.setAllInstancesFromArray('LightData', lightTypeArray);\n\n      var device = model._parent.getDevice();\n\n      model.SSBO.send(device);\n    }\n\n    model.lightTimeString = lightTimeString;\n  };\n\n  publicAPI.scissorAndViewport = function (encoder) {\n    var tsize = publicAPI.getYInvertedTiledSizeAndOrigin();\n    encoder.getHandle().setViewport(tsize.lowerLeftU, tsize.lowerLeftV, tsize.usize, tsize.vsize, 0.0, 1.0); // set scissor\n\n    encoder.getHandle().setScissorRect(tsize.lowerLeftU, tsize.lowerLeftV, tsize.usize, tsize.vsize);\n  };\n\n  publicAPI.bindUBO = function (renderEncoder) {\n    renderEncoder.activateBindGroup(model.bindGroup);\n  }; // Renders myself\n\n\n  publicAPI.opaquePass = function (prepass) {\n    if (prepass) {\n      model.renderEncoder.begin(model._parent.getCommandEncoder());\n      publicAPI.updateUBO();\n      publicAPI.updateSSBO();\n    } else {\n      publicAPI.scissorAndViewport(model.renderEncoder);\n      publicAPI.clear();\n      model.renderEncoder.end();\n    }\n  };\n\n  publicAPI.clear = function () {\n    var _model$backgroundTex;\n\n    if (model.renderable.getTransparent() || model.suppressClear) {\n      return;\n    }\n\n    var device = model._parent.getDevice(); // Normal Solid Color\n\n\n    if (!model.clearFSQ) {\n      model.clearFSQ = vtkWebGPUFullScreenQuad.newInstance();\n      model.clearFSQ.setDevice(device);\n      model.clearFSQ.setPipelineHash('clearfsq');\n      model.clearFSQ.setFragmentShaderTemplate(clearFragColorTemplate);\n      var ubo = vtkWebGPUUniformBuffer.newInstance({\n        label: 'mapperUBO'\n      });\n      ubo.addEntry('FSQMatrix', 'mat4x4<f32>');\n      ubo.addEntry('BackgroundColor', 'vec4<f32>');\n      model.clearFSQ.setUBO(ubo);\n      model.backgroundTex = model.renderable.getEnvironmentTexture();\n    } // Textured Background\n\n\n    if (model.clearFSQ.getPipelineHash() !== 'clearfsqwithtexture' && model.renderable.getUseEnvironmentTextureAsBackground() && (_model$backgroundTex = model.backgroundTex) !== null && _model$backgroundTex !== void 0 && _model$backgroundTex.getImageLoaded()) {\n      model.clearFSQ.setFragmentShaderTemplate(clearFragTextureTemplate);\n\n      var _ubo = vtkWebGPUUniformBuffer.newInstance({\n        label: 'mapperUBO'\n      });\n\n      _ubo.addEntry('FSQMatrix', 'mat4x4<f32>');\n\n      _ubo.addEntry('BackgroundColor', 'vec4<f32>');\n\n      model.clearFSQ.setUBO(_ubo);\n      var environmentTextureHash = device.getTextureManager().getTextureForVTKTexture(model.backgroundTex);\n\n      if (environmentTextureHash.getReady()) {\n        var tview = environmentTextureHash.createView(\"EnvironmentTexture\");\n        model.clearFSQ.setTextureViews([tview]);\n        model.backgroundTexLoaded = true;\n        var interpolate = model.backgroundTex.getInterpolate() ? 'linear' : 'nearest';\n        tview.addSampler(device, {\n          addressModeU: 'repeat',\n          addressModeV: 'clamp-to-edge',\n          addressModeW: 'repeat',\n          minFilter: interpolate,\n          magFilter: interpolate,\n          mipmapFilter: 'linear'\n        });\n      }\n\n      model.clearFSQ.setPipelineHash('clearfsqwithtexture');\n    } else if (model.clearFSQ.getPipelineHash() === 'clearfsqwithtexture' && !model.renderable.getUseEnvironmentTextureAsBackground()) {\n      // In case the mode is changed at runtime\n      model.clearFSQ = vtkWebGPUFullScreenQuad.newInstance();\n      model.clearFSQ.setDevice(device);\n      model.clearFSQ.setPipelineHash('clearfsq');\n      model.clearFSQ.setFragmentShaderTemplate(clearFragColorTemplate);\n\n      var _ubo2 = vtkWebGPUUniformBuffer.newInstance({\n        label: 'mapperUBO'\n      });\n\n      _ubo2.addEntry('FSQMatrix', 'mat4x4<f32>');\n\n      _ubo2.addEntry('BackgroundColor', 'vec4<f32>');\n\n      model.clearFSQ.setUBO(_ubo2);\n    }\n\n    var keyMats = model.webgpuCamera.getKeyMatrices(publicAPI);\n    var background = model.renderable.getBackgroundByReference();\n    model.clearFSQ.getUBO().setArray('BackgroundColor', background);\n    mat4.transpose(_tNormalMat4, keyMats.normalMatrix);\n    mat4.mul(_fsqClearMat4, keyMats.scvc, keyMats.pcsc);\n    mat4.mul(_fsqClearMat4, _tNormalMat4, _fsqClearMat4);\n    model.clearFSQ.getUBO().setArray('FSQMatrix', _fsqClearMat4);\n    model.clearFSQ.getUBO().sendIfNeeded(device);\n    model.clearFSQ.prepareAndDraw(model.renderEncoder);\n  };\n\n  publicAPI.translucentPass = function (prepass) {\n    if (prepass) {\n      model.renderEncoder.begin(model._parent.getCommandEncoder());\n    } else {\n      publicAPI.scissorAndViewport(model.renderEncoder);\n      model.renderEncoder.end();\n    }\n  };\n\n  publicAPI.volumeDepthRangePass = function (prepass) {\n    if (prepass) {\n      model.renderEncoder.begin(model._parent.getCommandEncoder());\n    } else {\n      publicAPI.scissorAndViewport(model.renderEncoder);\n      model.renderEncoder.end();\n    }\n  };\n\n  publicAPI.getAspectRatio = function () {\n    var size = model._parent.getSizeByReference();\n\n    var viewport = model.renderable.getViewportByReference();\n    return size[0] * (viewport[2] - viewport[0]) / ((viewport[3] - viewport[1]) * size[1]);\n  };\n\n  publicAPI.convertToOpenGLDepth = function (val) {\n    return model.webgpuCamera.convertToOpenGLDepth(val);\n  };\n\n  publicAPI.getYInvertedTiledSizeAndOrigin = function () {\n    var res = publicAPI.getTiledSizeAndOrigin();\n\n    var size = model._parent.getSizeByReference();\n\n    res.lowerLeftV = size[1] - res.vsize - res.lowerLeftV;\n    return res;\n  };\n\n  publicAPI.getTiledSizeAndOrigin = function () {\n    var vport = model.renderable.getViewportByReference(); // if there is no window assume 0 1\n\n    var tileViewPort = [0.0, 0.0, 1.0, 1.0]; // find the lower left corner of the viewport, taking into account the\n    // lower left boundary of this tile\n\n    var vpu = vport[0] - tileViewPort[0];\n    var vpv = vport[1] - tileViewPort[1]; // store the result as a pixel value\n\n    var ndvp = model._parent.normalizedDisplayToDisplay(vpu, vpv);\n\n    var lowerLeftU = Math.round(ndvp[0]);\n    var lowerLeftV = Math.round(ndvp[1]); // find the upper right corner of the viewport, taking into account the\n    // lower left boundary of this tile\n\n    var vpu2 = vport[2] - tileViewPort[0];\n    var vpv2 = vport[3] - tileViewPort[1];\n\n    var ndvp2 = model._parent.normalizedDisplayToDisplay(vpu2, vpv2); // now compute the size of the intersection of the viewport with the\n    // current tile\n\n\n    var usize = Math.round(ndvp2[0]) - lowerLeftU;\n    var vsize = Math.round(ndvp2[1]) - lowerLeftV;\n\n    if (usize < 0) {\n      usize = 0;\n    }\n\n    if (vsize < 0) {\n      vsize = 0;\n    }\n\n    return {\n      usize: usize,\n      vsize: vsize,\n      lowerLeftU: lowerLeftU,\n      lowerLeftV: lowerLeftV\n    };\n  };\n\n  publicAPI.getPropFromID = function (id) {\n    for (var i = 0; i < model.children.length; i++) {\n      var res = model.children[i].getPropID ? model.children[i].getPropID() : -1;\n\n      if (res === id) {\n        return model.children[i];\n      }\n    }\n\n    return null;\n  };\n\n  publicAPI.getStabilizedTime = function () {\n    return model.stabilizedTime.getMTime();\n  };\n\n  publicAPI.releaseGraphicsResources = function () {\n    if (model.selector !== null) {\n      model.selector.releaseGraphicsResources();\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  bindGroup: null,\n  selector: null,\n  renderEncoder: null,\n  recenterThreshold: 20.0,\n  suppressClear: false,\n  stabilizedCenter: [0.0, 0.0, 0.0]\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues); // UBO\n\n  model.UBO = vtkWebGPUUniformBuffer.newInstance({\n    label: 'rendererUBO'\n  });\n  model.UBO.addEntry('WCVCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('SCPCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('PCSCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('SCVCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('VCPCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('WCVCNormals', 'mat4x4<f32>');\n  model.UBO.addEntry('viewportSize', 'vec2<f32>');\n  model.UBO.addEntry('LightCount', 'i32');\n  model.UBO.addEntry('MaxEnvironmentMipLevel', 'f32');\n  model.UBO.addEntry('BackgroundDiffuseStrength', 'f32');\n  model.UBO.addEntry('BackgroundSpecularStrength', 'f32');\n  model.UBO.addEntry('cameraParallel', 'u32'); // SSBO (Light data)\n\n  model.SSBO = vtkWebGPUStorageBuffer.newInstance({\n    label: 'rendererLightSSBO'\n  });\n  model.lightTimeString = '';\n  model.bindGroup = vtkWebGPUBindGroup.newInstance({\n    label: 'rendererBG'\n  });\n  model.bindGroup.setBindables([model.UBO, model.SSBO]);\n  model.tmpMat4 = mat4.identity(new Float64Array(16));\n  model.stabilizedTime = {};\n  obj(model.stabilizedTime, {\n    mtime: 0\n  }); // Build VTK API\n\n  get(publicAPI, model, ['bindGroup', 'stabilizedTime']);\n  getArray(publicAPI, model, ['stabilizedCenter']);\n  setGet(publicAPI, model, ['renderEncoder', 'selector', 'suppressClear', 'UBO']); // Object methods\n\n  vtkWebGPURenderer(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkWebGPURenderer'); // ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to WebGPU backend if imported\n\nregisterOverride('vtkRenderer', newInstance);\n\nexport { index as default, extend, newInstance };\n", "import macro from '../../macros.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// vtkWebGPUPixelSpaceCallbackMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUPixelSpaceCallbackMapper(publicAPI, model) {\n  model.classHierarchy.push('vtkWebGPUPixelSpaceCallbackMapper');\n\n  publicAPI.opaquePass = function (prepass, renderPass) {\n    model.WebGPURenderer = publicAPI.getFirstAncestorOfType('vtkWebGPURenderer');\n    model.WebGPURenderWindow = model.WebGPURenderer.getParent();\n    var aspectRatio = model.WebGPURenderer.getAspectRatio();\n    var camera = model.WebGPURenderer ? model.WebGPURenderer.getRenderable().getActiveCamera() : null;\n    var tsize = model.WebGPURenderer.getTiledSizeAndOrigin();\n    var texels = null;\n\n    if (model.renderable.getUseZValues()) ;\n\n    model.renderable.invokeCallback(model.renderable.getInputData(), camera, aspectRatio, tsize, texels);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues); // Object methods\n\n  vtkWebGPUPixelSpaceCallbackMapper(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkWebGPUPixelSpaceCallbackMapper'); // ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to WebGPU backend if imported\n\nregisterOverride('vtkPixelSpaceCallbackMapper', newInstance);\n\nexport { index as default, extend, newInstance };\n", "var vtkPolyDataVS = \"//VTK::System::Dec\\n\\n/*=========================================================================\\n\\n  Program:   Visualization Toolkit\\n  Module:    vtkPolyDataVS.glsl\\n\\n  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\\n  All rights reserved.\\n  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.\\n\\n     This software is distributed WITHOUT ANY WARRANTY; without even\\n     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\\n     PURPOSE.  See the above copyright notice for more information.\\n\\n=========================================================================*/\\n\\nattribute vec4 vertexMC;\\n\\n// frag position in VC\\n//VTK::PositionVC::Dec\\n\\n// optional normal declaration\\n//VTK::Normal::Dec\\n\\n// extra lighting parameters\\n//VTK::Light::Dec\\n\\n// Texture coordinates\\n//VTK::TCoord::Dec\\n\\n// material property values\\n//VTK::Color::Dec\\n\\n// clipping plane vars\\n//VTK::Clip::Dec\\n\\n// camera and actor matrix values\\n//VTK::Camera::Dec\\n\\n// Apple Bug\\n//VTK::PrimID::Dec\\n\\n// picking support\\n//VTK::Picking::Dec\\n\\nvoid main()\\n{\\n  //VTK::Color::Impl\\n\\n  //VTK::Normal::Impl\\n\\n  //VTK::TCoord::Impl\\n\\n  //VTK::Clip::Impl\\n\\n  //VTK::PrimID::Impl\\n\\n  //VTK::PositionVC::Impl\\n\\n  //VTK::Light::Impl\\n\\n  //VTK::Picking::Impl\\n}\\n\";\n\nexport { vtkPolyDataVS as v };\n", "var vtkPolyDataFS = \"//VTK::System::Dec\\n\\n/*=========================================================================\\n\\n  Program:   Visualization Toolkit\\n  Module:    vtkPolyDataFS.glsl\\n\\n  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\\n  All rights reserved.\\n  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.\\n\\n     This software is distributed WITHOUT ANY WARRANTY; without even\\n     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\\n     PURPOSE.  See the above copyright notice for more information.\\n\\n=========================================================================*/\\n// Template for the polydata mappers fragment shader\\n\\nuniform int PrimitiveIDOffset;\\n\\n// VC position of this fragment\\n//VTK::PositionVC::Dec\\n\\n// optional color passed in from the vertex shader, vertexColor\\n//VTK::Color::Dec\\n\\n// optional surface normal declaration\\n//VTK::Normal::Dec\\n\\n// extra lighting parameters\\n//VTK::Light::Dec\\n\\n// Texture coordinates\\n//VTK::TCoord::Dec\\n\\n// picking support\\n//VTK::Picking::Dec\\n\\n// Depth Peeling Support\\n//VTK::DepthPeeling::Dec\\n\\n// clipping plane vars\\n//VTK::Clip::Dec\\n\\n// the output of this shader\\n//VTK::Output::Dec\\n\\n// Apple Bug\\n//VTK::PrimID::Dec\\n\\n// handle coincident offsets\\n//VTK::Coincident::Dec\\n\\n//VTK::ZBuffer::Dec\\n\\nvoid main()\\n{\\n  // VC position of this fragment. This should not branch/return/discard.\\n  //VTK::PositionVC::Impl\\n\\n  // Place any calls that require uniform flow (e.g. dFdx) here.\\n  //VTK::UniformFlow::Impl\\n\\n  // Set gl_FragDepth here (gl_FragCoord.z by default)\\n  //VTK::Depth::Impl\\n\\n  // Early depth peeling abort:\\n  //VTK::DepthPeeling::PreColor\\n\\n  // Apple Bug\\n  //VTK::PrimID::Impl\\n\\n  //VTK::Clip::Impl\\n\\n  //VTK::Color::Impl\\n\\n  // Generate the normal if we are not passed in one\\n  //VTK::Normal::Impl\\n\\n  //VTK::TCoord::Impl\\n\\n  //VTK::Light::Impl\\n\\n  if (gl_FragData[0].a <= 0.0)\\n    {\\n    discard;\\n    }\\n\\n  //VTK::DepthPeeling::Impl\\n\\n  //VTK::Picking::Impl\\n\\n  // handle coincident offsets\\n  //VTK::Coincident::Impl\\n\\n  //VTK::ZBuffer::Impl\\n\\n  //VTK::RenderPassFragmentShader::Impl\\n}\\n\";\n\nexport { vtkPolyDataFS as v };\n", "import vtkShaderProgram from './ShaderProgram.js';\n\nfunction implementReplaceShaderCoincidentOffset(publicAPI, model) {\n\n  publicAPI.replaceShaderCoincidentOffset = function (shaders, ren, actor) {\n    var cp = publicAPI.getCoincidentParameters(ren, actor); // if we need an offset handle it here\n    // The value of .000016 is suitable for depth buffers\n    // of at least 16 bit depth. We do not query the depth\n    // right now because we would need some mechanism to\n    // cache the result taking into account FBO changes etc.\n\n    if (cp && (cp.factor !== 0.0 || cp.offset !== 0.0)) {\n      var FSSource = shaders.Fragment;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Coincident::Dec', ['uniform float cfactor;', 'uniform float coffset;']).result;\n\n      if (model.context.getExtension('EXT_frag_depth')) {\n        if (cp.factor !== 0.0) {\n          FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::UniformFlow::Impl', ['float cscale = length(vec2(dFdx(gl_FragCoord.z),dFdy(gl_FragCoord.z)));', '//VTK::UniformFlow::Impl'], false).result;\n          FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Depth::Impl', 'gl_FragDepthEXT = gl_FragCoord.z + cfactor*cscale + 0.000016*coffset;').result;\n        } else {\n          FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Depth::Impl', 'gl_FragDepthEXT = gl_FragCoord.z + 0.000016*coffset;').result;\n        }\n      }\n\n      if (model._openGLRenderWindow.getWebgl2()) {\n        if (cp.factor !== 0.0) {\n          FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::UniformFlow::Impl', ['float cscale = length(vec2(dFdx(gl_FragCoord.z),dFdy(gl_FragCoord.z)));', '//VTK::UniformFlow::Impl'], false).result;\n          FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Depth::Impl', 'gl_FragDepth = gl_FragCoord.z + cfactor*cscale + 0.000016*coffset;').result;\n        } else {\n          FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Depth::Impl', 'gl_FragDepth = gl_FragCoord.z + 0.000016*coffset;').result;\n        }\n      }\n\n      shaders.Fragment = FSSource;\n    }\n  };\n}\n\nvar vtkReplacementShaderMapper = {\n  implementReplaceShaderCoincidentOffset: implementReplaceShaderCoincidentOffset\n};\n\nexport { vtkReplacementShaderMapper as default };\n"],
  "mappings": "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",
  "names": ["newInstance", "newInstance", "vtkDebugMacro", "DEFAULT_VALUES", "extend", "newInstance", "newInstance", "vtkDebugMacro", "DEFAULT_VALUES", "extend", "newInstance", "newInstance", "DEFAULT_VALUES", "extend", "newInstance", "registerOverride", "newInstance", "vtkDebugMacro", "DEFAULT_VALUES", "extend", "newInstance", "registerOverride", "newInstance", "DEFAULT_VALUES", "extend", "newInstance", "registerOverride", "newInstance"]
}
