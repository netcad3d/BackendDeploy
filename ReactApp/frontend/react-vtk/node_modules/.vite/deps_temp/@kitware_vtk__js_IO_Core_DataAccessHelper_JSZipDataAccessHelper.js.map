{
  "version": 3,
  "sources": ["../../@kitware/vtk.js/IO/Core/DataAccessHelper/JSZipDataAccessHelper.js", "dep:@kitware_vtk__js_IO_Core_DataAccessHelper_JSZipDataAccessHelper"],
  "sourcesContent": ["import { strToU8, unzipSync, strFromU8, decompressSync } from 'fflate';\nimport macro from '../../../macros.js';\nimport Endian from '../../../Common/Core/Endian.js';\nimport { DataTypeByteSize } from '../../../Common/Core/DataArray/Constants.js';\nimport { registerType } from '../DataAccessHelper.js';\nimport { fromArrayBuffer } from '../../../Common/Core/Base64.js';\n\nvar vtkErrorMacro = macro.vtkErrorMacro,\n    vtkDebugMacro = macro.vtkDebugMacro;\n\nfunction toMimeType(url) {\n  var ext = url.split('.').pop().toLowerCase();\n\n  if (ext === 'jpg') {\n    return 'jpeg';\n  }\n\n  return ext;\n}\n\nfunction handleUint8Array(array, compression, done) {\n  return function (uint8array) {\n    array.buffer = new ArrayBuffer(uint8array.length); // copy uint8array to buffer\n\n    var view = new Uint8Array(array.buffer);\n    view.set(uint8array);\n\n    if (compression) {\n      if (array.dataType === 'string' || array.dataType === 'JSON') {\n        array.buffer = strFromU8(decompressSync(new Uint8Array(array.buffer)));\n      } else {\n        array.buffer = decompressSync(new Uint8Array(array.buffer)).buffer;\n      }\n    }\n\n    if (array.ref.encode === 'JSON') {\n      array.values = JSON.parse(array.buffer);\n    } else {\n      if (Endian.ENDIANNESS !== array.ref.encode && Endian.ENDIANNESS) {\n        // Need to swap bytes\n        vtkDebugMacro(\"Swap bytes of \".concat(array.name));\n        Endian.swapBytes(array.buffer, DataTypeByteSize[array.dataType]);\n      }\n\n      array.values = macro.newTypedArray(array.dataType, array.buffer);\n    }\n\n    if (array.values.length !== array.size) {\n      vtkErrorMacro(\"Error in FetchArray: \".concat(array.name, \" does not have the proper array size. Got \").concat(array.values.length, \", instead of \").concat(array.size));\n    }\n\n    done();\n  };\n}\n\nfunction handleString(array, compression, done) {\n  return function (string) {\n    if (compression) {\n      array.values = JSON.parse(strFromU8(decompressSync(string)));\n    } else {\n      array.values = JSON.parse(string);\n    }\n\n    done();\n  };\n}\n\nfunction removeLeadingSlash(str) {\n  return str[0] === '/' ? str.substr(1) : str;\n}\n\nfunction normalizePath(str) {\n  return new URL(str, 'http://any').pathname;\n}\n\nfunction cleanUpPath(str) {\n  return removeLeadingSlash(normalizePath(str));\n}\n\nfunction unpack(zipContent) {\n  return new Promise(function (resolve, reject) {\n    if (typeof zipContent === 'string') {\n      resolve(strToU8(zipContent));\n    } else if (zipContent instanceof Blob) {\n      resolve(zipContent.arrayBuffer().then(function (ab) {\n        return new Uint8Array(ab);\n      }));\n    } else if (zipContent instanceof ArrayBuffer) {\n      resolve(new Uint8Array(zipContent));\n    } else if ((zipContent === null || zipContent === void 0 ? void 0 : zipContent.buffer) instanceof ArrayBuffer) {\n      resolve(new Uint8Array(zipContent.buffer));\n    } else {\n      reject(new Error('Invalid datatype to unpack.'));\n    }\n  });\n}\n\nfunction create(createOptions) {\n  var ready = false;\n  var requestCount = 0;\n  var decompressedFiles = null;\n  var fullRootPath = '';\n  unpack(createOptions.zipContent).then(function (zipFileData) {\n    decompressedFiles = unzipSync(zipFileData);\n    ready = true; // Find root index.json\n\n    var metaFiles = [];\n    Object.keys(decompressedFiles).forEach(function (relativePath) {\n      if (relativePath.endsWith('index.json')) {\n        metaFiles.push(relativePath);\n      }\n    });\n    metaFiles.sort(function (a, b) {\n      return a.length - b.length;\n    }); // if not empty, then fullRootPath will have a forward slash suffix\n\n    fullRootPath = metaFiles[0].replace(/index\\.json$/, '');\n\n    if (createOptions.callback) {\n      createOptions.callback(decompressedFiles);\n    }\n  });\n  return {\n    fetchArray: function fetchArray(instance, baseURL, array) {\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      return new Promise(function (resolve, reject) {\n        if (!ready) {\n          vtkErrorMacro('ERROR!!! zip not ready...');\n        }\n\n        var url = cleanUpPath([baseURL, array.ref.basepath, options.compression ? \"\".concat(array.ref.id, \".gz\") : array.ref.id].join('/'));\n\n        if (++requestCount === 1 && instance !== null && instance !== void 0 && instance.invokeBusy) {\n          instance.invokeBusy(true);\n        }\n\n        function doneCleanUp() {\n          // Done with the ref and work\n          delete array.ref;\n\n          if (--requestCount === 0 && instance !== null && instance !== void 0 && instance.invokeBusy) {\n            instance.invokeBusy(false);\n          }\n\n          if (instance !== null && instance !== void 0 && instance.modified) {\n            instance.modified();\n          }\n\n          resolve(array);\n        }\n\n        var fileData = decompressedFiles[\"\".concat(fullRootPath).concat(url)];\n\n        if (array.dataType === 'string' && !options.compression) {\n          // string\n          var handler = handleString(array, options.compression, doneCleanUp);\n          handler(strFromU8(fileData));\n        } else {\n          // uint8array\n          var _handler = handleUint8Array(array, options.compression, doneCleanUp);\n\n          _handler(fileData);\n        }\n      });\n    },\n    fetchJSON: function fetchJSON(instance, url) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var path = cleanUpPath(url);\n\n      if (!ready) {\n        vtkErrorMacro('ERROR!!! zip not ready...');\n      }\n\n      var fileData = decompressedFiles[\"\".concat(fullRootPath).concat(path)];\n\n      if (options.compression) {\n        if (options.compression === 'gz') {\n          var str = strFromU8(decompressSync(fileData));\n          return Promise.resolve(JSON.parse(str));\n        }\n\n        return Promise.reject(new Error('Invalid compression'));\n      }\n\n      return Promise.resolve(JSON.parse(strFromU8(fileData)));\n    },\n    fetchText: function fetchText(instance, url) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var path = cleanUpPath(url);\n\n      if (!ready) {\n        vtkErrorMacro('ERROR!!! zip not ready...');\n      }\n\n      var fileData = decompressedFiles[\"\".concat(fullRootPath).concat(path)];\n\n      if (options.compression) {\n        if (options.compression === 'gz') {\n          return Promise.resolve(strFromU8(unzipSync(fileData)));\n        }\n\n        return Promise.reject(new Error('Invalid compression'));\n      }\n\n      return Promise.resolve(strFromU8(fileData));\n    },\n    fetchImage: function fetchImage(instance, url) {\n      var path = cleanUpPath(url);\n\n      if (!ready) {\n        vtkErrorMacro('ERROR!!! zip not ready...');\n      }\n\n      var fileData = decompressedFiles[\"\".concat(fullRootPath).concat(path)];\n      return new Promise(function (resolve, reject) {\n        var img = new Image();\n\n        img.onload = function () {\n          return resolve(img);\n        };\n\n        img.onerror = reject;\n        var str = fromArrayBuffer(fileData.buffer);\n        img.src = \"data:image/\".concat(toMimeType(path), \";base64,\").concat(str);\n      });\n    },\n    fetchBinary: function fetchBinary(instance, url) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var path = cleanUpPath(url);\n\n      if (!ready) {\n        vtkErrorMacro('ERROR!!! zip not ready...');\n      }\n\n      var fileData = decompressedFiles[\"\".concat(fullRootPath).concat(path)];\n\n      if (options.compression) {\n        if (options.compression === 'gz') {\n          return Promise.resolve(decompressSync(fileData).buffer);\n        }\n\n        return Promise.reject(new Error('Invalid compression'));\n      }\n\n      return Promise.resolve(fileData.buffer);\n    }\n  };\n}\n\nvar JSZipDataAccessHelper = {\n  create: create\n};\nregisterType('zip', function (options) {\n  return JSZipDataAccessHelper.create(options);\n});\n\nexport { JSZipDataAccessHelper as default };\n", "import d from \"./node_modules/@kitware/vtk.js/IO/Core/DataAccessHelper/JSZipDataAccessHelper.js\";export default d;"],
  "mappings": "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",
  "names": []
}
