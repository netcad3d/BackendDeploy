import "./chunk-QQN2ZB6Y.js";
import "./chunk-ECMUJBJB.js";
import "./chunk-XMTP2BGC.js";
import "./chunk-CPX3F44X.js";
import "./chunk-WDDAGUM6.js";
import {
  vtkRenderer$1
} from "./chunk-CVQLE3V5.js";
import {
  vtkRenderWindow$1
} from "./chunk-5C4CJZQ5.js";
import "./chunk-BVZBITDV.js";
import "./chunk-WDLUFC57.js";
import "./chunk-FOQ7GAAT.js";
import "./chunk-DG5VRK2V.js";
import "./chunk-MXMJXURM.js";
import "./chunk-AAZ2P47N.js";
import "./chunk-CNJU7J6N.js";
import "./chunk-C4WBDD4G.js";
import "./chunk-N3Z342Y4.js";
import "./chunk-PIUKKK4M.js";
import "./chunk-XT2DETPC.js";
import "./chunk-Z2LVQNSU.js";
import {
  vtkInteractorStyleTrackballCamera$1
} from "./chunk-VE7E4T5X.js";
import {
  vtkRenderWindowInteractor$1
} from "./chunk-QYAAEY2I.js";
import "./chunk-Z5OKWKLG.js";
import "./chunk-SWDS6M4V.js";
import "./chunk-GC37RKNO.js";
import {
  vtkURLExtract
} from "./chunk-TZFPXST2.js";
import "./chunk-IC3JHQHE.js";
import "./chunk-SXNZFZKA.js";
import "./chunk-FOWOP5PK.js";
import {
  _toConsumableArray,
  macro
} from "./chunk-OTTIIP4A.js";
import "./chunk-HKWV5KNA.js";
import "./chunk-XL65WI7U.js";
import "./chunk-HUBM7RA2.js";

// node_modules/@kitware/vtk.js/Rendering/Misc/FullScreenRenderWindow.js
var userParams = vtkURLExtract.extractURLParameters();
var STYLE_CONTAINER = {
  margin: "0",
  padding: "0",
  position: "absolute",
  top: "0",
  left: "0",
  width: "100%",
  height: "100%",
  overflow: "hidden"
};
var STYLE_CONTROL_PANEL = {
  position: "absolute",
  left: "25px",
  top: "25px",
  backgroundColor: "white",
  borderRadius: "5px",
  listStyle: "none",
  padding: "5px 10px",
  margin: "0",
  display: "block",
  border: "solid 1px black",
  maxWidth: "calc(100% - 70px)",
  maxHeight: "calc(100% - 60px)",
  overflow: "auto"
};
function applyStyle(el, style) {
  Object.keys(style).forEach(function(key) {
    el.style[key] = style[key];
  });
}
function vtkFullScreenRenderWindow(publicAPI, model) {
  model.classHierarchy.push("vtkFullScreenRenderWindow");
  var body = document.querySelector("body");
  if (!model.rootContainer) {
    model.rootContainer = body;
  }
  if (!model.container) {
    model.container = document.createElement("div");
    applyStyle(model.container, model.containerStyle || STYLE_CONTAINER);
    model.rootContainer.appendChild(model.container);
  }
  if (model.rootContainer === body) {
    document.documentElement.style.height = "100%";
    body.style.height = "100%";
    body.style.padding = "0";
    body.style.margin = "0";
  }
  model.renderWindow = vtkRenderWindow$1.newInstance();
  model.renderer = vtkRenderer$1.newInstance();
  model.renderWindow.addRenderer(model.renderer);
  model.apiSpecificRenderWindow = model.renderWindow.newAPISpecificView(userParams.viewAPI);
  model.apiSpecificRenderWindow.setContainer(model.container);
  model.renderWindow.addView(model.apiSpecificRenderWindow);
  model.interactor = vtkRenderWindowInteractor$1.newInstance();
  model.interactor.setInteractorStyle(vtkInteractorStyleTrackballCamera$1.newInstance());
  model.interactor.setView(model.apiSpecificRenderWindow);
  model.interactor.initialize();
  model.interactor.bindEvents(model.container);
  publicAPI.setBackground = model.renderer.setBackground;
  publicAPI.removeController = function() {
    var el = model.controlContainer;
    if (el) {
      el.parentNode.removeChild(el);
    }
  };
  publicAPI.setControllerVisibility = function(visible) {
    model.controllerVisibility = visible;
    if (model.controlContainer) {
      if (visible) {
        model.controlContainer.style.display = "block";
      } else {
        model.controlContainer.style.display = "none";
      }
    }
  };
  publicAPI.toggleControllerVisibility = function() {
    publicAPI.setControllerVisibility(!model.controllerVisibility);
  };
  publicAPI.addController = function(html) {
    model.controlContainer = document.createElement("div");
    applyStyle(model.controlContainer, model.controlPanelStyle || STYLE_CONTROL_PANEL);
    model.rootContainer.appendChild(model.controlContainer);
    model.controlContainer.innerHTML = html;
    publicAPI.setControllerVisibility(model.controllerVisibility);
    model.rootContainer.addEventListener("keypress", function(e) {
      if (String.fromCharCode(e.charCode) === "c") {
        publicAPI.toggleControllerVisibility();
      }
    });
  };
  publicAPI.setBackground.apply(publicAPI, _toConsumableArray(model.background));
  publicAPI.addRepresentation = function(representation) {
    representation.getActors().forEach(function(actor) {
      model.renderer.addActor(actor);
    });
  };
  publicAPI.removeRepresentation = function(representation) {
    representation.getActors().forEach(function(actor) {
      return model.renderer.removeActor(actor);
    });
  };
  publicAPI.delete = macro.chain(publicAPI.setContainer, model.apiSpecificRenderWindow.delete, publicAPI.delete);
  publicAPI.resize = function() {
    var dims = model.container.getBoundingClientRect();
    var devicePixelRatio = window.devicePixelRatio || 1;
    model.apiSpecificRenderWindow.setSize(Math.floor(dims.width * devicePixelRatio), Math.floor(dims.height * devicePixelRatio));
    if (model.resizeCallback) {
      model.resizeCallback(dims);
    }
    model.renderWindow.render();
  };
  publicAPI.setResizeCallback = function(cb) {
    model.resizeCallback = cb;
    publicAPI.resize();
  };
  if (model.listenWindowResize) {
    window.addEventListener("resize", publicAPI.resize);
  }
  publicAPI.resize();
}
var DEFAULT_VALUES = {
  background: [0.32, 0.34, 0.43],
  containerStyle: null,
  controlPanelStyle: null,
  listenWindowResize: true,
  resizeCallback: null,
  controllerVisibility: true
};
function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues);
  macro.obj(publicAPI, model);
  macro.get(publicAPI, model, ["renderWindow", "renderer", "apiSpecificRenderWindow", "interactor", "rootContainer", "container", "controlContainer"]);
  vtkFullScreenRenderWindow(publicAPI, model);
}
var newInstance = macro.newInstance(extend);
var vtkFullScreenRenderWindow$1 = {
  newInstance,
  extend
};

// dep:@kitware_vtk__js_Rendering_Misc_FullScreenRenderWindow
var kitware_vtk_js_Rendering_Misc_FullScreenRenderWindow_default = vtkFullScreenRenderWindow$1;
export {
  kitware_vtk_js_Rendering_Misc_FullScreenRenderWindow_default as default,
  extend,
  newInstance
};
//# sourceMappingURL=@kitware_vtk__js_Rendering_Misc_FullScreenRenderWindow.js.map
