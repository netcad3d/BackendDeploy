import {
  Constants
} from "./chunk-6RJ4JBDV.js";
import {
  vtkColorTransferFunction$1
} from "./chunk-SA4CS7MQ.js";
import "./chunk-MXMJXURM.js";
import "./chunk-AAZ2P47N.js";
import {
  vtkProp3D$1
} from "./chunk-N3Z342Y4.js";
import "./chunk-Z5OKWKLG.js";
import "./chunk-SWDS6M4V.js";
import {
  mat4_exports,
  vec3_exports
} from "./chunk-GC37RKNO.js";
import {
  vtkBoundingBox
} from "./chunk-IC3JHQHE.js";
import {
  vtkPiecewiseFunction$1
} from "./chunk-NFGX4TKP.js";
import "./chunk-SXNZFZKA.js";
import "./chunk-FOWOP5PK.js";
import {
  macro
} from "./chunk-OTTIIP4A.js";
import {
  _defineProperty
} from "./chunk-HKWV5KNA.js";
import "./chunk-XL65WI7U.js";
import "./chunk-HUBM7RA2.js";

// node_modules/@kitware/vtk.js/Rendering/Core/VolumeProperty.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var InterpolationType = Constants.InterpolationType;
var OpacityMode = Constants.OpacityMode;
var vtkErrorMacro = macro.vtkErrorMacro;
var VTK_MAX_VRCOMP = 4;
function vtkVolumeProperty(publicAPI, model) {
  model.classHierarchy.push("vtkVolumeProperty");
  publicAPI.getMTime = function() {
    var mTime = model.mtime;
    var time;
    for (var index = 0; index < VTK_MAX_VRCOMP; index++) {
      if (model.componentData[index].colorChannels === 1) {
        if (model.componentData[index].grayTransferFunction) {
          time = model.componentData[index].grayTransferFunction.getMTime();
          mTime = mTime > time ? mTime : time;
        }
      } else if (model.componentData[index].colorChannels === 3) {
        if (model.componentData[index].rGBTransferFunction) {
          time = model.componentData[index].rGBTransferFunction.getMTime();
          mTime = mTime > time ? mTime : time;
        }
      }
      if (model.componentData[index].scalarOpacity) {
        time = model.componentData[index].scalarOpacity.getMTime();
        mTime = mTime > time ? mTime : time;
      }
      if (model.componentData[index].gradientOpacity) {
        if (!model.componentData[index].disableGradientOpacity) {
          time = model.componentData[index].gradientOpacity.getMTime();
          mTime = mTime > time ? mTime : time;
        }
      }
    }
    return mTime;
  };
  publicAPI.getColorChannels = function(index) {
    if (index < 0 || index > 3) {
      vtkErrorMacro("Bad index - must be between 0 and 3");
      return 0;
    }
    return model.componentData[index].colorChannels;
  };
  publicAPI.setGrayTransferFunction = function(index, func) {
    var modified = false;
    if (model.componentData[index].grayTransferFunction !== func) {
      model.componentData[index].grayTransferFunction = func;
      modified = true;
    }
    if (model.componentData[index].colorChannels !== 1) {
      model.componentData[index].colorChannels = 1;
      modified = true;
    }
    if (modified) {
      publicAPI.modified();
    }
    return modified;
  };
  publicAPI.getGrayTransferFunction = function(index) {
    if (model.componentData[index].grayTransferFunction === null) {
      model.componentData[index].grayTransferFunction = vtkPiecewiseFunction$1.newInstance();
      model.componentData[index].grayTransferFunction.addPoint(0, 0);
      model.componentData[index].grayTransferFunction.addPoint(1024, 1);
      if (model.componentData[index].colorChannels !== 1) {
        model.componentData[index].colorChannels = 1;
      }
      publicAPI.modified();
    }
    return model.componentData[index].grayTransferFunction;
  };
  publicAPI.setRGBTransferFunction = function(index, func) {
    var modified = false;
    if (model.componentData[index].rGBTransferFunction !== func) {
      model.componentData[index].rGBTransferFunction = func;
      modified = true;
    }
    if (model.componentData[index].colorChannels !== 3) {
      model.componentData[index].colorChannels = 3;
      modified = true;
    }
    if (modified) {
      publicAPI.modified();
    }
    return modified;
  };
  publicAPI.getRGBTransferFunction = function(index) {
    if (model.componentData[index].rGBTransferFunction === null) {
      model.componentData[index].rGBTransferFunction = vtkColorTransferFunction$1.newInstance();
      model.componentData[index].rGBTransferFunction.addRGBPoint(0, 0, 0, 0);
      model.componentData[index].rGBTransferFunction.addRGBPoint(1024, 1, 1, 1);
      if (model.componentData[index].colorChannels !== 3) {
        model.componentData[index].colorChannels = 3;
      }
      publicAPI.modified();
    }
    return model.componentData[index].rGBTransferFunction;
  };
  publicAPI.setScalarOpacity = function(index, func) {
    if (model.componentData[index].scalarOpacity !== func) {
      model.componentData[index].scalarOpacity = func;
      publicAPI.modified();
      return true;
    }
    return false;
  };
  publicAPI.getScalarOpacity = function(index) {
    if (model.componentData[index].scalarOpacity === null) {
      model.componentData[index].scalarOpacity = vtkPiecewiseFunction$1.newInstance();
      model.componentData[index].scalarOpacity.addPoint(0, 1);
      model.componentData[index].scalarOpacity.addPoint(1024, 1);
      publicAPI.modified();
    }
    return model.componentData[index].scalarOpacity;
  };
  publicAPI.setComponentWeight = function(index, value) {
    if (index < 0 || index >= VTK_MAX_VRCOMP) {
      vtkErrorMacro("Invalid index");
      return false;
    }
    var val = Math.min(1, Math.max(0, value));
    if (model.componentData[index].componentWeight !== val) {
      model.componentData[index].componentWeight = val;
      publicAPI.modified();
      return true;
    }
    return false;
  };
  publicAPI.getComponentWeight = function(index) {
    if (index < 0 || index >= VTK_MAX_VRCOMP) {
      vtkErrorMacro("Invalid index");
      return 0;
    }
    return model.componentData[index].componentWeight;
  };
  publicAPI.setInterpolationTypeToNearest = function() {
    return publicAPI.setInterpolationType(InterpolationType.NEAREST);
  };
  publicAPI.setInterpolationTypeToLinear = function() {
    return publicAPI.setInterpolationType(InterpolationType.LINEAR);
  };
  publicAPI.setInterpolationTypeToFastLinear = function() {
    return publicAPI.setInterpolationType(InterpolationType.FAST_LINEAR);
  };
  publicAPI.getInterpolationTypeAsString = function() {
    return macro.enumToString(InterpolationType, model.interpolationType);
  };
  var sets = ["useGradientOpacity", "scalarOpacityUnitDistance", "gradientOpacityMinimumValue", "gradientOpacityMinimumOpacity", "gradientOpacityMaximumValue", "gradientOpacityMaximumOpacity", "opacityMode"];
  sets.forEach(function(val) {
    var cap = macro.capitalize(val);
    publicAPI["set".concat(cap)] = function(index, value) {
      if (model.componentData[index]["".concat(val)] !== value) {
        model.componentData[index]["".concat(val)] = value;
        publicAPI.modified();
        return true;
      }
      return false;
    };
  });
  var gets = ["useGradientOpacity", "scalarOpacityUnitDistance", "gradientOpacityMinimumValue", "gradientOpacityMinimumOpacity", "gradientOpacityMaximumValue", "gradientOpacityMaximumOpacity", "opacityMode"];
  gets.forEach(function(val) {
    var cap = macro.capitalize(val);
    publicAPI["get".concat(cap)] = function(index) {
      return model.componentData[index]["".concat(val)];
    };
  });
}
var DEFAULT_VALUES = {
  independentComponents: true,
  interpolationType: InterpolationType.FAST_LINEAR,
  shade: false,
  ambient: 0.1,
  diffuse: 0.7,
  specular: 0.2,
  specularPower: 10,
  useLabelOutline: false,
  labelOutlineThickness: 1
};
function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues);
  macro.obj(publicAPI, model);
  if (!model.componentData) {
    model.componentData = [];
    for (var i = 0; i < VTK_MAX_VRCOMP; ++i) {
      model.componentData.push({
        colorChannels: 1,
        grayTransferFunction: null,
        rGBTransferFunction: null,
        scalarOpacity: null,
        scalarOpacityUnitDistance: 1,
        opacityMode: OpacityMode.FRACTIONAL,
        gradientOpacityMinimumValue: 0,
        gradientOpacityMinimumOpacity: 0,
        gradientOpacityMaximumValue: 1,
        gradientOpacityMaximumOpacity: 1,
        useGradientOpacity: false,
        componentWeight: 1
      });
    }
  }
  macro.setGet(publicAPI, model, ["independentComponents", "interpolationType", "shade", "ambient", "diffuse", "specular", "specularPower", "useLabelOutline", "labelOutlineThickness"]);
  vtkVolumeProperty(publicAPI, model);
}
var newInstance = macro.newInstance(extend, "vtkVolumeProperty");
var vtkVolumeProperty$1 = _objectSpread({
  newInstance,
  extend
}, Constants);

// node_modules/@kitware/vtk.js/Rendering/Core/Volume.js
var vtkDebugMacro = macro.vtkDebugMacro;
function vtkVolume(publicAPI, model) {
  model.classHierarchy.push("vtkVolume");
  publicAPI.getVolumes = function() {
    return publicAPI;
  };
  publicAPI.makeProperty = vtkVolumeProperty$1.newInstance;
  publicAPI.getProperty = function() {
    if (model.property === null) {
      model.property = publicAPI.makeProperty();
    }
    return model.property;
  };
  publicAPI.getBounds = function() {
    if (model.mapper === null) {
      return model.bounds;
    }
    var bds = model.mapper.getBounds();
    if (!bds || bds.length !== 6) {
      return bds;
    }
    if (bds[0] > bds[1]) {
      model.mapperBounds = bds.concat();
      model.bounds = [1, -1, 1, -1, 1, -1];
      model.boundsMTime.modified();
      return bds;
    }
    var zip = function zip2(rows) {
      return rows[0].map(function(_, c) {
        return rows.map(function(row) {
          return row[c];
        });
      });
    };
    if (!model.mapperBounds || !zip([bds, model.mapperBounds]).reduce(function(a, b) {
      return a && b[0] === b[1];
    }, true) || publicAPI.getMTime() > model.boundsMTime.getMTime()) {
      vtkDebugMacro("Recomputing bounds...");
      model.mapperBounds = bds.map(function(x) {
        return x;
      });
      var bbox = [];
      vtkBoundingBox.getCorners(bds, bbox);
      publicAPI.computeMatrix();
      var tmp4 = new Float64Array(16);
      mat4_exports.transpose(tmp4, model.matrix);
      bbox.forEach(function(pt) {
        return vec3_exports.transformMat4(pt, pt, tmp4);
      });
      model.bounds[0] = model.bounds[2] = model.bounds[4] = Number.MAX_VALUE;
      model.bounds[1] = model.bounds[3] = model.bounds[5] = -Number.MAX_VALUE;
      model.bounds = model.bounds.map(function(d, i) {
        return i % 2 === 0 ? bbox.reduce(function(a, b) {
          return a > b[i / 2] ? b[i / 2] : a;
        }, d) : bbox.reduce(function(a, b) {
          return a < b[(i - 1) / 2] ? b[(i - 1) / 2] : a;
        }, d);
      });
      model.boundsMTime.modified();
    }
    return model.bounds;
  };
  publicAPI.getMTime = function() {
    var mt = model.mtime;
    if (model.property !== null) {
      var time = model.property.getMTime();
      mt = time > mt ? time : mt;
    }
    return mt;
  };
  publicAPI.getRedrawMTime = function() {
    var mt = model.mtime;
    if (model.mapper !== null) {
      var time = model.mapper.getMTime();
      mt = time > mt ? time : mt;
      if (model.mapper.getInput() !== null) {
        model.mapper.getInputAlgorithm().update();
        time = model.mapper.getInput().getMTime();
        mt = time > mt ? time : mt;
      }
    }
    return mt;
  };
}
var DEFAULT_VALUES2 = {
  mapper: null,
  property: null,
  bounds: [1, -1, 1, -1, 1, -1]
};
function extend2(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES2, initialValues);
  vtkProp3D$1.extend(publicAPI, model, initialValues);
  model.boundsMTime = {};
  macro.obj(model.boundsMTime);
  macro.set(publicAPI, model, ["property"]);
  macro.setGet(publicAPI, model, ["mapper"]);
  macro.getArray(publicAPI, model, ["bounds"], 6);
  vtkVolume(publicAPI, model);
}
var newInstance2 = macro.newInstance(extend2, "vtkVolume");
var vtkVolume$1 = {
  newInstance: newInstance2,
  extend: extend2
};

// dep:@kitware_vtk__js_Rendering_Core_Volume
var kitware_vtk_js_Rendering_Core_Volume_default = vtkVolume$1;
export {
  kitware_vtk_js_Rendering_Core_Volume_default as default,
  extend2 as extend,
  newInstance2 as newInstance
};
//# sourceMappingURL=@kitware_vtk__js_Rendering_Core_Volume.js.map
