{
  "version": 3,
  "sources": ["../../@kitware/vtk.js/Filters/Sources/SphereSource.js", "dep:@kitware_vtk__js_Filters_Sources_SphereSource"],
  "sourcesContent": ["import macro from '../../macros.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\n\n// vtkSphereSource methods\n// ----------------------------------------------------------------------------\n\nfunction vtkSphereSource(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkSphereSource');\n\n  publicAPI.requestData = function (inData, outData) {\n    if (model.deleted) {\n      return;\n    }\n\n    var dataset = outData[0];\n    var pointDataType = dataset ? dataset.getPoints().getDataType() : model.pointType;\n    dataset = vtkPolyData.newInstance(); // ----------------------------------------------------------------------\n\n    var numPoles = 0; // Check data, determine increments, and convert to radians\n\n    var thetaResolution = model.thetaResolution;\n    var startTheta = model.startTheta < model.endTheta ? model.startTheta : model.endTheta;\n    startTheta *= Math.PI / 180.0;\n    var endTheta = model.endTheta > model.startTheta ? model.endTheta : model.startTheta;\n    endTheta *= Math.PI / 180.0;\n    var startPhi = model.startPhi < model.endPhi ? model.startPhi : model.endPhi;\n    startPhi *= Math.PI / 180.0;\n    var endPhi = model.endPhi > model.startPhi ? model.endPhi : model.startPhi;\n    endPhi *= Math.PI / 180.0;\n\n    if (Math.abs(startTheta - endTheta) < 2.0 * Math.PI) {\n      ++thetaResolution;\n    }\n\n    var deltaTheta = (endTheta - startTheta) / model.thetaResolution;\n    var jStart = model.startPhi <= 0.0 ? 1 : 0;\n    var jEnd = model.phiResolution + (model.endPhi >= 180.0 ? -1 : 0);\n    var numPts = model.phiResolution * thetaResolution + 2;\n    var numPolys = model.phiResolution * 2 * model.thetaResolution; // Points\n\n    var pointIdx = 0;\n    var points = macro.newTypedArray(pointDataType, numPts * 3); // Normals\n\n    var normals = new Float32Array(numPts * 3); // Cells\n\n    var cellLocation = 0;\n    var polys = new Uint32Array(numPolys * 5); // Create north pole if needed\n\n    if (model.startPhi <= 0.0) {\n      points[pointIdx * 3 + 0] = model.center[0];\n      points[pointIdx * 3 + 1] = model.center[1];\n      points[pointIdx * 3 + 2] = model.center[2] + model.radius;\n      normals[pointIdx * 3 + 0] = 0;\n      normals[pointIdx * 3 + 1] = 0;\n      normals[pointIdx * 3 + 2] = 1;\n      pointIdx++;\n      numPoles++;\n    } // Create south pole if needed\n\n\n    if (model.endPhi >= 180.0) {\n      points[pointIdx * 3 + 0] = model.center[0];\n      points[pointIdx * 3 + 1] = model.center[1];\n      points[pointIdx * 3 + 2] = model.center[2] - model.radius;\n      normals[pointIdx * 3 + 0] = 0;\n      normals[pointIdx * 3 + 1] = 0;\n      normals[pointIdx * 3 + 2] = -1;\n      pointIdx++;\n      numPoles++;\n    }\n\n    var phiResolution = model.phiResolution - numPoles;\n    var deltaPhi = (endPhi - startPhi) / (model.phiResolution - 1); // Create intermediate points\n\n    for (var i = 0; i < thetaResolution; i++) {\n      var theta = startTheta + i * deltaTheta;\n\n      for (var j = jStart; j < jEnd; j++) {\n        var phi = startPhi + j * deltaPhi;\n        var radius = model.radius * Math.sin(phi);\n        normals[pointIdx * 3 + 0] = radius * Math.cos(theta);\n        normals[pointIdx * 3 + 1] = radius * Math.sin(theta);\n        normals[pointIdx * 3 + 2] = model.radius * Math.cos(phi);\n        points[pointIdx * 3 + 0] = normals[pointIdx * 3 + 0] + model.center[0];\n        points[pointIdx * 3 + 1] = normals[pointIdx * 3 + 1] + model.center[1];\n        points[pointIdx * 3 + 2] = normals[pointIdx * 3 + 2] + model.center[2];\n        var norm = Math.sqrt(normals[pointIdx * 3 + 0] * normals[pointIdx * 3 + 0] + normals[pointIdx * 3 + 1] * normals[pointIdx * 3 + 1] + normals[pointIdx * 3 + 2] * normals[pointIdx * 3 + 2]);\n        norm = norm === 0 ? 1 : norm;\n        normals[pointIdx * 3 + 0] /= norm;\n        normals[pointIdx * 3 + 1] /= norm;\n        normals[pointIdx * 3 + 2] /= norm;\n        pointIdx++;\n      }\n    } // Generate mesh connectivity\n\n\n    var base = phiResolution * thetaResolution;\n\n    if (Math.abs(startTheta - endTheta) < 2.0 * Math.PI) {\n      --thetaResolution;\n    } // around north pole\n\n\n    if (model.startPhi <= 0.0) {\n      for (var _i = 0; _i < thetaResolution; _i++) {\n        polys[cellLocation++] = 3;\n        polys[cellLocation++] = phiResolution * _i + numPoles;\n        polys[cellLocation++] = phiResolution * (_i + 1) % base + numPoles;\n        polys[cellLocation++] = 0;\n      }\n    } // around south pole\n\n\n    if (model.endPhi >= 180.0) {\n      var numOffset = phiResolution - 1 + numPoles;\n\n      for (var _i2 = 0; _i2 < thetaResolution; _i2++) {\n        polys[cellLocation++] = 3;\n        polys[cellLocation++] = phiResolution * _i2 + numOffset;\n        polys[cellLocation++] = numPoles - 1;\n        polys[cellLocation++] = phiResolution * (_i2 + 1) % base + numOffset;\n      }\n    } // bands in-between poles\n\n\n    for (var _i3 = 0; _i3 < thetaResolution; _i3++) {\n      for (var _j = 0; _j < phiResolution - 1; _j++) {\n        var a = phiResolution * _i3 + _j + numPoles;\n        var b = a + 1;\n        var c = (phiResolution * (_i3 + 1) + _j) % base + numPoles + 1;\n\n        if (!model.latLongTessellation) {\n          polys[cellLocation++] = 3;\n          polys[cellLocation++] = a;\n          polys[cellLocation++] = b;\n          polys[cellLocation++] = c;\n          polys[cellLocation++] = 3;\n          polys[cellLocation++] = a;\n          polys[cellLocation++] = c;\n          polys[cellLocation++] = c - 1;\n        } else {\n          polys[cellLocation++] = 4;\n          polys[cellLocation++] = a;\n          polys[cellLocation++] = b;\n          polys[cellLocation++] = c;\n          polys[cellLocation++] = c - 1;\n        }\n      }\n    } // Squeeze\n\n\n    points = points.subarray(0, pointIdx * 3);\n    dataset.getPoints().setData(points, 3);\n    normals = normals.subarray(0, pointIdx * 3);\n    var normalArray = vtkDataArray.newInstance({\n      name: 'Normals',\n      values: normals,\n      numberOfComponents: 3\n    });\n    dataset.getPointData().setNormals(normalArray);\n    polys = polys.subarray(0, cellLocation);\n    dataset.getPolys().setData(polys, 1); // Update output\n\n    outData[0] = dataset;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  radius: 0.5,\n  latLongTessellation: false,\n  thetaResolution: 8,\n  startTheta: 0.0,\n  endTheta: 360.0,\n  phiResolution: 8,\n  startPhi: 0.0,\n  endPhi: 180.0,\n  center: [0, 0, 0],\n  pointType: 'Float64Array'\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['radius', 'latLongTessellation', 'thetaResolution', 'startTheta', 'endTheta', 'phiResolution', 'startPhi', 'endPhi']);\n  macro.setGetArray(publicAPI, model, ['center'], 3);\n  macro.algo(publicAPI, model, 0, 1);\n  vtkSphereSource(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkSphereSource'); // ----------------------------------------------------------------------------\n\nvar vtkSphereSource$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkSphereSource$1 as default, extend, newInstance };\n", "import d from \"./node_modules/@kitware/vtk.js/Filters/Sources/SphereSource.js\";export default d;\nexport * from \"./node_modules/@kitware/vtk.js/Filters/Sources/SphereSource.js\""],
  "mappings": "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",
  "names": []
}
