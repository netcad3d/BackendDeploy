{
  "version": 3,
  "sources": ["../../@kitware/vtk.js/IO/XML/XMLPolyDataReader.js", "dep:@kitware_vtk__js_IO_XML_XMLPolyDataReader"],
  "sourcesContent": ["import macro from '../../macros.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkXMLReader from './XMLReader.js';\n\n// Global method\n// ----------------------------------------------------------------------------\n\nfunction handleArray(polydata, cellType, piece, compressor, byteOrder, headerType, binaryBuffer) {\n  var size = Number(piece.getAttribute(\"NumberOf\".concat(cellType)));\n\n  if (size > 0) {\n    var dataArrayElem = piece.getElementsByTagName(cellType)[0].getElementsByTagName('DataArray')[0];\n\n    var _vtkXMLReader$process = vtkXMLReader.processDataArray(size, dataArrayElem, compressor, byteOrder, headerType, binaryBuffer),\n        values = _vtkXMLReader$process.values,\n        numberOfComponents = _vtkXMLReader$process.numberOfComponents;\n\n    polydata[\"get\".concat(cellType)]().setData(values, numberOfComponents);\n  }\n\n  return size;\n} // ----------------------------------------------------------------------------\n\n\nfunction handleCells(polydata, cellType, piece, compressor, byteOrder, headerType, binaryBuffer) {\n  var size = Number(piece.getAttribute(\"NumberOf\".concat(cellType)));\n\n  if (size > 0) {\n    var values = vtkXMLReader.processCells(size, piece.getElementsByTagName(cellType)[0], compressor, byteOrder, headerType, binaryBuffer);\n    polydata[\"get\".concat(cellType)]().setData(values);\n  }\n\n  return size;\n} // ----------------------------------------------------------------------------\n// vtkXMLPolyDataReader methods\n// ----------------------------------------------------------------------------\n\n\nfunction vtkXMLPolyDataReader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkXMLPolyDataReader');\n\n  publicAPI.parseXML = function (rootElem, type, compressor, byteOrder, headerType) {\n    var datasetElem = rootElem.getElementsByTagName(model.dataType)[0];\n    var pieces = datasetElem.getElementsByTagName('Piece');\n    var nbPieces = pieces.length;\n\n    var _loop = function _loop(outputIndex) {\n      // Create dataset\n      var polydata = vtkPolyData.newInstance();\n      var piece = pieces[outputIndex]; // Points\n\n      var nbPoints = handleArray(polydata, 'Points', piece, compressor, byteOrder, headerType, model.binaryBuffer); // Cells\n\n      var nbCells = 0;\n      ['Verts', 'Lines', 'Strips', 'Polys'].forEach(function (cellType) {\n        nbCells += handleCells(polydata, cellType, piece, compressor, byteOrder, headerType, model.binaryBuffer);\n      }); // Fill data\n\n      vtkXMLReader.processFieldData(nbPoints, piece.getElementsByTagName('PointData')[0], polydata.getPointData(), compressor, byteOrder, headerType, model.binaryBuffer);\n      vtkXMLReader.processFieldData(nbCells, piece.getElementsByTagName('CellData')[0], polydata.getCellData(), compressor, byteOrder, headerType, model.binaryBuffer); // Add new output\n\n      model.output[outputIndex] = polydata;\n    };\n\n    for (var outputIndex = 0; outputIndex < nbPieces; outputIndex++) {\n      _loop(outputIndex);\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  dataType: 'PolyData'\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  vtkXMLReader.extend(publicAPI, model, initialValues);\n  vtkXMLPolyDataReader(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkXMLPolyDataReader'); // ----------------------------------------------------------------------------\n\nvar vtkXMLPolyDataReader$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkXMLPolyDataReader$1 as default, extend, newInstance };\n", "import d from \"./node_modules/@kitware/vtk.js/IO/XML/XMLPolyDataReader.js\";export default d;\nexport * from \"./node_modules/@kitware/vtk.js/IO/XML/XMLPolyDataReader.js\""],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAOA,SAAS,YAAY,UAAU,UAAU,OAAO,YAAY,WAAW,YAAY,cAAc;AAC/F,MAAI,OAAO,OAAO,MAAM,aAAa,WAAW,OAAO,QAAQ,CAAC,CAAC;AAEjE,MAAI,OAAO,GAAG;AACZ,QAAI,gBAAgB,MAAM,qBAAqB,QAAQ,EAAE,GAAG,qBAAqB,WAAW,EAAE;AAE9F,QAAI,wBAAwB,eAAa,iBAAiB,MAAM,eAAe,YAAY,WAAW,YAAY,YAAY,GAC1H,SAAS,sBAAsB,QAC/B,qBAAqB,sBAAsB;AAE/C,aAAS,MAAM,OAAO,QAAQ,GAAG,EAAE,QAAQ,QAAQ,kBAAkB;AAAA,EACvE;AAEA,SAAO;AACT;AAGA,SAAS,YAAY,UAAU,UAAU,OAAO,YAAY,WAAW,YAAY,cAAc;AAC/F,MAAI,OAAO,OAAO,MAAM,aAAa,WAAW,OAAO,QAAQ,CAAC,CAAC;AAEjE,MAAI,OAAO,GAAG;AACZ,QAAI,SAAS,eAAa,aAAa,MAAM,MAAM,qBAAqB,QAAQ,EAAE,IAAI,YAAY,WAAW,YAAY,YAAY;AACrI,aAAS,MAAM,OAAO,QAAQ,GAAG,EAAE,QAAQ,MAAM;AAAA,EACnD;AAEA,SAAO;AACT;AAKA,SAAS,qBAAqB,WAAW,OAAO;AAE9C,QAAM,eAAe,KAAK,sBAAsB;AAEhD,YAAU,WAAW,SAAU,UAAU,MAAM,YAAY,WAAW,YAAY;AAChF,QAAI,cAAc,SAAS,qBAAqB,MAAM,QAAQ,EAAE;AAChE,QAAI,SAAS,YAAY,qBAAqB,OAAO;AACrD,QAAI,WAAW,OAAO;AAEtB,QAAI,QAAQ,SAASA,OAAMC,cAAa;AAEtC,UAAI,WAAW,cAAY,YAAY;AACvC,UAAI,QAAQ,OAAOA;AAEnB,UAAI,WAAW,YAAY,UAAU,UAAU,OAAO,YAAY,WAAW,YAAY,MAAM,YAAY;AAE3G,UAAI,UAAU;AACd,OAAC,SAAS,SAAS,UAAU,OAAO,EAAE,QAAQ,SAAU,UAAU;AAChE,mBAAW,YAAY,UAAU,UAAU,OAAO,YAAY,WAAW,YAAY,MAAM,YAAY;AAAA,MACzG,CAAC;AAED,qBAAa,iBAAiB,UAAU,MAAM,qBAAqB,WAAW,EAAE,IAAI,SAAS,aAAa,GAAG,YAAY,WAAW,YAAY,MAAM,YAAY;AAClK,qBAAa,iBAAiB,SAAS,MAAM,qBAAqB,UAAU,EAAE,IAAI,SAAS,YAAY,GAAG,YAAY,WAAW,YAAY,MAAM,YAAY;AAE/J,YAAM,OAAOA,gBAAe;AAAA,IAC9B;AAEA,aAAS,cAAc,GAAG,cAAc,UAAU,eAAe;AAC/D,YAAM,WAAW;AAAA,IACnB;AAAA,EACF;AACF;AAKA,IAAI,iBAAiB;AAAA,EACnB,UAAU;AACZ;AAEA,SAAS,OAAO,WAAW,OAAO;AAChC,MAAI,gBAAgB,UAAU,SAAS,KAAK,UAAU,OAAO,SAAY,UAAU,KAAK,CAAC;AACzF,SAAO,OAAO,OAAO,gBAAgB,aAAa;AAClD,iBAAa,OAAO,WAAW,OAAO,aAAa;AACnD,uBAAqB,WAAW,KAAK;AACvC;AAEA,IAAI,cAAc,MAAM,YAAY,QAAQ,sBAAsB;AAElE,IAAI,yBAAyB;AAAA,EAC3B;AAAA,EACA;AACF;;;AC1F2E,IAAO,kDAAQ;",
  "names": ["_loop", "outputIndex"]
}
