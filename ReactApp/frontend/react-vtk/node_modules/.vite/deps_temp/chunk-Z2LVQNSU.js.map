{
  "version": 3,
  "sources": ["../../@kitware/vtk.js/Common/DataModel/DataSetAttributes/FieldData.js", "../../@kitware/vtk.js/Common/DataModel/DataSetAttributes/Constants.js", "../../@kitware/vtk.js/Common/DataModel/DataSetAttributes.js", "../../@kitware/vtk.js/Common/DataModel/DataSet/Constants.js", "../../@kitware/vtk.js/Common/DataModel/DataSet.js"],
  "sourcesContent": ["import vtk from '../../../vtk.js';\nimport macro from '../../../macros.js';\nimport vtkDataArray from '../../Core/DataArray.js';\n\nvar vtkErrorMacro = macro.vtkErrorMacro,\n    vtkWarningMacro = macro.vtkWarningMacro; // ----------------------------------------------------------------------------\n// vtkFieldData methods\n// ----------------------------------------------------------------------------\n\nfunction vtkFieldData(publicAPI, model) {\n  model.classHierarchy.push('vtkFieldData');\n  var superGetState = publicAPI.getState; // Decode serialized data if any\n\n  if (model.arrays) {\n    model.arrays = model.arrays.map(function (item) {\n      return {\n        data: vtk(item.data)\n      };\n    });\n  }\n\n  publicAPI.initialize = function () {\n    publicAPI.initializeFields();\n    publicAPI.copyAllOn();\n    publicAPI.clearFieldFlags();\n  };\n\n  publicAPI.initializeFields = function () {\n    model.arrays = [];\n    model.copyFieldFlags = {};\n    publicAPI.modified();\n  };\n\n  publicAPI.copyStructure = function (other) {\n    publicAPI.initializeFields();\n    model.copyFieldFlags = other.getCopyFieldFlags().map(function (x) {\n      return x;\n    }); // Deep-copy\n\n    model.arrays = other.arrays().map(function (x) {\n      return {\n        array: x\n      };\n    }); // Deep-copy\n    // TODO: Copy array information objects (once we support information objects)\n  };\n\n  publicAPI.getNumberOfArrays = function () {\n    return model.arrays.length;\n  };\n\n  publicAPI.getNumberOfActiveArrays = function () {\n    return model.arrays.length;\n  };\n\n  publicAPI.addArray = function (arr) {\n    var name = arr.getName();\n\n    var _publicAPI$getArrayWi = publicAPI.getArrayWithIndex(name),\n        array = _publicAPI$getArrayWi.array,\n        index = _publicAPI$getArrayWi.index;\n\n    if (array != null) {\n      model.arrays[index] = {\n        data: arr\n      };\n      return index;\n    }\n\n    model.arrays = [].concat(model.arrays, {\n      data: arr\n    });\n    return model.arrays.length - 1;\n  };\n\n  publicAPI.removeAllArrays = function () {\n    model.arrays = [];\n  };\n\n  publicAPI.removeArray = function (arrayName) {\n    model.arrays = model.arrays.filter(function (entry) {\n      return arrayName !== entry.data.getName();\n    });\n  };\n\n  publicAPI.removeArrayByIndex = function (arrayIdx) {\n    model.arrays = model.arrays.filter(function (entry, idx) {\n      return idx !== arrayIdx;\n    });\n  };\n\n  publicAPI.getArrays = function () {\n    return model.arrays.map(function (entry) {\n      return entry.data;\n    });\n  };\n\n  publicAPI.getArray = function (arraySpec) {\n    return typeof arraySpec === 'number' ? publicAPI.getArrayByIndex(arraySpec) : publicAPI.getArrayByName(arraySpec);\n  };\n\n  publicAPI.getArrayByName = function (arrayName) {\n    return model.arrays.reduce(function (a, b, i) {\n      return b.data.getName() === arrayName ? b.data : a;\n    }, null);\n  };\n\n  publicAPI.getArrayWithIndex = function (arrayName) {\n    return model.arrays.reduce(function (a, b, i) {\n      return b.data && b.data.getName() === arrayName ? {\n        array: b.data,\n        index: i\n      } : a;\n    }, {\n      array: null,\n      index: -1\n    });\n  };\n\n  publicAPI.getArrayByIndex = function (idx) {\n    return idx >= 0 && idx < model.arrays.length ? model.arrays[idx].data : null;\n  };\n\n  publicAPI.hasArray = function (arrayName) {\n    return publicAPI.getArrayWithIndex(arrayName).index >= 0;\n  };\n\n  publicAPI.getArrayName = function (idx) {\n    var arr = model.arrays[idx];\n    return arr ? arr.data.getName() : '';\n  };\n\n  publicAPI.getCopyFieldFlags = function () {\n    return model.copyFieldFlags;\n  };\n\n  publicAPI.getFlag = function (arrayName) {\n    return model.copyFieldFlags[arrayName];\n  };\n\n  publicAPI.passData = function (other) {\n    var fromId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    var toId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n    other.getArrays().forEach(function (arr) {\n      var copyFlag = publicAPI.getFlag(arr.getName());\n\n      if (copyFlag !== false && !(model.doCopyAllOff && copyFlag !== true) && arr) {\n        var destArr = publicAPI.getArrayByName(arr.getName());\n\n        if (!destArr) {\n          if (fromId < 0 || fromId > arr.getNumberOfTuples()) {\n            // TBD: should this be a deep or a shallow copy?\n            publicAPI.addArray(arr);\n            other.getAttributes(arr).forEach(function (attrType) {\n              publicAPI.setAttribute(arr, attrType);\n            });\n          } else {\n            var ncomps = arr.getNumberOfComponents();\n            var newSize = arr.getNumberOfValues();\n            var tId = toId > -1 ? toId : fromId;\n\n            if (newSize <= tId * ncomps) {\n              newSize = (tId + 1) * ncomps;\n            }\n\n            destArr = vtkDataArray.newInstance({\n              name: arr.getName(),\n              dataType: arr.getDataType(),\n              numberOfComponents: ncomps,\n              values: macro.newTypedArray(arr.getDataType(), newSize),\n              size: 0\n            });\n            destArr.insertTuple(tId, arr.getTuple(fromId));\n            publicAPI.addArray(destArr);\n            other.getAttributes(arr).forEach(function (attrType) {\n              publicAPI.setAttribute(destArr, attrType);\n            });\n          }\n        } else if (arr.getNumberOfComponents() === destArr.getNumberOfComponents()) {\n          if (fromId > -1 && fromId < arr.getNumberOfTuples()) {\n            var _tId = toId > -1 ? toId : fromId;\n\n            destArr.insertTuple(_tId, arr.getTuple(fromId));\n          } else {\n            // if `fromId` is not provided, just copy all (or as much possible)\n            // from `arr` to `destArr`.\n            destArr.insertTuples(0, arr.getTuples());\n          }\n        } else {\n          vtkErrorMacro('Unhandled case in passData');\n        }\n      }\n    });\n  };\n\n  publicAPI.interpolateData = function (other) {\n    var fromId1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    var fromId2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n    var toId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n    var t = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.5;\n    other.getArrays().forEach(function (arr) {\n      var copyFlag = publicAPI.getFlag(arr.getName());\n\n      if (copyFlag !== false && !(model.doCopyAllOff && copyFlag !== true) && arr) {\n        var destArr = publicAPI.getArrayByName(arr.getName());\n\n        if (!destArr) {\n          if (fromId1 < 0 || fromId2 < 0 || fromId1 > arr.getNumberOfTuples()) {\n            // TBD: should this be a deep or a shallow copy?\n            publicAPI.addArray(arr);\n            other.getAttributes(arr).forEach(function (attrType) {\n              publicAPI.setAttribute(arr, attrType);\n            });\n          } else {\n            var ncomps = arr.getNumberOfComponents();\n            var newSize = arr.getNumberOfValues(); // TODO: Is this supposed to happen?\n\n            var tId = toId > -1 ? toId : fromId1;\n\n            if (newSize <= tId * ncomps) {\n              newSize = (tId + 1) * ncomps;\n            }\n\n            destArr = vtkDataArray.newInstance({\n              name: arr.getName(),\n              dataType: arr.getDataType(),\n              numberOfComponents: ncomps,\n              values: macro.newTypedArray(arr.getDataType(), newSize),\n              size: 0\n            });\n            destArr.interpolateTuple(tId, arr, fromId1, arr, fromId2, t);\n            publicAPI.addArray(destArr);\n            other.getAttributes(arr).forEach(function (attrType) {\n              publicAPI.setAttribute(destArr, attrType);\n            });\n          }\n        } else if (arr.getNumberOfComponents() === destArr.getNumberOfComponents()) {\n          if (fromId1 > -1 && fromId1 < arr.getNumberOfTuples()) {\n            var _tId2 = toId > -1 ? toId : fromId1;\n\n            destArr.interpolateTuple(_tId2, arr, fromId1, arr, fromId2, t);\n            vtkWarningMacro('Unexpected case in interpolateData');\n          } else {\n            // if `fromId` is not provided, just copy all (or as much possible)\n            // from `arr` to `destArr`.\n            destArr.insertTuples(arr.getTuples());\n          }\n        } else {\n          vtkErrorMacro('Unhandled case in interpolateData');\n        }\n      }\n    });\n  };\n\n  publicAPI.copyFieldOn = function (arrayName) {\n    model.copyFieldFlags[arrayName] = true;\n  };\n\n  publicAPI.copyFieldOff = function (arrayName) {\n    model.copyFieldFlags[arrayName] = false;\n  };\n\n  publicAPI.copyAllOn = function () {\n    if (!model.doCopyAllOn || model.doCopyAllOff) {\n      model.doCopyAllOn = true;\n      model.doCopyAllOff = false;\n      publicAPI.modified();\n    }\n  };\n\n  publicAPI.copyAllOff = function () {\n    if (model.doCopyAllOn || !model.doCopyAllOff) {\n      model.doCopyAllOn = false;\n      model.doCopyAllOff = true;\n      publicAPI.modified();\n    }\n  };\n\n  publicAPI.clearFieldFlags = function () {\n    model.copyFieldFlags = {};\n  };\n\n  publicAPI.deepCopy = function (other) {\n    model.arrays = other.getArrays().map(function (arr) {\n      var arrNew = arr.newClone();\n      arrNew.deepCopy(arr);\n      return {\n        data: arrNew\n      };\n    });\n  };\n\n  publicAPI.copyFlags = function (other) {\n    return other.getCopyFieldFlags().map(function (x) {\n      return x;\n    });\n  }; // TODO: publicAPI.squeeze = () => model.arrays.forEach(entry => entry.data.squeeze());\n\n\n  publicAPI.reset = function () {\n    return model.arrays.forEach(function (entry) {\n      return entry.data.reset();\n    });\n  }; // TODO: getActualMemorySize\n\n\n  publicAPI.getMTime = function () {\n    return model.arrays.reduce(function (a, b) {\n      return b.data.getMTime() > a ? b.data.getMTime() : a;\n    }, model.mtime);\n  }; // TODO: publicAPI.getField = (ids, other) => { copy ids from other into this model's arrays }\n  // TODO: publicAPI.getArrayContainingComponent = (component) => ...\n\n\n  publicAPI.getNumberOfComponents = function () {\n    return model.arrays.reduce(function (a, b) {\n      return a + b.data.getNumberOfComponents();\n    }, 0);\n  };\n\n  publicAPI.getNumberOfTuples = function () {\n    return model.arrays.length > 0 ? model.arrays[0].getNumberOfTuples() : 0;\n  };\n\n  publicAPI.getState = function () {\n    var result = superGetState();\n\n    if (result) {\n      result.arrays = model.arrays.map(function (item) {\n        return {\n          data: item.data.getState()\n        };\n      });\n    }\n\n    return result;\n  };\n}\n\nvar DEFAULT_VALUES = {\n  arrays: [],\n  copyFieldFlags: [],\n  // fields not to copy\n  doCopyAllOn: true,\n  doCopyAllOff: false\n};\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  macro.obj(publicAPI, model);\n  vtkFieldData(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkFieldData'); // ----------------------------------------------------------------------------\n\nvar vtkFieldData$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkFieldData$1 as default, extend, newInstance };\n", "var AttributeTypes = {\n  SCALARS: 0,\n  VECTORS: 1,\n  NORMALS: 2,\n  TCOORDS: 3,\n  TENSORS: 4,\n  GLOBALIDS: 5,\n  PEDIGREEIDS: 6,\n  EDGEFLAG: 7,\n  NUM_ATTRIBUTES: 8\n};\nvar AttributeLimitTypes = {\n  MAX: 0,\n  EXACT: 1,\n  NOLIMIT: 2\n};\nvar CellGhostTypes = {\n  DUPLICATECELL: 1,\n  // the cell is present on multiple processors\n  HIGHCONNECTIVITYCELL: 2,\n  // the cell has more neighbors than in a regular mesh\n  LOWCONNECTIVITYCELL: 4,\n  // the cell has less neighbors than in a regular mesh\n  REFINEDCELL: 8,\n  // other cells are present that refines it.\n  EXTERIORCELL: 16,\n  // the cell is on the exterior of the data set\n  HIDDENCELL: 32 // the cell is needed to maintain connectivity, but the data values should be ignored.\n\n};\nvar PointGhostTypes = {\n  DUPLICATEPOINT: 1,\n  // the cell is present on multiple processors\n  HIDDENPOINT: 2 // the point is needed to maintain connectivity, but the data values should be ignored.\n\n};\nvar AttributeCopyOperations = {\n  COPYTUPLE: 0,\n  INTERPOLATE: 1,\n  PASSDATA: 2,\n  ALLCOPY: 3 // all of the above\n\n};\nvar ghostArrayName = 'vtkGhostType';\nvar DesiredOutputPrecision = {\n  DEFAULT: 0,\n  // use the point type that does not truncate any data\n  SINGLE: 1,\n  // use Float32Array\n  DOUBLE: 2 // use Float64Array\n\n};\nvar Constants = {\n  AttributeCopyOperations: AttributeCopyOperations,\n  AttributeLimitTypes: AttributeLimitTypes,\n  AttributeTypes: AttributeTypes,\n  CellGhostTypes: CellGhostTypes,\n  DesiredOutputPrecision: DesiredOutputPrecision,\n  PointGhostTypes: PointGhostTypes,\n  ghostArrayName: ghostArrayName\n};\n\nexport { AttributeCopyOperations, AttributeLimitTypes, AttributeTypes, CellGhostTypes, DesiredOutputPrecision, PointGhostTypes, Constants as default, ghostArrayName };\n", "import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport macro from '../../macros.js';\nimport vtkFieldData from './DataSetAttributes/FieldData.js';\nimport Constants from './DataSetAttributes/Constants.js';\nimport vtkDataArray from '../Core/DataArray.js';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar AttributeTypes = Constants.AttributeTypes,\n    AttributeCopyOperations = Constants.AttributeCopyOperations;\nvar vtkWarningMacro = macro.vtkWarningMacro; // ----------------------------------------------------------------------------\n// vtkDataSetAttributes methods\n// ----------------------------------------------------------------------------\n\nfunction vtkDataSetAttributes(publicAPI, model) {\n  var attrTypes = ['Scalars', 'Vectors', 'Normals', 'TCoords', 'Tensors', 'GlobalIds', 'PedigreeIds'];\n\n  function cleanAttributeType(attType) {\n    // Given an integer or string, convert the result to one of the\n    // strings in the \"attrTypes\" array above or null (if\n    // no match is found)\n    var cleanAttType = attrTypes.find(function (ee) {\n      return AttributeTypes[ee.toUpperCase()] === attType || typeof attType !== 'number' && ee.toLowerCase() === attType.toLowerCase();\n    });\n\n    if (typeof cleanAttType === 'undefined') {\n      cleanAttType = null;\n    }\n\n    return cleanAttType;\n  } // Set our className\n\n\n  model.classHierarchy.push('vtkDataSetAttributes');\n\n  publicAPI.checkNumberOfComponents = function (x) {\n    return true;\n  }; // TODO\n\n\n  publicAPI.setAttribute = function (arr, uncleanAttType) {\n    var attType = cleanAttributeType(uncleanAttType);\n\n    if (arr && attType.toUpperCase() === 'PEDIGREEIDS' && !arr.isA('vtkDataArray')) {\n      vtkWarningMacro(\"Cannot set attribute \".concat(attType, \". The attribute must be a vtkDataArray.\"));\n      return -1;\n    }\n\n    if (arr && !publicAPI.checkNumberOfComponents(arr, attType)) {\n      vtkWarningMacro(\"Cannot set attribute \".concat(attType, \". Incorrect number of components.\"));\n      return -1;\n    }\n\n    var currentAttribute = model[\"active\".concat(attType)];\n\n    if (currentAttribute >= 0 && currentAttribute < model.arrays.length) {\n      if (model.arrays[currentAttribute] === arr) {\n        return currentAttribute;\n      }\n\n      publicAPI.removeArrayByIndex(currentAttribute);\n    }\n\n    if (arr) {\n      currentAttribute = publicAPI.addArray(arr);\n      model[\"active\".concat(attType)] = currentAttribute;\n    } else {\n      model[\"active\".concat(attType)] = -1;\n    }\n\n    publicAPI.modified();\n    return model[\"active\".concat(attType)];\n  };\n\n  publicAPI.getAttributes = function (arr) {\n    return attrTypes.filter(function (attrType) {\n      return publicAPI[\"get\".concat(attrType)]() === arr;\n    });\n  };\n\n  publicAPI.setActiveAttributeByName = function (arrayName, attType) {\n    return publicAPI.setActiveAttributeByIndex(publicAPI.getArrayWithIndex(arrayName).index, attType);\n  };\n\n  publicAPI.setActiveAttributeByIndex = function (arrayIdx, uncleanAttType) {\n    var attType = cleanAttributeType(uncleanAttType);\n\n    if (arrayIdx >= 0 && arrayIdx < model.arrays.length) {\n      if (attType.toUpperCase() !== 'PEDIGREEIDS') {\n        var arr = publicAPI.getArrayByIndex(arrayIdx);\n\n        if (!arr.isA('vtkDataArray')) {\n          vtkWarningMacro(\"Cannot set attribute \".concat(attType, \". Only vtkDataArray subclasses can be set as active attributes.\"));\n          return -1;\n        }\n\n        if (!publicAPI.checkNumberOfComponents(arr, attType)) {\n          vtkWarningMacro(\"Cannot set attribute \".concat(attType, \". Incorrect number of components.\"));\n          return -1;\n        }\n      }\n\n      model[\"active\".concat(attType)] = arrayIdx;\n      publicAPI.modified();\n      return arrayIdx;\n    }\n\n    if (arrayIdx === -1) {\n      model[\"active\".concat(attType)] = arrayIdx;\n      publicAPI.modified();\n    }\n\n    return -1;\n  };\n\n  publicAPI.getActiveAttribute = function (attType) {\n    // Given an integer enum value or a string (with random capitalization),\n    // find the matching string in attrTypes.\n    var cleanAttType = cleanAttributeType(attType);\n    return publicAPI[\"get\".concat(cleanAttType)]();\n  }; // Override to allow proper handling of active attributes\n\n\n  publicAPI.removeAllArrays = function () {\n    model.arrays = [];\n    attrTypes.forEach(function (attType) {\n      model[\"active\".concat(attType)] = -1;\n    });\n  }; // Override to allow proper handling of active attributes\n\n\n  publicAPI.removeArray = function (arrayName) {\n    model.arrays = model.arrays.filter(function (entry, idx) {\n      if (arrayName === entry.data.getName()) {\n        // Found the array to remove, but is it an active attribute?\n        attrTypes.forEach(function (attType) {\n          if (idx === model[\"active\".concat(attType)]) {\n            model[\"active\".concat(attType)] = -1;\n          }\n        });\n        return false;\n      }\n\n      return true;\n    });\n  }; // Override to allow proper handling of active attributes\n\n\n  publicAPI.removeArrayByIndex = function (arrayIdx) {\n    model.arrays = model.arrays.filter(function (entry, idx) {\n      return idx !== arrayIdx;\n    });\n    attrTypes.forEach(function (attType) {\n      if (arrayIdx === model[\"active\".concat(attType)]) {\n        model[\"active\".concat(attType)] = -1;\n      }\n    });\n  };\n\n  attrTypes.forEach(function (value) {\n    var activeVal = \"active\".concat(value);\n\n    publicAPI[\"get\".concat(value)] = function () {\n      return publicAPI.getArrayByIndex(model[activeVal]);\n    };\n\n    publicAPI[\"set\".concat(value)] = function (da) {\n      return publicAPI.setAttribute(da, value);\n    };\n\n    publicAPI[\"setActive\".concat(value)] = function (arrayName) {\n      return publicAPI.setActiveAttributeByIndex(publicAPI.getArrayWithIndex(arrayName).index, value);\n    };\n\n    publicAPI[\"copy\".concat(value, \"Off\")] = function () {\n      var attType = value.toUpperCase();\n      model.copyAttributeFlags[AttributeCopyOperations.PASSDATA][AttributeTypes[attType]] = false;\n    };\n\n    publicAPI[\"copy\".concat(value, \"On\")] = function () {\n      var attType = value.toUpperCase();\n      model.copyAttributeFlags[AttributeCopyOperations.PASSDATA][AttributeTypes[attType]] = true;\n    };\n  });\n\n  publicAPI.initializeAttributeCopyFlags = function () {\n    // Default to copying all attributes in every circumstance:\n    model.copyAttributeFlags = [];\n    Object.keys(AttributeCopyOperations).filter(function (op) {\n      return op !== 'ALLCOPY';\n    }).forEach(function (attCopyOp) {\n      model.copyAttributeFlags[AttributeCopyOperations[attCopyOp]] = Object.keys(AttributeTypes).filter(function (ty) {\n        return ty !== 'NUM_ATTRIBUTES';\n      }).reduce(function (a, b) {\n        a[AttributeTypes[b]] = true;\n        return a;\n      }, []);\n    }); // Override some operations where we don't want to copy:\n\n    model.copyAttributeFlags[AttributeCopyOperations.COPYTUPLE][AttributeTypes.GLOBALIDS] = false;\n    model.copyAttributeFlags[AttributeCopyOperations.INTERPOLATE][AttributeTypes.GLOBALIDS] = false;\n    model.copyAttributeFlags[AttributeCopyOperations.COPYTUPLE][AttributeTypes.PEDIGREEIDS] = false;\n  };\n\n  publicAPI.initialize = macro.chain(publicAPI.initialize, publicAPI.initializeAttributeCopyFlags); // Process dataArrays if any\n\n  if (model.dataArrays && Object.keys(model.dataArrays).length) {\n    Object.keys(model.dataArrays).forEach(function (name) {\n      if (!model.dataArrays[name].ref && model.dataArrays[name].type === 'vtkDataArray') {\n        publicAPI.addArray(vtkDataArray.newInstance(model.dataArrays[name]));\n      }\n    });\n  }\n\n  var superShallowCopy = publicAPI.shallowCopy;\n\n  publicAPI.shallowCopy = function (other, debug) {\n    superShallowCopy(other, debug);\n    model.arrays = other.getArrays().map(function (arr) {\n      var arrNew = arr.newClone();\n      arrNew.shallowCopy(arr, debug);\n      return {\n        data: arrNew\n      };\n    });\n  };\n\n  publicAPI.initializeAttributeCopyFlags();\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  activeScalars: -1,\n  activeVectors: -1,\n  activeTensors: -1,\n  activeNormals: -1,\n  activeTCoords: -1,\n  activeGlobalIds: -1,\n  activePedigreeIds: -1\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods\n\n  vtkFieldData.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, ['activeScalars', 'activeNormals', 'activeTCoords', 'activeVectors', 'activeTensors', 'activeGlobalIds', 'activePedigreeIds']);\n\n  if (!model.arrays) {\n    model.arrays = {};\n  } // Object specific methods\n\n\n  vtkDataSetAttributes(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkDataSetAttributes'); // ----------------------------------------------------------------------------\n\nvar vtkDataSetAttributes$1 = _objectSpread({\n  newInstance: newInstance,\n  extend: extend\n}, Constants);\n\nexport { vtkDataSetAttributes$1 as default, extend, newInstance };\n", "// Specify how data arrays can be used by data objects\nvar FieldDataTypes = {\n  UNIFORM: 0,\n  // data that does not vary over points/cells/etc.\n  DATA_OBJECT_FIELD: 0,\n  // to match VTK\n  COORDINATE: 1,\n  // data that specifies the location of each point\n  POINT_DATA: 1,\n  // to match VTK\n  POINT: 2,\n  // data defined at each point, but that does not specify the point location\n  POINT_FIELD_DATA: 2,\n  // to match VTK\n  CELL: 3,\n  // data defined at each cell, but that does not specify the cell\n  CELL_FIELD_DATA: 3,\n  // to match VTK\n  VERTEX: 4,\n  // data defined at each graph vertex, but that does not specify the graph vertex\n  VERTEX_FIELD_DATA: 4,\n  // to match VTK\n  EDGE: 5,\n  // data defined at each graph edge, but that does not specify the graph edge\n  EDGE_FIELD_DATA: 5,\n  // to match VTK\n  ROW: 6,\n  // data specifying a table row\n  ROW_DATA: 6 // to match VTK\n\n};\nvar FieldAssociations = {\n  FIELD_ASSOCIATION_POINTS: 0,\n  FIELD_ASSOCIATION_CELLS: 1,\n  FIELD_ASSOCIATION_NONE: 2,\n  FIELD_ASSOCIATION_POINTS_THEN_CELLS: 3,\n  FIELD_ASSOCIATION_VERTICES: 4,\n  FIELD_ASSOCIATION_EDGES: 5,\n  FIELD_ASSOCIATION_ROWS: 6,\n  NUMBER_OF_ASSOCIATIONS: 7\n};\nvar Constants = {\n  FieldDataTypes: FieldDataTypes,\n  FieldAssociations: FieldAssociations\n};\n\nexport { FieldAssociations, FieldDataTypes, Constants as default };\n", "import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport macro from '../../macros.js';\nimport vtk from '../../vtk.js';\nimport vtkDataSetAttributes from './DataSetAttributes.js';\nimport Constants from './DataSet/Constants.js';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n// import * as vtkMath from '../../Core/Math';\n//\n// function getBounds(dataset) {\n//   if (dataset.bounds) {\n//     return dataset.bounds;\n//   }\n//   if (dataset.type && dataset[dataset.type]) {\n//     const ds = dataset[dataset.type];\n//     if (ds.bounds) {\n//       return ds.bounds;\n//     }\n//     if (ds.Points && ds.Points.bounds) {\n//       return ds.Points.bounds;\n//     }\n//     if (ds.Points && ds.Points.values) {\n//       const array = ds.Points.values;\n//       const bbox = [...vtkBoundingBox.INIT_BOUNDS];\n//       const size = array.length;\n//       const delta = ds.Points.numberOfComponents ? ds.Points.numberOfComponents : 3;\n//       for (let idx = 0; idx < size; idx += delta) {\n//         vtkBoundingBox.addPoint(bbox, array[idx * delta], array[(idx * delta) + 1], array[(idx * delta) + 2]);\n//       }\n//       ds.Points.bounds = bbox;\n//       return ds.Points.bounds;\n//     }\n//   }\n//   return vtkMath.createUninitializedBounds();\n// }\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\nvar DATASET_FIELDS = ['pointData', 'cellData', 'fieldData']; // ----------------------------------------------------------------------------\n// vtkDataSet methods\n// ----------------------------------------------------------------------------\n\nfunction vtkDataSet(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkDataSet'); // Add dataset attributes\n\n  DATASET_FIELDS.forEach(function (fieldName) {\n    if (!model[fieldName]) {\n      model[fieldName] = vtkDataSetAttributes.newInstance();\n    } else {\n      model[fieldName] = vtk(model[fieldName]);\n    }\n  });\n  var superShallowCopy = publicAPI.shallowCopy;\n\n  publicAPI.shallowCopy = function (other) {\n    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    superShallowCopy(other, debug);\n    DATASET_FIELDS.forEach(function (fieldName) {\n      model[fieldName] = vtkDataSetAttributes.newInstance();\n      model[fieldName].shallowCopy(other.getReferenceByName(fieldName));\n    });\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {// pointData: null,\n  // cellData: null,\n  // fieldData: null,\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods\n\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, DATASET_FIELDS); // Object specific methods\n\n  vtkDataSet(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkDataSet'); // ----------------------------------------------------------------------------\n\nvar vtkDataSet$1 = _objectSpread({\n  newInstance: newInstance,\n  extend: extend\n}, Constants);\n\nexport { vtkDataSet$1 as default, extend, newInstance };\n"],
  "mappings": "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",
  "names": ["AttributeTypes", "AttributeCopyOperations", "vtkWarningMacro", "DEFAULT_VALUES", "extend", "newInstance", "Constants", "ownKeys", "_objectSpread", "DEFAULT_VALUES", "extend", "newInstance", "Constants"]
}
