{
  "version": 3,
  "sources": ["../../@kitware/vtk.js/Common/DataModel/BoundingBox.js"],
  "sourcesContent": ["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _classCallCheck from '@babel/runtime/helpers/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport { d as dot } from '../Core/Math/index.js';\nimport vtkPlane from './Plane.js';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar INIT_BOUNDS = [Number.MAX_VALUE, -Number.MAX_VALUE, // X\nNumber.MAX_VALUE, -Number.MAX_VALUE, // Y\nNumber.MAX_VALUE, -Number.MAX_VALUE // Z\n]; // ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\nfunction _equals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n\nfunction _isValid(bounds) {\n  return bounds[0] <= bounds[1] && bounds[2] <= bounds[3] && bounds[4] <= bounds[5];\n}\n\nfunction _setBounds(bounds, otherBounds) {\n  bounds[0] = otherBounds[0];\n  bounds[1] = otherBounds[1];\n  bounds[2] = otherBounds[2];\n  bounds[3] = otherBounds[3];\n  bounds[4] = otherBounds[4];\n  bounds[5] = otherBounds[5];\n  return bounds;\n}\n\nfunction _reset(bounds) {\n  return _setBounds(bounds, INIT_BOUNDS);\n}\n\nfunction _addPoint(bounds) {\n  var _bounds = _slicedToArray(bounds, 6),\n      xMin = _bounds[0],\n      xMax = _bounds[1],\n      yMin = _bounds[2],\n      yMax = _bounds[3],\n      zMin = _bounds[4],\n      zMax = _bounds[5];\n\n  bounds[0] = xMin < (arguments.length <= 1 ? undefined : arguments[1]) ? xMin : arguments.length <= 1 ? undefined : arguments[1];\n  bounds[1] = xMax > (arguments.length <= 1 ? undefined : arguments[1]) ? xMax : arguments.length <= 1 ? undefined : arguments[1];\n  bounds[2] = yMin < (arguments.length <= 2 ? undefined : arguments[2]) ? yMin : arguments.length <= 2 ? undefined : arguments[2];\n  bounds[3] = yMax > (arguments.length <= 2 ? undefined : arguments[2]) ? yMax : arguments.length <= 2 ? undefined : arguments[2];\n  bounds[4] = zMin < (arguments.length <= 3 ? undefined : arguments[3]) ? zMin : arguments.length <= 3 ? undefined : arguments[3];\n  bounds[5] = zMax > (arguments.length <= 3 ? undefined : arguments[3]) ? zMax : arguments.length <= 3 ? undefined : arguments[3];\n  return bounds;\n}\n\nfunction _addBounds(bounds, xMin, xMax, yMin, yMax, zMin, zMax) {\n  var _bounds2 = _slicedToArray(bounds, 6),\n      _xMin = _bounds2[0],\n      _xMax = _bounds2[1],\n      _yMin = _bounds2[2],\n      _yMax = _bounds2[3],\n      _zMin = _bounds2[4],\n      _zMax = _bounds2[5];\n\n  if (zMax === undefined) {\n    bounds[0] = Math.min(xMin[0], _xMin);\n    bounds[1] = Math.max(xMin[1], _xMax);\n    bounds[2] = Math.min(xMin[2], _yMin);\n    bounds[3] = Math.max(xMin[3], _yMax);\n    bounds[4] = Math.min(xMin[4], _zMin);\n    bounds[5] = Math.max(xMin[5], _zMax);\n  } else {\n    bounds[0] = Math.min(xMin, _xMin);\n    bounds[1] = Math.max(xMax, _xMax);\n    bounds[2] = Math.min(yMin, _yMin);\n    bounds[3] = Math.max(yMax, _yMax);\n    bounds[4] = Math.min(zMin, _zMin);\n    bounds[5] = Math.max(zMax, _zMax);\n  }\n\n  return bounds;\n}\n\nfunction _setMinPoint(bounds, x, y, z) {\n  var _bounds3 = _slicedToArray(bounds, 6),\n      xMin = _bounds3[0],\n      xMax = _bounds3[1],\n      yMin = _bounds3[2],\n      yMax = _bounds3[3],\n      zMin = _bounds3[4],\n      zMax = _bounds3[5];\n\n  bounds[0] = x;\n  bounds[1] = x > xMax ? x : xMax;\n  bounds[2] = y;\n  bounds[3] = y > yMax ? y : yMax;\n  bounds[4] = z;\n  bounds[5] = z > zMax ? z : zMax;\n  return xMin !== x || yMin !== y || zMin !== z;\n}\n\nfunction _setMaxPoint(bounds, x, y, z) {\n  var _bounds4 = _slicedToArray(bounds, 6),\n      xMin = _bounds4[0],\n      xMax = _bounds4[1],\n      yMin = _bounds4[2],\n      yMax = _bounds4[3],\n      zMin = _bounds4[4],\n      zMax = _bounds4[5];\n\n  bounds[0] = x < xMin ? x : xMin;\n  bounds[1] = x;\n  bounds[2] = y < yMin ? y : yMin;\n  bounds[3] = y;\n  bounds[4] = z < zMin ? z : zMin;\n  bounds[5] = z;\n  return xMax !== x || yMax !== y || zMax !== z;\n}\n\nfunction _inflate(bounds, delta) {\n  bounds[0] -= delta;\n  bounds[1] += delta;\n  bounds[2] -= delta;\n  bounds[3] += delta;\n  bounds[4] -= delta;\n  bounds[5] += delta;\n  return bounds;\n}\n\nfunction _scale(bounds, sx, sy, sz) {\n  if (!_isValid(bounds)) {\n    return false;\n  }\n\n  if (sx >= 0.0) {\n    bounds[0] *= sx;\n    bounds[1] *= sx;\n  } else {\n    bounds[0] = sx * bounds[1];\n    bounds[1] = sx * bounds[0];\n  }\n\n  if (sy >= 0.0) {\n    bounds[2] *= sy;\n    bounds[3] *= sy;\n  } else {\n    bounds[2] = sy * bounds[3];\n    bounds[3] = sy * bounds[2];\n  }\n\n  if (sz >= 0.0) {\n    bounds[4] *= sz;\n    bounds[5] *= sz;\n  } else {\n    bounds[4] = sz * bounds[5];\n    bounds[5] = sz * bounds[4];\n  }\n\n  return true;\n}\n\nfunction _getCenter(bounds) {\n  return [0.5 * (bounds[0] + bounds[1]), 0.5 * (bounds[2] + bounds[3]), 0.5 * (bounds[4] + bounds[5])];\n}\nfunction scaleAboutCenter(bounds, sx, sy, sz) {\n  if (!_isValid(bounds)) {\n    return false;\n  }\n\n  var center = _getCenter(bounds);\n\n  bounds[0] -= center[0];\n  bounds[1] -= center[0];\n  bounds[2] -= center[1];\n  bounds[3] -= center[1];\n  bounds[4] -= center[2];\n  bounds[5] -= center[2];\n\n  _scale(bounds, sx, sy, sz);\n\n  bounds[0] += center[0];\n  bounds[1] += center[0];\n  bounds[2] += center[1];\n  bounds[3] += center[1];\n  bounds[4] += center[2];\n  bounds[5] += center[2];\n  return true;\n}\n\nfunction _getLength(bounds, index) {\n  return bounds[index * 2 + 1] - bounds[index * 2];\n}\n\nfunction _getLengths(bounds) {\n  return [_getLength(bounds, 0), _getLength(bounds, 1), _getLength(bounds, 2)];\n}\n\nfunction _getXRange(bounds) {\n  return bounds.slice(0, 2);\n}\n\nfunction _getYRange(bounds) {\n  return bounds.slice(2, 4);\n}\n\nfunction _getZRange(bounds) {\n  return bounds.slice(4, 6);\n}\n\nfunction _getMaxLength(bounds) {\n  var l = _getLengths(bounds);\n\n  if (l[0] > l[1]) {\n    if (l[0] > l[2]) {\n      return l[0];\n    }\n\n    return l[2];\n  }\n\n  if (l[1] > l[2]) {\n    return l[1];\n  }\n\n  return l[2];\n}\n\nfunction _getDiagonalLength(bounds) {\n  if (_isValid(bounds)) {\n    var l = _getLengths(bounds);\n\n    return Math.sqrt(l[0] * l[0] + l[1] * l[1] + l[2] * l[2]);\n  }\n\n  return null;\n}\n\nfunction _getMinPoint(bounds) {\n  return [bounds[0], bounds[2], bounds[4]];\n}\n\nfunction _getMaxPoint(bounds) {\n  return [bounds[1], bounds[3], bounds[5]];\n}\n\nfunction oppositeSign(a, b) {\n  return a <= 0 && b >= 0 || a >= 0 && b <= 0;\n}\n\nfunction _getCorners(bounds, corners) {\n  var count = 0;\n\n  for (var ix = 0; ix < 2; ix++) {\n    for (var iy = 2; iy < 4; iy++) {\n      for (var iz = 4; iz < 6; iz++) {\n        corners[count] = [bounds[ix], bounds[iy], bounds[iz]];\n        count++;\n      }\n    }\n  }\n\n  return corners;\n} // Computes the two corners with minimal and miximal coordinates\n\nfunction _computeCornerPoints(bounds, point1, point2) {\n  point1[0] = bounds[0];\n  point1[1] = bounds[2];\n  point1[2] = bounds[4];\n  point2[0] = bounds[1];\n  point2[1] = bounds[3];\n  point2[2] = bounds[5];\n  return point1;\n}\n\nfunction _computeScale(bounds) {\n  var scale3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  scale3[0] = 0.5 * (bounds[1] - bounds[0]);\n  scale3[1] = 0.5 * (bounds[3] - bounds[2]);\n  scale3[2] = 0.5 * (bounds[5] - bounds[4]);\n  return scale3;\n}\n\nfunction _computeLocalBounds(points, u, v, w) {\n  var bounds = [].concat(INIT_BOUNDS);\n  var pointsData = points.getData();\n\n  for (var i = 0; i < pointsData.length; i += 3) {\n    var point = [pointsData[i], pointsData[i + 1], pointsData[i + 2]];\n    var du = dot(point, u);\n    bounds[0] = Math.min(du, bounds[0]);\n    bounds[1] = Math.max(du, bounds[1]);\n    var dv = dot(point, v);\n    bounds[2] = Math.min(dv, bounds[2]);\n    bounds[3] = Math.max(dv, bounds[3]);\n    var dw = dot(point, w);\n    bounds[4] = Math.min(dw, bounds[4]);\n    bounds[5] = Math.max(dw, bounds[5]);\n  }\n\n  return bounds;\n} // The method returns a non-zero value if the bounding box is hit.\n\nfunction _intersectBox(bounds, origin, dir, coord, tolerance) {\n  var inside = true;\n  var quadrant = [];\n  var whichPlane = 0;\n  var maxT = [];\n  var candidatePlane = [0.0, 0.0, 0.0];\n  var RIGHT = 0;\n  var LEFT = 1;\n  var MIDDLE = 2; // First find closest planes\n\n  for (var i = 0; i < 3; i++) {\n    if (origin[i] < bounds[2 * i]) {\n      quadrant[i] = LEFT;\n      candidatePlane[i] = bounds[2 * i];\n      inside = false;\n    } else if (origin[i] > bounds[2 * i + 1]) {\n      quadrant[i] = RIGHT;\n      candidatePlane[i] = bounds[2 * i + 1];\n      inside = false;\n    } else {\n      quadrant[i] = MIDDLE;\n    }\n  } // Check whether origin of ray is inside bbox\n\n\n  if (inside) {\n    coord[0] = origin[0];\n    coord[1] = origin[1];\n    coord[2] = origin[2];\n    tolerance[0] = 0;\n    return 1;\n  } // Calculate parametric distance to plane\n\n\n  for (var _i = 0; _i < 3; _i++) {\n    if (quadrant[_i] !== MIDDLE && dir[_i] !== 0.0) {\n      maxT[_i] = (candidatePlane[_i] - origin[_i]) / dir[_i];\n    } else {\n      maxT[_i] = -1.0;\n    }\n  } // Find the largest parametric value of intersection\n\n\n  for (var _i2 = 0; _i2 < 3; _i2++) {\n    if (maxT[whichPlane] < maxT[_i2]) {\n      whichPlane = _i2;\n    }\n  } // Check for valie intersection along line\n\n\n  if (maxT[whichPlane] > 1.0 || maxT[whichPlane] < 0.0) {\n    return 0;\n  }\n\n  tolerance[0] = maxT[whichPlane]; // Intersection point along line is okay. Check bbox.\n\n  for (var _i3 = 0; _i3 < 3; _i3++) {\n    if (whichPlane !== _i3) {\n      coord[_i3] = origin[_i3] + maxT[whichPlane] * dir[_i3];\n\n      if (coord[_i3] < bounds[2 * _i3] || coord[_i3] > bounds[2 * _i3 + 1]) {\n        return 0;\n      }\n    } else {\n      coord[_i3] = candidatePlane[_i3];\n    }\n  }\n\n  return 1;\n} // Plane intersection with box\n\nfunction _intersectPlane(bounds, origin, normal) {\n  var p = [];\n  var d = 0;\n  var sign = 1;\n  var firstOne = 1; // Evaluate the eight points. If there is a sign change, there is an intersection\n\n  for (var z = 4; z <= 5; ++z) {\n    p[2] = bounds[z];\n\n    for (var y = 2; y <= 3; ++y) {\n      p[1] = bounds[y];\n\n      for (var x = 0; x <= 1; ++x) {\n        p[0] = bounds[x];\n        d = vtkPlane.evaluate(normal, origin, p);\n\n        if (firstOne) {\n          sign = d >= 0 ? 1 : -1;\n          firstOne = 0;\n        }\n\n        if (d === 0.0 || sign > 0 && d < 0.0 || sign < 0 && d > 0.0) {\n          return 1;\n        }\n      }\n    }\n  }\n\n  return 0; // no intersection\n}\n\nfunction _intersect(bounds, bBounds) {\n  if (!(_isValid(bounds) && _isValid(bBounds))) {\n    return false;\n  }\n\n  var newBounds = [0, 0, 0, 0, 0, 0];\n  var intersection;\n\n  for (var i = 0; i < 3; i++) {\n    intersection = false;\n\n    if (bBounds[i * 2] >= bounds[i * 2] && bBounds[i * 2] <= bounds[i * 2 + 1]) {\n      intersection = true;\n      newBounds[i * 2] = bBounds[i * 2];\n    } else if (bounds[i * 2] >= bBounds[i * 2] && bounds[i * 2] <= bBounds[i * 2 + 1]) {\n      intersection = true;\n      newBounds[i * 2] = bounds[i * 2];\n    }\n\n    if (bBounds[i * 2 + 1] >= bounds[i * 2] && bBounds[i * 2 + 1] <= bounds[i * 2 + 1]) {\n      intersection = true;\n      newBounds[i * 2 + 1] = bBounds[2 * i + 1];\n    } else if (bounds[i * 2 + 1] >= bBounds[i * 2] && bounds[i * 2 + 1] <= bBounds[i * 2 + 1]) {\n      intersection = true;\n      newBounds[i * 2 + 1] = bounds[i * 2 + 1];\n    }\n\n    if (!intersection) {\n      return false;\n    }\n  } // OK they did intersect - set the box to be the result\n\n\n  bounds[0] = newBounds[0];\n  bounds[1] = newBounds[1];\n  bounds[2] = newBounds[2];\n  bounds[3] = newBounds[3];\n  bounds[4] = newBounds[4];\n  bounds[5] = newBounds[5];\n  return true;\n}\n\nfunction _intersects(bounds, bBounds) {\n  if (!(_isValid(bounds) && _isValid(bBounds))) {\n    return false;\n  }\n  /* eslint-disable no-continue */\n\n\n  for (var i = 0; i < 3; i++) {\n    if (bBounds[i * 2] >= bounds[i * 2] && bBounds[i * 2] <= bounds[i * 2 + 1]) {\n      continue;\n    } else if (bounds[i * 2] >= bBounds[i * 2] && bounds[i * 2] <= bBounds[i * 2 + 1]) {\n      continue;\n    }\n\n    if (bBounds[i * 2 + 1] >= bounds[i * 2] && bBounds[i * 2 + 1] <= bounds[i * 2 + 1]) {\n      continue;\n    } else if (bounds[i * 2 + 1] >= bBounds[i * 2] && bounds[i * 2 + 1] <= bBounds[i * 2 + 1]) {\n      continue;\n    }\n\n    return false;\n  }\n  /* eslint-enable no-continue */\n\n\n  return true;\n}\n\nfunction _containsPoint(bounds, x, y, z) {\n  if (x < bounds[0] || x > bounds[1]) {\n    return false;\n  }\n\n  if (y < bounds[2] || y > bounds[3]) {\n    return false;\n  }\n\n  if (z < bounds[4] || z > bounds[5]) {\n    return false;\n  }\n\n  return true;\n}\nfunction contains(bounds, otherBounds) {\n  // if either box is not valid or they don't intersect\n  if (!_intersects(bounds, otherBounds)) {\n    return false;\n  }\n\n  if (!_containsPoint.apply(void 0, [bounds].concat(_toConsumableArray(_getMinPoint(otherBounds))))) {\n    return false;\n  }\n\n  if (!_containsPoint.apply(void 0, [bounds].concat(_toConsumableArray(_getMaxPoint(otherBounds))))) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Returns true if plane intersects bounding box.\n * If so, the box is cut by the plane\n * @param {array} origin\n * @param {array} normal\n */\n\nfunction _cutWithPlane(bounds, origin, normal) {\n  // Index[0..2] represents the order of traversing the corners of a cube\n  // in (x,y,z), (y,x,z) and (z,x,y) ordering, respectively\n  var index = [[0, 1, 2, 3, 4, 5, 6, 7], [0, 1, 4, 5, 2, 3, 6, 7], [0, 2, 4, 6, 1, 3, 5, 7]]; // stores the signed distance to a plane\n\n  var d = [0, 0, 0, 0, 0, 0, 0, 0];\n  var idx = 0;\n\n  for (var ix = 0; ix < 2; ix++) {\n    for (var iy = 2; iy < 4; iy++) {\n      for (var iz = 4; iz < 6; iz++) {\n        var x = [bounds[ix], bounds[iy], bounds[iz]];\n        d[idx++] = vtkPlane.evaluate(normal, origin, x);\n      }\n    }\n  }\n\n  var dir = 2;\n\n  while (dir--) {\n    // in each direction, we test if the vertices of two orthogonal faces\n    // are on either side of the plane\n    if (oppositeSign(d[index[dir][0]], d[index[dir][4]]) && oppositeSign(d[index[dir][1]], d[index[dir][5]]) && oppositeSign(d[index[dir][2]], d[index[dir][6]]) && oppositeSign(d[index[dir][3]], d[index[dir][7]])) {\n      break;\n    }\n  }\n\n  if (dir < 0) {\n    return false;\n  }\n\n  var sign = Math.sign(normal[dir]);\n  var size = Math.abs((bounds[dir * 2 + 1] - bounds[dir * 2]) * normal[dir]);\n  var t = sign > 0 ? 1 : 0;\n  /* eslint-disable no-continue */\n\n  for (var i = 0; i < 4; i++) {\n    if (size === 0) {\n      continue; // shouldn't happen\n    }\n\n    var ti = Math.abs(d[index[dir][i]]) / size;\n\n    if (sign > 0 && ti < t) {\n      t = ti;\n    }\n\n    if (sign < 0 && ti > t) {\n      t = ti;\n    }\n  }\n  /* eslint-enable no-continue */\n\n\n  var bound = (1.0 - t) * bounds[dir * 2] + t * bounds[dir * 2 + 1];\n\n  if (sign > 0) {\n    bounds[dir * 2] = bound;\n  } else {\n    bounds[dir * 2 + 1] = bound;\n  }\n\n  return true;\n} // ----------------------------------------------------------------------------\n\nvar BoundingBox = /*#__PURE__*/function () {\n  function BoundingBox(refBounds) {\n    _classCallCheck(this, BoundingBox);\n\n    this.bounds = refBounds;\n\n    if (!this.bounds) {\n      this.bounds = new Float64Array(INIT_BOUNDS);\n    }\n  }\n\n  _createClass(BoundingBox, [{\n    key: \"getBounds\",\n    value: function getBounds() {\n      return this.bounds;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(otherBounds) {\n      return _equals(this.bounds, otherBounds);\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return _isValid(this.bounds);\n    }\n  }, {\n    key: \"setBounds\",\n    value: function setBounds(otherBounds) {\n      return _setBounds(this.bounds, otherBounds);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      return _reset(this.bounds);\n    }\n  }, {\n    key: \"addPoint\",\n    value: function addPoint() {\n      for (var _len = arguments.length, xyz = new Array(_len), _key = 0; _key < _len; _key++) {\n        xyz[_key] = arguments[_key];\n      }\n\n      return _addPoint(this.bounds, xyz);\n    }\n  }, {\n    key: \"addBounds\",\n    value: function addBounds(xMin, xMax, yMin, yMax, zMin, zMax) {\n      return _addBounds(this.bounds, xMin, xMax, yMin, yMax, zMin, zMax);\n    }\n  }, {\n    key: \"setMinPoint\",\n    value: function setMinPoint(x, y, z) {\n      return _setMinPoint(this.bounds, x, y, z);\n    }\n  }, {\n    key: \"setMaxPoint\",\n    value: function setMaxPoint(x, y, z) {\n      return _setMaxPoint(this.bounds, x, y, z);\n    }\n  }, {\n    key: \"inflate\",\n    value: function inflate(delta) {\n      return _inflate(this.bounds, delta);\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(sx, sy, sz) {\n      return _scale(this.bounds, sx, sy, sz);\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter() {\n      return _getCenter(this.bounds);\n    }\n  }, {\n    key: \"getLength\",\n    value: function getLength(index) {\n      return _getLength(this.bounds, index);\n    }\n  }, {\n    key: \"getLengths\",\n    value: function getLengths() {\n      return _getLengths(this.bounds);\n    }\n  }, {\n    key: \"getMaxLength\",\n    value: function getMaxLength() {\n      return _getMaxLength(this.bounds);\n    }\n  }, {\n    key: \"getDiagonalLength\",\n    value: function getDiagonalLength() {\n      return _getDiagonalLength(this.bounds);\n    }\n  }, {\n    key: \"getMinPoint\",\n    value: function getMinPoint() {\n      return _getMinPoint(this.bounds);\n    }\n  }, {\n    key: \"getMaxPoint\",\n    value: function getMaxPoint() {\n      return _getMaxPoint(this.bounds);\n    }\n  }, {\n    key: \"getXRange\",\n    value: function getXRange() {\n      return _getXRange(this.bounds);\n    }\n  }, {\n    key: \"getYRange\",\n    value: function getYRange() {\n      return _getYRange(this.bounds);\n    }\n  }, {\n    key: \"getZRange\",\n    value: function getZRange() {\n      return _getZRange(this.bounds);\n    }\n  }, {\n    key: \"getCorners\",\n    value: function getCorners(corners) {\n      return _getCorners(this.bounds, corners);\n    }\n  }, {\n    key: \"computeCornerPoints\",\n    value: function computeCornerPoints(point1, point2) {\n      return _computeCornerPoints(this.bounds, point1, point2);\n    }\n  }, {\n    key: \"computeLocalBounds\",\n    value: function computeLocalBounds(u, v, w) {\n      return _computeLocalBounds(this.bounds, u, v, w);\n    }\n  }, {\n    key: \"computeScale3\",\n    value: function computeScale3(scale3) {\n      return _computeScale(this.bounds, scale3);\n    }\n  }, {\n    key: \"cutWithPlane\",\n    value: function cutWithPlane(origin, normal) {\n      return _cutWithPlane(this.bounds, origin, normal);\n    }\n  }, {\n    key: \"intersectBox\",\n    value: function intersectBox(origin, dir, coord, tolerance) {\n      return _intersectBox(this.bounds, origin, dir, coord, tolerance);\n    }\n  }, {\n    key: \"intersectPlane\",\n    value: function intersectPlane(origin, normal) {\n      return _intersectPlane(this.bounds, origin, normal);\n    }\n  }, {\n    key: \"intersect\",\n    value: function intersect(otherBounds) {\n      return _intersect(this.bounds, otherBounds);\n    }\n  }, {\n    key: \"intersects\",\n    value: function intersects(otherBounds) {\n      return _intersects(this.bounds, otherBounds);\n    }\n  }, {\n    key: \"containsPoint\",\n    value: function containsPoint(x, y, z) {\n      return _containsPoint(this.bounds, x, y, z);\n    }\n  }, {\n    key: \"contains\",\n    value: function contains(otherBounds) {\n      return _intersects(this.bounds, otherBounds);\n    }\n  }]);\n\n  return BoundingBox;\n}();\n\nfunction newInstance(initialValues) {\n  var bounds = initialValues && initialValues.bounds;\n  return new BoundingBox(bounds);\n} // ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\n\nvar STATIC = {\n  equals: _equals,\n  isValid: _isValid,\n  setBounds: _setBounds,\n  reset: _reset,\n  addPoint: _addPoint,\n  addBounds: _addBounds,\n  setMinPoint: _setMinPoint,\n  setMaxPoint: _setMaxPoint,\n  inflate: _inflate,\n  scale: _scale,\n  scaleAboutCenter: scaleAboutCenter,\n  getCenter: _getCenter,\n  getLength: _getLength,\n  getLengths: _getLengths,\n  getMaxLength: _getMaxLength,\n  getDiagonalLength: _getDiagonalLength,\n  getMinPoint: _getMinPoint,\n  getMaxPoint: _getMaxPoint,\n  getXRange: _getXRange,\n  getYRange: _getYRange,\n  getZRange: _getZRange,\n  getCorners: _getCorners,\n  computeCornerPoints: _computeCornerPoints,\n  computeLocalBounds: _computeLocalBounds,\n  computeScale3: _computeScale,\n  cutWithPlane: _cutWithPlane,\n  intersectBox: _intersectBox,\n  intersectPlane: _intersectPlane,\n  intersect: _intersect,\n  intersects: _intersects,\n  containsPoint: _containsPoint,\n  contains: contains,\n  INIT_BOUNDS: INIT_BOUNDS\n};\nvar vtkBoundingBox = _objectSpread({\n  newInstance: newInstance\n}, STATIC);\n\nexport { STATIC, _addBounds as addBounds, _addPoint as addPoint, _computeCornerPoints as computeCornerPoints, _computeLocalBounds as computeLocalBounds, _computeScale as computeScale3, contains, _containsPoint as containsPoint, _cutWithPlane as cutWithPlane, vtkBoundingBox as default, _equals as equals, _getCenter as getCenter, _getCorners as getCorners, _getDiagonalLength as getDiagonalLength, _getLength as getLength, _getLengths as getLengths, _getMaxLength as getMaxLength, _getMaxPoint as getMaxPoint, _getMinPoint as getMinPoint, _getXRange as getXRange, _getYRange as getYRange, _getZRange as getZRange, _inflate as inflate, _intersect as intersect, _intersectBox as intersectBox, _intersectPlane as intersectPlane, _intersects as intersects, _isValid as isValid, _reset as reset, _scale as scale, scaleAboutCenter, _setBounds as setBounds, _setMaxPoint as setMaxPoint, _setMinPoint as setMinPoint };\n"],
  "mappings": "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",
  "names": ["BoundingBox", "contains"]
}
