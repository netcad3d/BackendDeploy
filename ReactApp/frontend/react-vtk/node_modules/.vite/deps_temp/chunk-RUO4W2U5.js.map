{
  "version": 3,
  "sources": ["../../@kitware/vtk.js/Common/Core/Base64.js"],
  "sourcesContent": ["/* eslint-disable no-bitwise */\n// ----------------------------------------------------------------------------\n// Decoding infrastructure\n// ----------------------------------------------------------------------------\nvar REVERSE_LOOKUP = [];\nREVERSE_LOOKUP['-'.charCodeAt(0)] = 62;\nREVERSE_LOOKUP['_'.charCodeAt(0)] = 63;\nvar BASE64_CODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nfor (var i = 0; i < BASE64_CODE.length; i++) {\n  REVERSE_LOOKUP[BASE64_CODE.charCodeAt(i)] = i;\n} // ----------------------------------------------------------------------------\n// Base64 analysis\n// ----------------------------------------------------------------------------\n\n\nfunction isValidChar(c) {\n  return REVERSE_LOOKUP[c.charCodeAt(0)] !== undefined;\n}\n\nfunction extractChunks(b64Str) {\n  var strSize = b64Str.length;\n  var chunks = [];\n  var currentChunk = null;\n\n  for (var _i = 0; _i < strSize; _i++) {\n    if (isValidChar(b64Str[_i])) {\n      if (!currentChunk) {\n        currentChunk = {\n          start: _i,\n          count: 0\n        };\n      }\n\n      currentChunk.count++;\n      currentChunk.end = _i;\n    } else if (b64Str[_i] === '=' && currentChunk) {\n      // End of chunk (found padding char)\n      chunks.push(currentChunk);\n      currentChunk = null;\n    }\n  }\n\n  if (currentChunk) {\n    chunks.push(currentChunk);\n  }\n\n  return chunks;\n}\n\nfunction writeChunk(b64Str, chunk, dstOffset, uint8) {\n  var start = chunk.start,\n      count = chunk.count;\n  var remain = count % 4;\n  var fourCharProcessCount = Math.floor(count / 4);\n  var charIdx = start;\n  var tmp = null;\n  var offset = dstOffset; // Handle 4=>3\n\n  for (var _i2 = 0; _i2 < fourCharProcessCount; _i2++) {\n    while (!isValidChar(b64Str[charIdx])) {\n      charIdx++;\n    }\n\n    tmp = REVERSE_LOOKUP[b64Str.charCodeAt(charIdx++)] << 18;\n\n    while (!isValidChar(b64Str[charIdx])) {\n      charIdx++;\n    }\n\n    tmp |= REVERSE_LOOKUP[b64Str.charCodeAt(charIdx++)] << 12;\n\n    while (!isValidChar(b64Str[charIdx])) {\n      charIdx++;\n    }\n\n    tmp |= REVERSE_LOOKUP[b64Str.charCodeAt(charIdx++)] << 6;\n\n    while (!isValidChar(b64Str[charIdx])) {\n      charIdx++;\n    }\n\n    tmp |= REVERSE_LOOKUP[b64Str.charCodeAt(charIdx++)];\n    uint8[offset++] = tmp >> 16 & 0xff;\n    uint8[offset++] = tmp >> 8 & 0xff;\n    uint8[offset++] = tmp & 0xff;\n  } // Handle remain\n\n\n  switch (remain) {\n    case 3:\n      while (!isValidChar(b64Str[charIdx])) {\n        charIdx++;\n      }\n\n      tmp = REVERSE_LOOKUP[b64Str.charCodeAt(charIdx++)] << 10;\n\n      while (!isValidChar(b64Str[charIdx])) {\n        charIdx++;\n      }\n\n      tmp |= REVERSE_LOOKUP[b64Str.charCodeAt(charIdx++)] << 4;\n\n      while (!isValidChar(b64Str[charIdx])) {\n        charIdx++;\n      }\n\n      tmp |= REVERSE_LOOKUP[b64Str.charCodeAt(charIdx++)] >> 2;\n      uint8[offset++] = tmp >> 8 & 0xff;\n      uint8[offset++] = tmp & 0xff;\n      break;\n\n    case 2:\n      while (!isValidChar(b64Str[charIdx])) {\n        charIdx++;\n      }\n\n      tmp = REVERSE_LOOKUP[b64Str.charCodeAt(charIdx++)] << 2;\n\n      while (!isValidChar(b64Str[charIdx])) {\n        charIdx++;\n      }\n\n      tmp |= REVERSE_LOOKUP[b64Str.charCodeAt(charIdx++)] >> 4;\n      uint8[offset++] = tmp & 0xff;\n      break;\n\n    case 1:\n      throw new Error('BASE64: remain 1 should not happen');\n  }\n\n  return offset;\n}\n\nfunction toArrayBuffer(b64Str) {\n  var chunks = extractChunks(b64Str);\n  var totalEncodedLength = chunks[chunks.length - 1].end + 1;\n  var padding = (4 - totalEncodedLength % 4) % 4; // -length mod 4\n  // Any padding chars in the middle of b64Str is to be interpreted as \\x00,\n  // whereas the terminating padding chars are to be interpreted as literal padding.\n\n  var totalSize = (totalEncodedLength + padding) * 3 / 4 - padding;\n  var arrayBuffer = new ArrayBuffer(totalSize);\n  var view = new Uint8Array(arrayBuffer);\n  var dstOffset = 0;\n\n  for (var _i3 = 0; _i3 < chunks.length; _i3++) {\n    dstOffset += writeChunk(b64Str, chunks[_i3], dstOffset, view);\n    dstOffset += (4 - chunks[_i3].count % 4) % 4;\n  }\n\n  return arrayBuffer;\n}\n\nfunction encodeTriplet(v1, v2, v3) {\n  var triplet = (v1 << 16) + (v2 << 8) + v3;\n  return BASE64_CODE[triplet >> 18] + BASE64_CODE[triplet >> 12 & 0x3f] + BASE64_CODE[triplet >> 6 & 0x3f] + BASE64_CODE[triplet & 0x3f];\n}\n\nfunction fromArrayBuffer(ab) {\n  var uint8 = new Uint8Array(ab);\n  var leftoverLength = ab.byteLength % 3;\n  var maxTripletIndex = ab.byteLength - leftoverLength;\n  var segments = Array(maxTripletIndex / 3);\n\n  for (var _i4 = 0; _i4 < segments.length; _i4++) {\n    var bufOffset = _i4 * 3;\n    segments[_i4] = encodeTriplet(uint8[bufOffset], uint8[bufOffset + 1], uint8[bufOffset + 2]);\n  }\n\n  if (leftoverLength > 0) {\n    var segment = encodeTriplet(uint8[maxTripletIndex], uint8[maxTripletIndex + 1] || 0, uint8[maxTripletIndex + 2] || 0);\n\n    if (leftoverLength === 1) {\n      segments.push(\"\".concat(segment.substr(0, 2), \"==\"));\n    } else if (leftoverLength === 2) {\n      segments.push(\"\".concat(segment.substr(0, 3), \"=\"));\n    }\n  }\n\n  return segments.join('');\n}\nvar Base64 = {\n  toArrayBuffer: toArrayBuffer,\n  fromArrayBuffer: fromArrayBuffer\n};\n\nexport { Base64 as default, fromArrayBuffer, toArrayBuffer };\n"],
  "mappings": "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",
  "names": []
}
