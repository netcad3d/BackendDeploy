{
  "version": 3,
  "sources": ["../../@kitware/vtk.js/Common/Core/DataArray.js"],
  "sourcesContent": ["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport Constants from './DataArray/Constants.js';\nimport { newInstance as newInstance$1, newTypedArray, newTypedArrayFrom, obj, set, vtkErrorMacro as vtkErrorMacro$1 } from '../../macros.js';\nimport { n as norm } from './Math/index.js';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar vtkErrorMacro = vtkErrorMacro$1;\nvar DefaultDataType = Constants.DefaultDataType;\nvar TUPLE_HOLDER = []; // ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n// Original source from https://www.npmjs.com/package/compute-range\n// Modified to accept type arrays\n\nfunction fastComputeRange(arr, offset, numberOfComponents) {\n  var len = arr.length;\n  var min;\n  var max;\n  var x;\n  var i;\n\n  if (len === 0) {\n    return {\n      min: Number.MAX_VALUE,\n      max: -Number.MAX_VALUE\n    };\n  }\n\n  min = arr[offset];\n  max = min;\n\n  for (i = offset; i < len; i += numberOfComponents) {\n    x = arr[i];\n\n    if (x < min) {\n      min = x;\n    } else if (x > max) {\n      max = x;\n    }\n  }\n\n  return {\n    min: min,\n    max: max\n  };\n}\n/**\n * @deprecated please use fastComputeRange instead\n */\n\n\nfunction createRangeHelper() {\n  var min = Number.MAX_VALUE;\n  var max = -Number.MAX_VALUE;\n  var count = 0;\n  var sum = 0;\n  return {\n    add: function add(value) {\n      if (min > value) {\n        min = value;\n      }\n\n      if (max < value) {\n        max = value;\n      }\n\n      count++;\n      sum += value;\n    },\n    get: function get() {\n      return {\n        min: min,\n        max: max,\n        count: count,\n        sum: sum,\n        mean: sum / count\n      };\n    },\n    getRange: function getRange() {\n      return {\n        min: min,\n        max: max\n      };\n    }\n  };\n}\n\nfunction computeRange(values) {\n  var component = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var numberOfComponents = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  if (component < 0 && numberOfComponents > 1) {\n    // Compute magnitude\n    var size = values.length;\n    var numberOfValues = size / numberOfComponents;\n    var data = new Float64Array(numberOfValues);\n\n    for (var i = 0, j = 0; i < numberOfValues; ++i) {\n      var _i;\n\n      for (var nextJ = j + numberOfComponents; j < nextJ; ++j) {\n        data[i] += values[j] * values[j];\n      }\n\n      _i = i, data[_i] = Math.pow(data[_i], 0.5);\n    }\n\n    return fastComputeRange(data, 0, 1);\n  }\n\n  return fastComputeRange(values, component < 0 ? 0 : component, numberOfComponents);\n}\n\nfunction ensureRangeSize(rangeArray) {\n  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var ranges = rangeArray || []; // Pad ranges with null value to get the\n\n  while (ranges.length <= size) {\n    ranges.push(null);\n  }\n\n  return ranges;\n}\n\nfunction getDataType(typedArray) {\n  // Expects toString() to return \"[object ...Array]\"\n  return Object.prototype.toString.call(typedArray).slice(8, -1);\n}\n\nfunction getMaxNorm(normArray) {\n  var numComps = normArray.getNumberOfComponents();\n  var maxNorm = 0.0;\n\n  for (var i = 0; i < normArray.getNumberOfTuples(); ++i) {\n    var norm$1 = norm(normArray.getTuple(i), numComps);\n\n    if (norm$1 > maxNorm) {\n      maxNorm = norm$1;\n    }\n  }\n\n  return maxNorm;\n} // ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\n\nvar STATIC = {\n  computeRange: computeRange,\n  createRangeHelper: createRangeHelper,\n  fastComputeRange: fastComputeRange,\n  getDataType: getDataType,\n  getMaxNorm: getMaxNorm\n}; // ----------------------------------------------------------------------------\n// vtkDataArray methods\n// ----------------------------------------------------------------------------\n\nfunction vtkDataArray(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkDataArray');\n\n  function dataChange() {\n    model.ranges = null;\n    publicAPI.modified();\n  }\n  /**\n   * Resize model.values and copy the old values to the new array.\n   * @param {Number} requestedNumTuples Final expected number of tuples; must be >= 0\n   * @returns {Boolean} True if a resize occured, false otherwise\n   */\n\n\n  function resize(requestedNumTuples) {\n    if (requestedNumTuples < 0) {\n      return false;\n    }\n\n    var numComps = publicAPI.getNumberOfComponents();\n    var curNumTuples = model.values.length / (numComps > 0 ? numComps : 1);\n\n    if (requestedNumTuples === curNumTuples) {\n      return true;\n    }\n\n    if (requestedNumTuples > curNumTuples) {\n      // Requested size is bigger than current size.  Allocate enough\n      // memory to fit the requested size and be more than double the\n      // currently allocated memory.\n      var oldValues = model.values;\n      model.values = newTypedArray(model.dataType, (requestedNumTuples + curNumTuples) * numComps);\n      model.values.set(oldValues);\n      return true;\n    } // Requested size is smaller than current size\n\n\n    model.size = requestedNumTuples * numComps;\n    dataChange();\n    return true;\n  }\n\n  publicAPI.initialize = function () {\n    resize(0);\n  };\n\n  publicAPI.getElementComponentSize = function () {\n    return model.values.BYTES_PER_ELEMENT;\n  }; // Description:\n  // Return the data component at the location specified by tupleIdx and\n  // compIdx.\n\n\n  publicAPI.getComponent = function (tupleIdx) {\n    var compIdx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return model.values[tupleIdx * model.numberOfComponents + compIdx];\n  }; // Description:\n  // Set the data component at the location specified by tupleIdx and compIdx\n  // to value.\n  // Note that i is less than NumberOfTuples and j is less than\n  //  NumberOfComponents. Make sure enough memory has been allocated\n  // (use SetNumberOfTuples() and SetNumberOfComponents()).\n\n\n  publicAPI.setComponent = function (tupleIdx, compIdx, value) {\n    if (value !== model.values[tupleIdx * model.numberOfComponents + compIdx]) {\n      model.values[tupleIdx * model.numberOfComponents + compIdx] = value;\n      dataChange();\n    }\n  };\n\n  publicAPI.getValue = function (valueIdx) {\n    var idx = valueIdx / model.numberOfComponents;\n    var comp = valueIdx % model.numberOfComponents;\n    return publicAPI.getComponent(idx, comp);\n  };\n\n  publicAPI.setValue = function (valueIdx, value) {\n    var idx = valueIdx / model.numberOfComponents;\n    var comp = valueIdx % model.numberOfComponents;\n    publicAPI.setComponent(idx, comp, value);\n  };\n\n  publicAPI.getData = function () {\n    return model.size === model.values.length ? model.values : model.values.subarray(0, model.size);\n  };\n\n  publicAPI.getRange = function () {\n    var componentIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n    var rangeIdx = componentIndex < 0 ? model.numberOfComponents : componentIndex;\n    var range = null;\n\n    if (!model.ranges) {\n      model.ranges = ensureRangeSize(model.ranges, model.numberOfComponents);\n    }\n\n    range = model.ranges[rangeIdx];\n\n    if (range) {\n      model.rangeTuple[0] = range.min;\n      model.rangeTuple[1] = range.max;\n      return model.rangeTuple;\n    } // Need to compute ranges...\n\n\n    range = computeRange(publicAPI.getData(), componentIndex, model.numberOfComponents);\n    model.ranges[rangeIdx] = range;\n    model.rangeTuple[0] = range.min;\n    model.rangeTuple[1] = range.max;\n    return model.rangeTuple;\n  };\n\n  publicAPI.setRange = function (rangeValue, componentIndex) {\n    if (!model.ranges) {\n      model.ranges = ensureRangeSize(model.ranges, model.numberOfComponents);\n    }\n\n    var range = {\n      min: rangeValue.min,\n      max: rangeValue.max\n    };\n    model.ranges[componentIndex] = range;\n    model.rangeTuple[0] = range.min;\n    model.rangeTuple[1] = range.max;\n    return model.rangeTuple;\n  };\n\n  publicAPI.setTuple = function (idx, tuple) {\n    var offset = idx * model.numberOfComponents;\n\n    for (var i = 0; i < model.numberOfComponents; i++) {\n      model.values[offset + i] = tuple[i];\n    }\n  };\n\n  publicAPI.setTuples = function (idx, tuples) {\n    var i = idx * model.numberOfComponents;\n    var last = Math.min(tuples.length, model.size - i);\n\n    for (var j = 0; j < last;) {\n      model.values[i++] = tuples[j++];\n    }\n  };\n\n  publicAPI.insertTuple = function (idx, tuple) {\n    if (model.size <= idx * model.numberOfComponents) {\n      model.size = (idx + 1) * model.numberOfComponents;\n      resize(idx + 1);\n    }\n\n    publicAPI.setTuple(idx, tuple);\n    return idx;\n  };\n\n  publicAPI.insertTuples = function (idx, tuples) {\n    var end = idx + tuples.length / model.numberOfComponents;\n\n    if (model.size < end * model.numberOfComponents) {\n      model.size = end * model.numberOfComponents;\n      resize(end);\n    }\n\n    publicAPI.setTuples(idx, tuples);\n    return end;\n  };\n\n  publicAPI.insertNextTuple = function (tuple) {\n    var idx = model.size / model.numberOfComponents;\n    return publicAPI.insertTuple(idx, tuple);\n  };\n\n  publicAPI.insertNextTuples = function (tuples) {\n    var idx = model.size / model.numberOfComponents;\n    return publicAPI.insertTuples(idx, tuples);\n  };\n\n  publicAPI.getTuple = function (idx) {\n    var tupleToFill = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TUPLE_HOLDER;\n    var numberOfComponents = model.numberOfComponents || 1;\n\n    if (tupleToFill.length !== numberOfComponents) {\n      tupleToFill.length = numberOfComponents;\n    }\n\n    var offset = idx * numberOfComponents; // Check most common component sizes first\n    // to avoid doing a for loop if possible\n\n    switch (numberOfComponents) {\n      case 4:\n        tupleToFill[3] = model.values[offset + 3];\n      // eslint-disable-next-line no-fallthrough\n\n      case 3:\n        tupleToFill[2] = model.values[offset + 2];\n      // eslint-disable-next-line no-fallthrough\n\n      case 2:\n        tupleToFill[1] = model.values[offset + 1];\n      // eslint-disable-next-line no-fallthrough\n\n      case 1:\n        tupleToFill[0] = model.values[offset];\n        break;\n\n      default:\n        for (var i = 0; i < numberOfComponents; i++) {\n          tupleToFill[i] = model.values[offset + i];\n        }\n\n    }\n\n    return tupleToFill;\n  };\n\n  publicAPI.getTuples = function (fromId, toId) {\n    var from = (fromId !== null && fromId !== void 0 ? fromId : 0) * model.numberOfComponents;\n    var to = (toId !== null && toId !== void 0 ? toId : publicAPI.getNumberOfTuples()) * model.numberOfComponents;\n    var arr = publicAPI.getData().subarray(from, to);\n    return arr.length > 0 ? arr : null;\n  };\n\n  publicAPI.getTupleLocation = function () {\n    var idx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return idx * model.numberOfComponents;\n  };\n\n  publicAPI.getNumberOfComponents = function () {\n    return model.numberOfComponents;\n  };\n\n  publicAPI.getNumberOfValues = function () {\n    return model.size;\n  };\n\n  publicAPI.getNumberOfTuples = function () {\n    return model.size / model.numberOfComponents;\n  };\n\n  publicAPI.getDataType = function () {\n    return model.dataType;\n  };\n  /* eslint-disable no-use-before-define */\n\n\n  publicAPI.newClone = function () {\n    return newInstance({\n      empty: true,\n      name: model.name,\n      dataType: model.dataType,\n      numberOfComponents: model.numberOfComponents\n    });\n  };\n  /* eslint-enable no-use-before-define */\n\n\n  publicAPI.getName = function () {\n    if (!model.name) {\n      publicAPI.modified();\n      model.name = \"vtkDataArray\".concat(publicAPI.getMTime());\n    }\n\n    return model.name;\n  };\n\n  publicAPI.setData = function (typedArray, numberOfComponents) {\n    model.values = typedArray;\n    model.size = typedArray.length;\n    model.dataType = getDataType(typedArray);\n\n    if (numberOfComponents) {\n      model.numberOfComponents = numberOfComponents;\n    }\n\n    if (model.size % model.numberOfComponents !== 0) {\n      model.numberOfComponents = 1;\n    }\n\n    dataChange();\n  }; // Override serialization support\n\n\n  publicAPI.getState = function () {\n    if (model.deleted) {\n      return null;\n    }\n\n    var jsonArchive = _objectSpread(_objectSpread({}, model), {}, {\n      vtkClass: publicAPI.getClassName()\n    }); // Convert typed array to regular array\n\n\n    jsonArchive.values = Array.from(jsonArchive.values);\n    delete jsonArchive.buffer; // Clean any empty data\n\n    Object.keys(jsonArchive).forEach(function (keyName) {\n      if (!jsonArchive[keyName]) {\n        delete jsonArchive[keyName];\n      }\n    }); // Sort resulting object by key name\n\n    var sortedObj = {};\n    Object.keys(jsonArchive).sort().forEach(function (name) {\n      sortedObj[name] = jsonArchive[name];\n    }); // Remove mtime\n\n    if (sortedObj.mtime) {\n      delete sortedObj.mtime;\n    }\n\n    return sortedObj;\n  };\n\n  publicAPI.deepCopy = function (other) {\n    publicAPI.shallowCopy(other);\n    publicAPI.setData(other.getData().slice());\n  };\n\n  publicAPI.interpolateTuple = function (idx, source1, source1Idx, source2, source2Idx, t) {\n    var numberOfComponents = model.numberOfComponents || 1;\n\n    if (numberOfComponents !== source1.getNumberOfComponents() || numberOfComponents !== source2.getNumberOfComponents()) {\n      vtkErrorMacro('numberOfComponents must match');\n    }\n\n    var tuple1 = [];\n    var tuple2 = [];\n    var out = [];\n    out.length = numberOfComponents;\n    source1.getTuple(source1Idx, tuple1);\n    source2.getTuple(source2Idx, tuple2); // Check most common component sizes first\n    // to avoid doing a for loop if possible\n\n    switch (numberOfComponents) {\n      case 4:\n        out[3] = tuple1[3] + (tuple2[3] - tuple1[3]) * t;\n      // eslint-disable-next-line no-fallthrough\n\n      case 3:\n        out[2] = tuple1[2] + (tuple2[2] - tuple1[2]) * t;\n      // eslint-disable-next-line no-fallthrough\n\n      case 2:\n        out[1] = tuple1[1] + (tuple2[1] - tuple1[1]) * t;\n      // eslint-disable-next-line no-fallthrough\n\n      case 1:\n        out[0] = tuple1[0] + (tuple2[0] - tuple1[0]) * t;\n        break;\n\n      default:\n        for (var i = 0; i < numberOfComponents; i++) {\n          out[i] = tuple1[i] + (tuple2[i] - tuple1[i]) * t;\n        }\n\n    }\n\n    return publicAPI.insertTuple(idx, out);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n// size: The current size of the dataArray.\n// NOTE: The underlying typed array may be larger than 'size'.\n\n\nvar DEFAULT_VALUES = {\n  name: '',\n  numberOfComponents: 1,\n  dataType: DefaultDataType,\n  rangeTuple: [0, 0] // size: undefined,\n  // values: null,\n  // ranges: null,\n\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  if (!model.empty && !model.values && !model.size) {\n    throw new TypeError('Cannot create vtkDataArray object without: size > 0, values');\n  }\n\n  if (!model.values) {\n    model.values = newTypedArray(model.dataType, model.size);\n  } else if (Array.isArray(model.values)) {\n    model.values = newTypedArrayFrom(model.dataType, model.values);\n  }\n\n  if (model.values) {\n    var _model$size;\n\n    // Takes the size if provided (can be lower than `model.values`) otherwise the actual length of `values`.\n    model.size = (_model$size = model.size) !== null && _model$size !== void 0 ? _model$size : model.values.length;\n    model.dataType = getDataType(model.values);\n  } // Object methods\n\n\n  obj(publicAPI, model);\n  set(publicAPI, model, ['name', 'numberOfComponents']); // Object specific methods\n\n  vtkDataArray(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkDataArray'); // ----------------------------------------------------------------------------\n\nvar vtkDataArray$1 = _objectSpread(_objectSpread({\n  newInstance: newInstance,\n  extend: extend\n}, STATIC), Constants);\n\nexport { STATIC, vtkDataArray$1 as default, extend, newInstance };\n"],
  "mappings": "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",
  "names": ["vtkErrorMacro", "newInstance"]
}
