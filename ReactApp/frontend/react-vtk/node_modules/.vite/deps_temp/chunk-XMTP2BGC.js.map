{
  "version": 3,
  "sources": ["../../@kitware/vtk.js/Rendering/OpenGL/Framebuffer.js"],
  "sourcesContent": ["import { newInstance as newInstance$1, obj, vtkErrorMacro, getArray } from '../../macros.js';\nimport vtkOpenGLTexture from './Texture.js';\nimport { VtkDataTypes } from '../../Common/Core/DataArray/Constants.js';\nimport { Filter } from './Texture/Constants.js';\n\n// vtkFramebuffer methods\n// ----------------------------------------------------------------------------\n\nfunction vtkFramebuffer(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkFramebuffer');\n\n  publicAPI.getBothMode = function () {\n    return model.context.FRAMEBUFFER;\n  }; // publicAPI.getDrawMode = () => model.context.DRAW_FRAMEBUFFER;\n  // publicAPI.getReadMode = () => model.context.READ_FRAMEBUFFER;\n\n\n  publicAPI.saveCurrentBindingsAndBuffers = function (modeIn) {\n    var mode = typeof modeIn !== 'undefined' ? modeIn : publicAPI.getBothMode();\n    publicAPI.saveCurrentBindings(mode);\n    publicAPI.saveCurrentBuffers(mode);\n  };\n\n  publicAPI.saveCurrentBindings = function (modeIn) {\n    if (!model.context) {\n      vtkErrorMacro('you must set the OpenGLRenderWindow before calling saveCurrentBindings');\n      return;\n    }\n\n    var gl = model.context;\n    model.previousDrawBinding = gl.getParameter(model.context.FRAMEBUFFER_BINDING);\n    model.previousActiveFramebuffer = model._openGLRenderWindow.getActiveFramebuffer();\n  };\n\n  publicAPI.saveCurrentBuffers = function (modeIn) {// noop on webgl 1\n  };\n\n  publicAPI.restorePreviousBindingsAndBuffers = function (modeIn) {\n    var mode = typeof modeIn !== 'undefined' ? modeIn : publicAPI.getBothMode();\n    publicAPI.restorePreviousBindings(mode);\n    publicAPI.restorePreviousBuffers(mode);\n  };\n\n  publicAPI.restorePreviousBindings = function (modeIn) {\n    if (!model.context) {\n      vtkErrorMacro('you must set the OpenGLRenderWindow before calling restorePreviousBindings');\n      return;\n    }\n\n    var gl = model.context;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, model.previousDrawBinding);\n\n    model._openGLRenderWindow.setActiveFramebuffer(model.previousActiveFramebuffer);\n  };\n\n  publicAPI.restorePreviousBuffers = function (modeIn) {// currently a noop on webgl1\n  };\n\n  publicAPI.bind = function () {\n    var modeArg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var mode = modeArg;\n\n    if (mode === null) {\n      mode = model.context.FRAMEBUFFER;\n    }\n\n    model.context.bindFramebuffer(mode, model.glFramebuffer);\n\n    for (var i = 0; i < model.colorBuffers.length; i++) {\n      model.colorBuffers[i].bind();\n    }\n\n    model._openGLRenderWindow.setActiveFramebuffer(publicAPI);\n  };\n\n  publicAPI.create = function (width, height) {\n    if (!model.context) {\n      vtkErrorMacro('you must set the OpenGLRenderWindow before calling create');\n      return;\n    }\n\n    model.glFramebuffer = model.context.createFramebuffer();\n    model.glFramebuffer.width = width;\n    model.glFramebuffer.height = height;\n  };\n\n  publicAPI.setColorBuffer = function (texture) {\n    var attachment = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var gl = model.context;\n\n    if (!gl) {\n      vtkErrorMacro('you must set the OpenGLRenderWindow before calling setColorBuffer');\n      return;\n    }\n\n    var glAttachment = gl.COLOR_ATTACHMENT0;\n\n    if (attachment > 0) {\n      if (model._openGLRenderWindow.getWebgl2()) {\n        glAttachment += attachment;\n      } else {\n        vtkErrorMacro('Using multiple framebuffer attachments requires WebGL 2');\n        return;\n      }\n    }\n\n    model.colorBuffers[attachment] = texture;\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, glAttachment, gl.TEXTURE_2D, texture.getHandle(), 0);\n  };\n\n  publicAPI.removeColorBuffer = function () {\n    var attachment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var gl = model.context;\n\n    if (!gl) {\n      vtkErrorMacro('you must set the OpenGLRenderWindow before calling removeColorBuffer');\n      return;\n    }\n\n    var glAttachment = gl.COLOR_ATTACHMENT0;\n\n    if (attachment > 0) {\n      if (model._openGLRenderWindow.getWebgl2()) {\n        glAttachment += attachment;\n      } else {\n        vtkErrorMacro('Using multiple framebuffer attachments requires WebGL 2');\n        return;\n      }\n    }\n\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, glAttachment, gl.TEXTURE_2D, null, 0);\n    model.colorBuffers = model.colorBuffers.splice(attachment, 1);\n  };\n\n  publicAPI.setDepthBuffer = function (texture) {\n    if (!model.context) {\n      vtkErrorMacro('you must set the OpenGLRenderWindow before calling setDepthBuffer');\n      return;\n    }\n\n    if (model._openGLRenderWindow.getWebgl2()) {\n      var gl = model.context;\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, texture.getHandle(), 0);\n    } else {\n      vtkErrorMacro('Attaching depth buffer textures to fbo requires WebGL 2');\n    }\n  };\n\n  publicAPI.removeDepthBuffer = function () {\n    if (!model.context) {\n      vtkErrorMacro('you must set the OpenGLRenderWindow before calling removeDepthBuffer');\n      return;\n    }\n\n    if (model._openGLRenderWindow.getWebgl2()) {\n      var gl = model.context;\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, null, 0);\n    } else {\n      vtkErrorMacro('Attaching depth buffer textures to framebuffers requires WebGL 2');\n    }\n  };\n\n  publicAPI.getGLFramebuffer = function () {\n    return model.glFramebuffer;\n  };\n\n  publicAPI.setOpenGLRenderWindow = function (rw) {\n    if (model._openGLRenderWindow === rw) {\n      return;\n    }\n\n    publicAPI.releaseGraphicsResources();\n    model._openGLRenderWindow = rw;\n    model.context = null;\n\n    if (rw) {\n      model.context = model._openGLRenderWindow.getContext();\n    }\n  };\n\n  publicAPI.releaseGraphicsResources = function () {\n    if (model.glFramebuffer) {\n      model.context.deleteFramebuffer(model.glFramebuffer);\n    }\n  };\n\n  publicAPI.getSize = function () {\n    var size = [0, 0];\n\n    if (model.glFramebuffer !== null) {\n      size[0] = model.glFramebuffer.width;\n      size[1] = model.glFramebuffer.height;\n    }\n\n    return size;\n  };\n\n  publicAPI.populateFramebuffer = function () {\n    if (!model.context) {\n      vtkErrorMacro('you must set the OpenGLRenderWindow before calling populateFrameBuffer');\n      return;\n    }\n\n    publicAPI.bind();\n    var gl = model.context;\n    var texture = vtkOpenGLTexture.newInstance();\n    texture.setOpenGLRenderWindow(model._openGLRenderWindow);\n    texture.setMinificationFilter(Filter.LINEAR);\n    texture.setMagnificationFilter(Filter.LINEAR);\n    texture.create2DFromRaw(model.glFramebuffer.width, model.glFramebuffer.height, 4, VtkDataTypes.UNSIGNED_CHAR, null);\n    publicAPI.setColorBuffer(texture); // for now do not count on having a depth buffer texture\n    // as they are not standard webgl 1\n\n    model.depthTexture = gl.createRenderbuffer();\n    gl.bindRenderbuffer(gl.RENDERBUFFER, model.depthTexture);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, model.glFramebuffer.width, model.glFramebuffer.height);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, model.depthTexture);\n  }; // For backwards compatibility. Use getColorBuffers()[0] going forward.\n\n\n  publicAPI.getColorTexture = function () {\n    return model.colorBuffers[0];\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  // _openGLRenderWindow: null,\n  glFramebuffer: null,\n  colorBuffers: null,\n  depthTexture: null,\n  previousDrawBinding: 0,\n  previousReadBinding: 0,\n  previousDrawBuffer: 0,\n  previousReadBuffer: 0,\n  previousActiveFramebuffer: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  obj(publicAPI, model);\n\n  if (model.colorBuffers) {\n    vtkErrorMacro('you cannot initialize colorBuffers through the constructor. You should call setColorBuffer() instead.');\n  }\n\n  model.colorBuffers = [];\n  getArray(publicAPI, model, ['colorBuffers']); // For more macro methods, see \"Sources/macros.js\"\n  // Object specific methods\n\n  vtkFramebuffer(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkFramebuffer'); // ----------------------------------------------------------------------------\n\nvar vtkOpenGLFramebuffer = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkOpenGLFramebuffer as default, extend, newInstance };\n"],
  "mappings": "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",
  "names": ["newInstance"]
}
