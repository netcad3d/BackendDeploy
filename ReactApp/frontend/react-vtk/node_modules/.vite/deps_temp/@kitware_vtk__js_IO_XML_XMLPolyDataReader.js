import {
  vtkXMLReader$1
} from "./chunk-BGBUIUI6.js";
import "./chunk-RUO4W2U5.js";
import "./chunk-PCBY7TQL.js";
import "./chunk-B5BVLPZX.js";
import "./chunk-2MWAGLL3.js";
import {
  vtkPolyData$1
} from "./chunk-XT2DETPC.js";
import "./chunk-Z2LVQNSU.js";
import "./chunk-Z5OKWKLG.js";
import "./chunk-SWDS6M4V.js";
import "./chunk-SXNZFZKA.js";
import "./chunk-FOWOP5PK.js";
import {
  macro
} from "./chunk-OTTIIP4A.js";
import "./chunk-HKWV5KNA.js";
import "./chunk-XL65WI7U.js";
import "./chunk-HUBM7RA2.js";

// node_modules/@kitware/vtk.js/IO/XML/XMLPolyDataReader.js
function handleArray(polydata, cellType, piece, compressor, byteOrder, headerType, binaryBuffer) {
  var size = Number(piece.getAttribute("NumberOf".concat(cellType)));
  if (size > 0) {
    var dataArrayElem = piece.getElementsByTagName(cellType)[0].getElementsByTagName("DataArray")[0];
    var _vtkXMLReader$process = vtkXMLReader$1.processDataArray(size, dataArrayElem, compressor, byteOrder, headerType, binaryBuffer), values = _vtkXMLReader$process.values, numberOfComponents = _vtkXMLReader$process.numberOfComponents;
    polydata["get".concat(cellType)]().setData(values, numberOfComponents);
  }
  return size;
}
function handleCells(polydata, cellType, piece, compressor, byteOrder, headerType, binaryBuffer) {
  var size = Number(piece.getAttribute("NumberOf".concat(cellType)));
  if (size > 0) {
    var values = vtkXMLReader$1.processCells(size, piece.getElementsByTagName(cellType)[0], compressor, byteOrder, headerType, binaryBuffer);
    polydata["get".concat(cellType)]().setData(values);
  }
  return size;
}
function vtkXMLPolyDataReader(publicAPI, model) {
  model.classHierarchy.push("vtkXMLPolyDataReader");
  publicAPI.parseXML = function(rootElem, type, compressor, byteOrder, headerType) {
    var datasetElem = rootElem.getElementsByTagName(model.dataType)[0];
    var pieces = datasetElem.getElementsByTagName("Piece");
    var nbPieces = pieces.length;
    var _loop = function _loop2(outputIndex2) {
      var polydata = vtkPolyData$1.newInstance();
      var piece = pieces[outputIndex2];
      var nbPoints = handleArray(polydata, "Points", piece, compressor, byteOrder, headerType, model.binaryBuffer);
      var nbCells = 0;
      ["Verts", "Lines", "Strips", "Polys"].forEach(function(cellType) {
        nbCells += handleCells(polydata, cellType, piece, compressor, byteOrder, headerType, model.binaryBuffer);
      });
      vtkXMLReader$1.processFieldData(nbPoints, piece.getElementsByTagName("PointData")[0], polydata.getPointData(), compressor, byteOrder, headerType, model.binaryBuffer);
      vtkXMLReader$1.processFieldData(nbCells, piece.getElementsByTagName("CellData")[0], polydata.getCellData(), compressor, byteOrder, headerType, model.binaryBuffer);
      model.output[outputIndex2] = polydata;
    };
    for (var outputIndex = 0; outputIndex < nbPieces; outputIndex++) {
      _loop(outputIndex);
    }
  };
}
var DEFAULT_VALUES = {
  dataType: "PolyData"
};
function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues);
  vtkXMLReader$1.extend(publicAPI, model, initialValues);
  vtkXMLPolyDataReader(publicAPI, model);
}
var newInstance = macro.newInstance(extend, "vtkXMLPolyDataReader");
var vtkXMLPolyDataReader$1 = {
  newInstance,
  extend
};

// dep:@kitware_vtk__js_IO_XML_XMLPolyDataReader
var kitware_vtk_js_IO_XML_XMLPolyDataReader_default = vtkXMLPolyDataReader$1;
export {
  kitware_vtk_js_IO_XML_XMLPolyDataReader_default as default,
  extend,
  newInstance
};
//# sourceMappingURL=@kitware_vtk__js_IO_XML_XMLPolyDataReader.js.map
