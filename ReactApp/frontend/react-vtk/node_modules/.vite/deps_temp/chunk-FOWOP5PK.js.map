{
  "version": 3,
  "sources": ["../../seedrandom/lib/alea.js", "../../seedrandom/lib/xor128.js", "../../seedrandom/lib/xorwow.js", "../../seedrandom/lib/xorshift7.js", "../../seedrandom/lib/xor4096.js", "../../seedrandom/lib/tychei.js", "browser-external:crypto", "../../seedrandom/seedrandom.js", "../../seedrandom/index.js", "../../@kitware/vtk.js/Common/Core/Math/index.js"],
  "sourcesContent": ["// A port of an algorithm by Johannes Baag\u00F8e <baagoe@baagoe.com>, 2010\n// http://baagoe.com/en/RandomMusings/javascript/\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\n// Original work is under MIT license -\n\n// Copyright (C) 2010 by Johannes Baag\u00F8e <baagoe@baagoe.org>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\n\n(function(global, module, define) {\n\nfunction Alea(seed) {\n  var me = this, mash = Mash();\n\n  me.next = function() {\n    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32\n    me.s0 = me.s1;\n    me.s1 = me.s2;\n    return me.s2 = t - (me.c = t | 0);\n  };\n\n  // Apply the seeding algorithm from Baagoe.\n  me.c = 1;\n  me.s0 = mash(' ');\n  me.s1 = mash(' ');\n  me.s2 = mash(' ');\n  me.s0 -= mash(seed);\n  if (me.s0 < 0) { me.s0 += 1; }\n  me.s1 -= mash(seed);\n  if (me.s1 < 0) { me.s1 += 1; }\n  me.s2 -= mash(seed);\n  if (me.s2 < 0) { me.s2 += 1; }\n  mash = null;\n}\n\nfunction copy(f, t) {\n  t.c = f.c;\n  t.s0 = f.s0;\n  t.s1 = f.s1;\n  t.s2 = f.s2;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new Alea(seed),\n      state = opts && opts.state,\n      prng = xg.next;\n  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }\n  prng.double = function() {\n    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n  };\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nfunction Mash() {\n  var n = 0xefc8249d;\n\n  var mash = function(data) {\n    data = String(data);\n    for (var i = 0; i < data.length; i++) {\n      n += data.charCodeAt(i);\n      var h = 0.02519603282416938 * n;\n      n = h >>> 0;\n      h -= n;\n      h *= n;\n      n = h >>> 0;\n      h -= n;\n      n += h * 0x100000000; // 2^32\n    }\n    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n  };\n\n  return mash;\n}\n\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.alea = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n", "// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n\n  // Set up generator function.\n  me.next = function() {\n    var t = me.x ^ (me.x << 11);\n    me.x = me.y;\n    me.y = me.z;\n    me.z = me.w;\n    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);\n  };\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor128 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n", "// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var t = (me.x ^ (me.x >>> 2));\n    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;\n    return (me.d = (me.d + 362437 | 0)) +\n       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;\n  };\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n  me.v = 0;\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    if (k == strseed.length) {\n      me.d = me.x << 10 ^ me.x >>> 4;\n    }\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  t.v = f.v;\n  t.d = f.d;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorwow = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n", "// A Javascript implementaion of the \"xorshift7\" algorithm by\n// Fran\u00E7ois Panneton and Pierre L'ecuyer:\n// \"On the Xorgshift Random Number Generators\"\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    // Update xor generator.\n    var X = me.x, i = me.i, t, v, w;\n    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);\n    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);\n    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);\n    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);\n    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);\n    X[i] = v;\n    me.i = (i + 1) & 7;\n    return v;\n  };\n\n  function init(me, seed) {\n    var j, w, X = [];\n\n    if (seed === (seed | 0)) {\n      // Seed state array using a 32-bit integer.\n      w = X[0] = seed;\n    } else {\n      // Seed state using a string.\n      seed = '' + seed;\n      for (j = 0; j < seed.length; ++j) {\n        X[j & 7] = (X[j & 7] << 15) ^\n            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);\n      }\n    }\n    // Enforce an array length of 8, not all zeroes.\n    while (X.length < 8) X.push(0);\n    for (j = 0; j < 8 && X[j] === 0; ++j);\n    if (j == 8) w = X[7] = -1; else w = X[j];\n\n    me.x = X;\n    me.i = 0;\n\n    // Discard an initial 256 values.\n    for (j = 256; j > 0; --j) {\n      me.next();\n    }\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.x = f.x.slice();\n  t.i = f.i;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.x) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorshift7 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n", "// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    var w = me.w,\n        X = me.X, i = me.i, t, v;\n    // Update Weyl generator.\n    me.w = w = (w + 0x61c88647) | 0;\n    // Update xor generator.\n    v = X[(i + 34) & 127];\n    t = X[i = ((i + 1) & 127)];\n    v ^= v << 13;\n    t ^= t << 17;\n    v ^= v >>> 15;\n    t ^= t >>> 12;\n    // Update Xor generator array state.\n    v = X[i] = v ^ t;\n    me.i = i;\n    // Result is the combination.\n    return (v + (w ^ (w >>> 16))) | 0;\n  };\n\n  function init(me, seed) {\n    var t, v, i, j, w, X = [], limit = 128;\n    if (seed === (seed | 0)) {\n      // Numeric seeds initialize v, which is used to generates X.\n      v = seed;\n      seed = null;\n    } else {\n      // String seeds are mixed into v and X one character at a time.\n      seed = seed + '\\0';\n      v = 0;\n      limit = Math.max(limit, seed.length);\n    }\n    // Initialize circular array and weyl value.\n    for (i = 0, j = -32; j < limit; ++j) {\n      // Put the unicode characters into the array, and shuffle them.\n      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);\n      // After 32 shuffles, take v as the starting w value.\n      if (j === 0) w = v;\n      v ^= v << 10;\n      v ^= v >>> 15;\n      v ^= v << 4;\n      v ^= v >>> 13;\n      if (j >= 0) {\n        w = (w + 0x61c88647) | 0;     // Weyl.\n        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.\n        i = (0 == t) ? i + 1 : 0;     // Count zeroes.\n      }\n    }\n    // We have detected all zeroes; make the key nonzero.\n    if (i >= 128) {\n      X[(seed && seed.length || 0) & 127] = -1;\n    }\n    // Run the generator 512 times to further mix the state before using it.\n    // Factoring this as a function slows the main generator, so it is just\n    // unrolled here.  The weyl generator is not advanced while warming up.\n    i = 127;\n    for (j = 4 * 128; j > 0; --j) {\n      v = X[(i + 34) & 127];\n      t = X[i = ((i + 1) & 127)];\n      v ^= v << 13;\n      t ^= t << 17;\n      v ^= v >>> 15;\n      t ^= t >>> 12;\n      X[i] = v ^ t;\n    }\n    // Storing state as object members is faster than using closure variables.\n    me.w = w;\n    me.X = X;\n    me.i = i;\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.i = f.i;\n  t.w = f.w;\n  t.X = f.X.slice();\n  return t;\n};\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.X) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor4096 = impl;\n}\n\n})(\n  this,                                     // window object or global\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n", "// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var b = me.b, c = me.c, d = me.d, a = me.a;\n    b = (b << 25) ^ (b >>> 7) ^ c;\n    c = (c - d) | 0;\n    d = (d << 24) ^ (d >>> 8) ^ a;\n    a = (a - b) | 0;\n    me.b = b = (b << 20) ^ (b >>> 12) ^ c;\n    me.c = c = (c - d) | 0;\n    me.d = (d << 16) ^ (c >>> 16) ^ a;\n    return me.a = (a - b) | 0;\n  };\n\n  /* The following is non-inverted tyche, which has better internal\n   * bit diffusion, but which is about 25% slower than tyche-i in JS.\n  me.next = function() {\n    var a = me.a, b = me.b, c = me.c, d = me.d;\n    a = (me.a + me.b | 0) >>> 0;\n    d = me.d ^ a; d = d << 16 ^ d >>> 16;\n    c = me.c + d | 0;\n    b = me.b ^ c; b = b << 12 ^ d >>> 20;\n    me.a = a = a + b | 0;\n    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\n    me.c = c = c + d | 0;\n    b = b ^ c;\n    return me.b = (b << 7 ^ b >>> 25);\n  }\n  */\n\n  me.a = 0;\n  me.b = 0;\n  me.c = 2654435769 | 0;\n  me.d = 1367130551;\n\n  if (seed === Math.floor(seed)) {\n    // Integer seed.\n    me.a = (seed / 0x100000000) | 0;\n    me.b = seed | 0;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 20; k++) {\n    me.b ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.a = f.a;\n  t.b = f.b;\n  t.c = f.c;\n  t.d = f.d;\n  return t;\n};\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.tychei = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      throw new Error(`Module \"crypto\" has been externalized for browser compatibility. Cannot access \"crypto.${key}\" in client code.`)\n    }\n  }\n}))", "/*\nCopyright 2019 David Bau.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n(function (global, pool, math) {\n//\n// The following constants are related to IEEE 754 limits.\n//\n\nvar width = 256,        // each RC4 output is 0 <= x < 256\n    chunks = 6,         // at least six RC4 outputs for each double\n    digits = 52,        // there are 52 significant digits in a double\n    rngname = 'random', // rngname: name for Math.random and Math.seedrandom\n    startdenom = math.pow(width, chunks),\n    significance = math.pow(2, digits),\n    overflow = significance * 2,\n    mask = width - 1,\n    nodecrypto;         // node.js crypto module, initialized at the bottom.\n\n//\n// seedrandom()\n// This is the seedrandom function described above.\n//\nfunction seedrandom(seed, options, callback) {\n  var key = [];\n  options = (options == true) ? { entropy: true } : (options || {});\n\n  // Flatten the seed string or build one from local entropy if needed.\n  var shortseed = mixkey(flatten(\n    options.entropy ? [seed, tostring(pool)] :\n    (seed == null) ? autoseed() : seed, 3), key);\n\n  // Use the seed to initialize an ARC4 generator.\n  var arc4 = new ARC4(key);\n\n  // This function returns a random double in [0, 1) that contains\n  // randomness in every bit of the mantissa of the IEEE 754 value.\n  var prng = function() {\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\n        x = 0;                          //   and no 'extra last byte'.\n    while (n < significance) {          // Fill up all significant digits by\n      n = (n + x) * width;              //   shifting numerator and\n      d *= width;                       //   denominator and generating a\n      x = arc4.g(1);                    //   new least-significant-byte.\n    }\n    while (n >= overflow) {             // To avoid rounding up, before adding\n      n /= 2;                           //   last byte, shift everything\n      d /= 2;                           //   right using integer math until\n      x >>>= 1;                         //   we have exactly the desired bits.\n    }\n    return (n + x) / d;                 // Form the number within [0, 1).\n  };\n\n  prng.int32 = function() { return arc4.g(4) | 0; }\n  prng.quick = function() { return arc4.g(4) / 0x100000000; }\n  prng.double = prng;\n\n  // Mix the randomness into accumulated entropy.\n  mixkey(tostring(arc4.S), pool);\n\n  // Calling convention: what to return as a function of prng, seed, is_math.\n  return (options.pass || callback ||\n      function(prng, seed, is_math_call, state) {\n        if (state) {\n          // Load the arc4 state from the given state if it has an S array.\n          if (state.S) { copy(state, arc4); }\n          // Only provide the .state method if requested via options.state.\n          prng.state = function() { return copy(arc4, {}); }\n        }\n\n        // If called as a method of Math (Math.seedrandom()), mutate\n        // Math.random because that is how seedrandom.js has worked since v1.0.\n        if (is_math_call) { math[rngname] = prng; return seed; }\n\n        // Otherwise, it is a newer calling convention, so return the\n        // prng directly.\n        else return prng;\n      })(\n  prng,\n  shortseed,\n  'global' in options ? options.global : (this == math),\n  options.state);\n}\n\n//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\nfunction ARC4(key) {\n  var t, keylen = key.length,\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\n\n  // The empty key [] is treated as [0].\n  if (!keylen) { key = [keylen++]; }\n\n  // Set up S using the standard key scheduling algorithm.\n  while (i < width) {\n    s[i] = i++;\n  }\n  for (i = 0; i < width; i++) {\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\n    s[j] = t;\n  }\n\n  // The \"g\" method returns the next (count) outputs as one number.\n  (me.g = function(count) {\n    // Using instance members instead of closure state nearly doubles speed.\n    var t, r = 0,\n        i = me.i, j = me.j, s = me.S;\n    while (count--) {\n      t = s[i = mask & (i + 1)];\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\n    }\n    me.i = i; me.j = j;\n    return r;\n    // For robust unpredictability, the function call below automatically\n    // discards an initial batch of values.  This is called RC4-drop[256].\n    // See http://google.com/search?q=rsa+fluhrer+response&btnI\n  })(width);\n}\n\n//\n// copy()\n// Copies internal state of ARC4 to or from a plain object.\n//\nfunction copy(f, t) {\n  t.i = f.i;\n  t.j = f.j;\n  t.S = f.S.slice();\n  return t;\n};\n\n//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\nfunction flatten(obj, depth) {\n  var result = [], typ = (typeof obj), prop;\n  if (depth && typ == 'object') {\n    for (prop in obj) {\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\n    }\n  }\n  return (result.length ? result : typ == 'string' ? obj : obj + '\\0');\n}\n\n//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\nfunction mixkey(seed, key) {\n  var stringseed = seed + '', smear, j = 0;\n  while (j < stringseed.length) {\n    key[mask & j] =\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\n  }\n  return tostring(key);\n}\n\n//\n// autoseed()\n// Returns an object for autoseeding, using window.crypto and Node crypto\n// module if available.\n//\nfunction autoseed() {\n  try {\n    var out;\n    if (nodecrypto && (out = nodecrypto.randomBytes)) {\n      // The use of 'out' to remember randomBytes makes tight minified code.\n      out = out(width);\n    } else {\n      out = new Uint8Array(width);\n      (global.crypto || global.msCrypto).getRandomValues(out);\n    }\n    return tostring(out);\n  } catch (e) {\n    var browser = global.navigator,\n        plugins = browser && browser.plugins;\n    return [+new Date, global, plugins, global.screen, tostring(pool)];\n  }\n}\n\n//\n// tostring()\n// Converts an array of charcodes to a string\n//\nfunction tostring(a) {\n  return String.fromCharCode.apply(0, a);\n}\n\n//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to interfere with deterministic PRNG state later,\n// seedrandom will not call math.random on its own again after\n// initialization.\n//\nmixkey(math.random(), pool);\n\n//\n// Nodejs and AMD support: export the implementation as a module using\n// either convention.\n//\nif ((typeof module) == 'object' && module.exports) {\n  module.exports = seedrandom;\n  // When in node.js, try using crypto package for autoseeding.\n  try {\n    nodecrypto = require('crypto');\n  } catch (ex) {}\n} else if ((typeof define) == 'function' && define.amd) {\n  define(function() { return seedrandom; });\n} else {\n  // When included as a plain script, set up Math.seedrandom global.\n  math['seed' + rngname] = seedrandom;\n}\n\n\n// End anonymous scope, and pass initial values.\n})(\n  // global: `self` in browsers (including strict mode and web workers),\n  // otherwise `this` in Node and other environments\n  (typeof self !== 'undefined') ? self : this,\n  [],     // pool: entropy pool starts empty\n  Math    // math: package containing random, pow, and seedrandom\n);\n", "// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n\n// alea, a 53-bit multiply-with-carry generator by Johannes Baag\u00F8e.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\nvar alea = require('./lib/alea');\n\n// xor128, a pure xor-shift generator by George Marsaglia.\n// Period: 2^128-1.\n// Reported to fail: MatrixRank and LinearComp.\nvar xor128 = require('./lib/xor128');\n\n// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\n// Period: 2^192-2^32\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\nvar xorwow = require('./lib/xorwow');\n\n// xorshift7, by Fran\u00E7ois Panneton and Pierre L'ecuyer, takes\n// a different approach: it adds robustness by allowing more shifts\n// than Marsaglia's original three.  It is a 7-shift generator\n// with 256 bits, that passes BigCrush with no systmatic failures.\n// Period 2^256-1.\n// No systematic BigCrush failures reported.\nvar xorshift7 = require('./lib/xorshift7');\n\n// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\n// very long period that also adds a Weyl generator. It also passes\n// BigCrush with no systematic failures.  Its long period may\n// be useful if you have many generators and need to avoid\n// collisions.\n// Period: 2^4128-2^32.\n// No systematic BigCrush failures reported.\nvar xor4096 = require('./lib/xor4096');\n\n// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\n// number generator derived from ChaCha, a modern stream cipher.\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n// Period: ~2^127\n// No systematic BigCrush failures reported.\nvar tychei = require('./lib/tychei');\n\n// The original ARC4-based prng included in this library.\n// Period: ~2^1600\nvar sr = require('./seedrandom');\n\nsr.alea = alea;\nsr.xor128 = xor128;\nsr.xorwow = xorwow;\nsr.xorshift7 = xorshift7;\nsr.xor4096 = xor4096;\nsr.tychei = tychei;\n\nmodule.exports = sr;\n", "import _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport seedrandom from 'seedrandom';\nimport macro from '../../../macros.js';\n\nvar vtkErrorMacro = macro.vtkErrorMacro,\n    vtkWarningMacro = macro.vtkWarningMacro; // ----------------------------------------------------------------------------\n\n/* eslint-disable camelcase                                                  */\n\n/* eslint-disable no-cond-assign                                             */\n\n/* eslint-disable no-bitwise                                                 */\n\n/* eslint-disable no-multi-assign                                            */\n// ----------------------------------------------------------------------------\n\nvar randomSeedValue = 0;\nvar VTK_MAX_ROTATIONS = 20;\nvar VTK_SMALL_NUMBER = 1.0e-12;\n\nfunction notImplemented(method) {\n  return function () {\n    return vtkErrorMacro(\"vtkMath::\".concat(method, \" - NOT IMPLEMENTED\"));\n  };\n} // Swap rows for n by n matrix\n\n\nfunction swapRowsMatrix_nxn(matrix, n, row1, row2) {\n  var tmp;\n\n  for (var i = 0; i < n; i++) {\n    tmp = matrix[row1 * n + i];\n    matrix[row1 * n + i] = matrix[row2 * n + i];\n    matrix[row2 * n + i] = tmp;\n  }\n} // Swap columns for n by n matrix\n\n\nfunction swapColumnsMatrix_nxn(matrix, n, column1, column2) {\n  var tmp;\n\n  for (var i = 0; i < n; i++) {\n    tmp = matrix[i * n + column1];\n    matrix[i * n + column1] = matrix[i * n + column2];\n    matrix[i * n + column2] = tmp;\n  }\n} // ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\n\nfunction createArray() {\n  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;\n  // faster than Array.from and/or while loop\n  return Array(size).fill(0);\n}\nvar Pi = function Pi() {\n  return Math.PI;\n};\nfunction radiansFromDegrees(deg) {\n  return deg / 180 * Math.PI;\n}\nfunction degreesFromRadians(rad) {\n  return rad * 180 / Math.PI;\n}\nvar round = Math.round,\n    floor = Math.floor,\n    ceil = Math.ceil,\n    min = Math.min,\n    max = Math.max;\nfunction arrayMin(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var minValue = Infinity;\n\n  for (var i = offset, len = arr.length; i < len; i += stride) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n    }\n  }\n\n  return minValue;\n}\nfunction arrayMax(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var maxValue = -Infinity;\n\n  for (var i = offset, len = arr.length; i < len; i += stride) {\n    if (maxValue < arr[i]) {\n      maxValue = arr[i];\n    }\n  }\n\n  return maxValue;\n}\nfunction arrayRange(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var minValue = Infinity;\n  var maxValue = -Infinity;\n\n  for (var i = offset, len = arr.length; i < len; i += stride) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n    }\n\n    if (maxValue < arr[i]) {\n      maxValue = arr[i];\n    }\n  }\n\n  return [minValue, maxValue];\n}\nvar ceilLog2 = notImplemented('ceilLog2');\nvar factorial = notImplemented('factorial');\nfunction nearestPowerOfTwo(xi) {\n  var v = 1;\n\n  while (v < xi) {\n    v *= 2;\n  }\n\n  return v;\n}\nfunction isPowerOfTwo(x) {\n  return x === nearestPowerOfTwo(x);\n}\nfunction binomial(m, n) {\n  var r = 1;\n\n  for (var i = 1; i <= n; ++i) {\n    r *= (m - i + 1) / i;\n  }\n\n  return Math.floor(r);\n}\nfunction beginCombination(m, n) {\n  if (m < n) {\n    return 0;\n  }\n\n  var r = createArray(n);\n\n  for (var i = 0; i < n; ++i) {\n    r[i] = i;\n  }\n\n  return r;\n}\nfunction nextCombination(m, n, r) {\n  var status = 0;\n\n  for (var i = n - 1; i >= 0; --i) {\n    if (r[i] < m - n + i) {\n      var j = r[i] + 1;\n\n      while (i < n) {\n        r[i++] = j++;\n      }\n\n      status = 1;\n      break;\n    }\n  }\n\n  return status;\n}\nfunction randomSeed(seed) {\n  seedrandom(\"\".concat(seed), {\n    global: true\n  });\n  randomSeedValue = seed;\n}\nfunction getSeed() {\n  return randomSeedValue;\n}\nfunction random() {\n  var minValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var maxValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var delta = maxValue - minValue;\n  return minValue + delta * Math.random();\n}\nvar gaussian = notImplemented('gaussian'); // Vect3 operations\n\nfunction add(a, b, out) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\nfunction subtract(a, b, out) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\nfunction multiplyScalar(vec, scalar) {\n  vec[0] *= scalar;\n  vec[1] *= scalar;\n  vec[2] *= scalar;\n  return vec;\n}\nfunction multiplyScalar2D(vec, scalar) {\n  vec[0] *= scalar;\n  vec[1] *= scalar;\n  return vec;\n}\nfunction multiplyAccumulate(a, b, scalar, out) {\n  out[0] = a[0] + b[0] * scalar;\n  out[1] = a[1] + b[1] * scalar;\n  out[2] = a[2] + b[2] * scalar;\n  return out;\n}\nfunction multiplyAccumulate2D(a, b, scalar, out) {\n  out[0] = a[0] + b[0] * scalar;\n  out[1] = a[1] + b[1] * scalar;\n  return out;\n}\nfunction dot(x, y) {\n  return x[0] * y[0] + x[1] * y[1] + x[2] * y[2];\n}\nfunction outer(x, y, out_3x3) {\n  out_3x3[0] = x[0] * y[0];\n  out_3x3[1] = x[0] * y[1];\n  out_3x3[2] = x[0] * y[2];\n  out_3x3[3] = x[1] * y[0];\n  out_3x3[4] = x[1] * y[1];\n  out_3x3[5] = x[1] * y[2];\n  out_3x3[6] = x[2] * y[0];\n  out_3x3[7] = x[2] * y[1];\n  out_3x3[8] = x[2] * y[2];\n}\nfunction cross(x, y, out) {\n  var Zx = x[1] * y[2] - x[2] * y[1];\n  var Zy = x[2] * y[0] - x[0] * y[2];\n  var Zz = x[0] * y[1] - x[1] * y[0];\n  out[0] = Zx;\n  out[1] = Zy;\n  out[2] = Zz;\n  return out;\n}\nfunction norm(x) {\n  var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n\n  switch (n) {\n    case 1:\n      return Math.abs(x);\n\n    case 2:\n      return Math.sqrt(x[0] * x[0] + x[1] * x[1]);\n\n    case 3:\n      return Math.sqrt(x[0] * x[0] + x[1] * x[1] + x[2] * x[2]);\n\n    default:\n      {\n        var sum = 0;\n\n        for (var i = 0; i < n; i++) {\n          sum += x[i] * x[i];\n        }\n\n        return Math.sqrt(sum);\n      }\n  }\n}\nfunction normalize(x) {\n  var den = norm(x);\n\n  if (den !== 0.0) {\n    x[0] /= den;\n    x[1] /= den;\n    x[2] /= den;\n  }\n\n  return den;\n}\nfunction perpendiculars(x, y, z, theta) {\n  var x2 = x[0] * x[0];\n  var y2 = x[1] * x[1];\n  var z2 = x[2] * x[2];\n  var r = Math.sqrt(x2 + y2 + z2);\n  var dx;\n  var dy;\n  var dz; // transpose the vector to avoid divide-by-zero error\n\n  if (x2 > y2 && x2 > z2) {\n    dx = 0;\n    dy = 1;\n    dz = 2;\n  } else if (y2 > z2) {\n    dx = 1;\n    dy = 2;\n    dz = 0;\n  } else {\n    dx = 2;\n    dy = 0;\n    dz = 1;\n  }\n\n  var a = x[dx] / r;\n  var b = x[dy] / r;\n  var c = x[dz] / r;\n  var tmp = Math.sqrt(a * a + c * c);\n\n  if (theta !== 0) {\n    var sintheta = Math.sin(theta);\n    var costheta = Math.cos(theta);\n\n    if (y) {\n      y[dx] = (c * costheta - a * b * sintheta) / tmp;\n      y[dy] = sintheta * tmp;\n      y[dz] = (-(a * costheta) - b * c * sintheta) / tmp;\n    }\n\n    if (z) {\n      z[dx] = (-(c * sintheta) - a * b * costheta) / tmp;\n      z[dy] = costheta * tmp;\n      z[dz] = (a * sintheta - b * c * costheta) / tmp;\n    }\n  } else {\n    if (y) {\n      y[dx] = c / tmp;\n      y[dy] = 0;\n      y[dz] = -a / tmp;\n    }\n\n    if (z) {\n      z[dx] = -a * b / tmp;\n      z[dy] = tmp;\n      z[dz] = -b * c / tmp;\n    }\n  }\n}\nfunction projectVector(a, b, projection) {\n  var bSquared = dot(b, b);\n\n  if (bSquared === 0) {\n    projection[0] = 0;\n    projection[1] = 0;\n    projection[2] = 0;\n    return false;\n  }\n\n  var scale = dot(a, b) / bSquared;\n\n  for (var i = 0; i < 3; i++) {\n    projection[i] = b[i];\n  }\n\n  multiplyScalar(projection, scale);\n  return true;\n}\nfunction dot2D(x, y) {\n  return x[0] * y[0] + x[1] * y[1];\n}\nfunction projectVector2D(a, b, projection) {\n  var bSquared = dot2D(b, b);\n\n  if (bSquared === 0) {\n    projection[0] = 0;\n    projection[1] = 0;\n    return false;\n  }\n\n  var scale = dot2D(a, b) / bSquared;\n\n  for (var i = 0; i < 2; i++) {\n    projection[i] = b[i];\n  }\n\n  multiplyScalar2D(projection, scale);\n  return true;\n}\nfunction distance2BetweenPoints(x, y) {\n  return (x[0] - y[0]) * (x[0] - y[0]) + (x[1] - y[1]) * (x[1] - y[1]) + (x[2] - y[2]) * (x[2] - y[2]);\n}\nfunction angleBetweenVectors(v1, v2) {\n  var crossVect = [0, 0, 0];\n  cross(v1, v2, crossVect);\n  return Math.atan2(norm(crossVect), dot(v1, v2));\n}\nfunction signedAngleBetweenVectors(v1, v2, vN) {\n  var crossVect = [0, 0, 0];\n  cross(v1, v2, crossVect);\n  var angle = Math.atan2(norm(crossVect), dot(v1, v2));\n  return dot(crossVect, vN) >= 0 ? angle : -angle;\n}\nfunction gaussianAmplitude(mean, variance, position) {\n  var distanceFromMean = Math.abs(mean - position);\n  return 1 / Math.sqrt(2 * Math.PI * variance) * Math.exp(-Math.pow(distanceFromMean, 2) / (2 * variance));\n}\nfunction gaussianWeight(mean, variance, position) {\n  var distanceFromMean = Math.abs(mean - position);\n  return Math.exp(-Math.pow(distanceFromMean, 2) / (2 * variance));\n}\nfunction outer2D(x, y, out_2x2) {\n  out_2x2[0] = x[0] * y[0];\n  out_2x2[1] = x[0] * y[1];\n  out_2x2[2] = x[1] * y[0];\n  out_2x2[3] = x[1] * y[1];\n}\nfunction norm2D(x2D) {\n  return Math.sqrt(x2D[0] * x2D[0] + x2D[1] * x2D[1]);\n}\nfunction normalize2D(x) {\n  var den = norm2D(x);\n\n  if (den !== 0.0) {\n    x[0] /= den;\n    x[1] /= den;\n  }\n\n  return den;\n}\nfunction rowsToMat4(row0, row1, row2, row3, mat) {\n  for (var i = 0; i < 4; i++) {\n    mat[i] = row0[i];\n    mat[4 + i] = row1[i];\n    mat[8 + i] = row2[i];\n    mat[12 + i] = row3[i];\n  }\n\n  return mat;\n}\nfunction columnsToMat4(column0, column1, column2, column3, mat) {\n  for (var i = 0; i < 4; i++) {\n    mat[4 * i] = column0[i];\n    mat[4 * i + 1] = column1[i];\n    mat[4 * i + 2] = column2[i];\n    mat[4 * i + 3] = column3[i];\n  }\n\n  return mat;\n}\nfunction rowsToMat3(row0, row1, row2, mat) {\n  for (var i = 0; i < 3; i++) {\n    mat[i] = row0[i];\n    mat[3 + i] = row1[i];\n    mat[6 + i] = row2[i];\n  }\n\n  return mat;\n}\nfunction columnsToMat3(column0, column1, column2, mat) {\n  for (var i = 0; i < 3; i++) {\n    mat[3 * i] = column0[i];\n    mat[3 * i + 1] = column1[i];\n    mat[3 * i + 2] = column2[i];\n  }\n\n  return mat;\n}\nfunction determinant2x2() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  if (args.length === 2) {\n    return args[0][0] * args[1][1] - args[1][0] * args[0][1];\n  }\n\n  if (args.length === 4) {\n    return args[0] * args[3] - args[1] * args[2];\n  }\n\n  return Number.NaN;\n}\nfunction LUFactor3x3(mat_3x3, index_3) {\n  var maxI;\n  var tmp;\n  var largest;\n  var scale = [0, 0, 0]; // Loop over rows to get implicit scaling information\n\n  for (var i = 0; i < 3; i++) {\n    largest = Math.abs(mat_3x3[i * 3]);\n\n    if ((tmp = Math.abs(mat_3x3[i * 3 + 1])) > largest) {\n      largest = tmp;\n    }\n\n    if ((tmp = Math.abs(mat_3x3[i * 3 + 2])) > largest) {\n      largest = tmp;\n    }\n\n    scale[i] = 1 / largest;\n  } // Loop over all columns using Crout's method\n  // first column\n\n\n  largest = scale[0] * Math.abs(mat_3x3[0]);\n  maxI = 0;\n\n  if ((tmp = scale[1] * Math.abs(mat_3x3[3])) >= largest) {\n    largest = tmp;\n    maxI = 1;\n  }\n\n  if ((tmp = scale[2] * Math.abs(mat_3x3[6])) >= largest) {\n    maxI = 2;\n  }\n\n  if (maxI !== 0) {\n    swapRowsMatrix_nxn(mat_3x3, 3, maxI, 0);\n    scale[maxI] = scale[0];\n  }\n\n  index_3[0] = maxI;\n  mat_3x3[3] /= mat_3x3[0];\n  mat_3x3[6] /= mat_3x3[0]; // second column\n\n  mat_3x3[4] -= mat_3x3[3] * mat_3x3[1];\n  mat_3x3[7] -= mat_3x3[6] * mat_3x3[1];\n  largest = scale[1] * Math.abs(mat_3x3[4]);\n  maxI = 1;\n\n  if ((tmp = scale[2] * Math.abs(mat_3x3[7])) >= largest) {\n    maxI = 2;\n    swapRowsMatrix_nxn(mat_3x3, 3, 1, 2);\n    scale[2] = scale[1];\n  }\n\n  index_3[1] = maxI;\n  mat_3x3[7] /= mat_3x3[4]; // third column\n\n  mat_3x3[5] -= mat_3x3[3] * mat_3x3[2];\n  mat_3x3[8] -= mat_3x3[6] * mat_3x3[2] + mat_3x3[7] * mat_3x3[5];\n  index_3[2] = 2;\n}\nfunction LUSolve3x3(mat_3x3, index_3, x_3) {\n  // forward substitution\n  var sum = x_3[index_3[0]];\n  x_3[index_3[0]] = x_3[0];\n  x_3[0] = sum;\n  sum = x_3[index_3[1]];\n  x_3[index_3[1]] = x_3[1];\n  x_3[1] = sum - mat_3x3[3] * x_3[0];\n  sum = x_3[index_3[2]];\n  x_3[index_3[2]] = x_3[2];\n  x_3[2] = sum - mat_3x3[6] * x_3[0] - mat_3x3[7] * x_3[1]; // back substitution\n\n  x_3[2] /= mat_3x3[8];\n  x_3[1] = (x_3[1] - mat_3x3[5] * x_3[2]) / mat_3x3[4];\n  x_3[0] = (x_3[0] - mat_3x3[1] * x_3[1] - mat_3x3[2] * x_3[2]) / mat_3x3[0];\n}\nfunction linearSolve3x3(mat_3x3, x_3, y_3) {\n  var a1 = mat_3x3[0];\n  var b1 = mat_3x3[1];\n  var c1 = mat_3x3[2];\n  var a2 = mat_3x3[3];\n  var b2 = mat_3x3[4];\n  var c2 = mat_3x3[5];\n  var a3 = mat_3x3[6];\n  var b3 = mat_3x3[7];\n  var c3 = mat_3x3[8]; // Compute the adjoint\n\n  var d1 = +determinant2x2(b2, b3, c2, c3);\n  var d2 = -determinant2x2(a2, a3, c2, c3);\n  var d3 = +determinant2x2(a2, a3, b2, b3);\n  var e1 = -determinant2x2(b1, b3, c1, c3);\n  var e2 = +determinant2x2(a1, a3, c1, c3);\n  var e3 = -determinant2x2(a1, a3, b1, b3);\n  var f1 = +determinant2x2(b1, b2, c1, c2);\n  var f2 = -determinant2x2(a1, a2, c1, c2);\n  var f3 = +determinant2x2(a1, a2, b1, b2); // Compute the determinant\n\n  var det = a1 * d1 + b1 * d2 + c1 * d3; // Multiply by the adjoint\n\n  var v1 = d1 * x_3[0] + e1 * x_3[1] + f1 * x_3[2];\n  var v2 = d2 * x_3[0] + e2 * x_3[1] + f2 * x_3[2];\n  var v3 = d3 * x_3[0] + e3 * x_3[1] + f3 * x_3[2]; // Divide by the determinant\n\n  y_3[0] = v1 / det;\n  y_3[1] = v2 / det;\n  y_3[2] = v3 / det;\n}\nfunction multiply3x3_vect3(mat_3x3, in_3, out_3) {\n  var x = mat_3x3[0] * in_3[0] + mat_3x3[1] * in_3[1] + mat_3x3[2] * in_3[2];\n  var y = mat_3x3[3] * in_3[0] + mat_3x3[4] * in_3[1] + mat_3x3[5] * in_3[2];\n  var z = mat_3x3[6] * in_3[0] + mat_3x3[7] * in_3[1] + mat_3x3[8] * in_3[2];\n  out_3[0] = x;\n  out_3[1] = y;\n  out_3[2] = z;\n}\nfunction multiply3x3_mat3(a_3x3, b_3x3, out_3x3) {\n  var copyA = _toConsumableArray(a_3x3);\n\n  var copyB = _toConsumableArray(b_3x3);\n\n  for (var i = 0; i < 3; i++) {\n    out_3x3[i] = copyA[0] * copyB[i] + copyA[1] * copyB[i + 3] + copyA[2] * copyB[i + 6];\n    out_3x3[i + 3] = copyA[3] * copyB[i] + copyA[4] * copyB[i + 3] + copyA[5] * copyB[i + 6];\n    out_3x3[i + 6] = copyA[6] * copyB[i] + copyA[7] * copyB[i + 3] + copyA[8] * copyB[i + 6];\n  }\n}\nfunction multiplyMatrix(a, b, rowA, colA, rowB, colB, out_rowXcol) {\n  // we need colA == rowB\n  if (colA !== rowB) {\n    vtkErrorMacro('Number of columns of A must match number of rows of B.');\n  } // If a or b is used to store the result, copying them is required\n\n\n  var copyA = _toConsumableArray(a);\n\n  var copyB = _toConsumableArray(b); // output matrix is rowA*colB\n  // output row\n\n\n  for (var i = 0; i < rowA; i++) {\n    // output col\n    for (var j = 0; j < colB; j++) {\n      out_rowXcol[i * colB + j] = 0; // sum for this point\n\n      for (var k = 0; k < colA; k++) {\n        out_rowXcol[i * colB + j] += copyA[i * colA + k] * copyB[j + colB * k];\n      }\n    }\n  }\n}\nfunction transpose3x3(in_3x3, outT_3x3) {\n  var tmp; // off-diagonal elements\n\n  tmp = in_3x3[3];\n  outT_3x3[3] = in_3x3[1];\n  outT_3x3[1] = tmp;\n  tmp = in_3x3[6];\n  outT_3x3[6] = in_3x3[2];\n  outT_3x3[2] = tmp;\n  tmp = in_3x3[7];\n  outT_3x3[7] = in_3x3[5];\n  outT_3x3[5] = tmp; // on-diagonal elements\n\n  outT_3x3[0] = in_3x3[0];\n  outT_3x3[4] = in_3x3[4];\n  outT_3x3[8] = in_3x3[8];\n}\nfunction invert3x3(in_3x3, outI_3x3) {\n  var a1 = in_3x3[0];\n  var b1 = in_3x3[1];\n  var c1 = in_3x3[2];\n  var a2 = in_3x3[3];\n  var b2 = in_3x3[4];\n  var c2 = in_3x3[5];\n  var a3 = in_3x3[6];\n  var b3 = in_3x3[7];\n  var c3 = in_3x3[8]; // Compute the adjoint\n\n  var d1 = +determinant2x2(b2, b3, c2, c3);\n  var d2 = -determinant2x2(a2, a3, c2, c3);\n  var d3 = +determinant2x2(a2, a3, b2, b3);\n  var e1 = -determinant2x2(b1, b3, c1, c3);\n  var e2 = +determinant2x2(a1, a3, c1, c3);\n  var e3 = -determinant2x2(a1, a3, b1, b3);\n  var f1 = +determinant2x2(b1, b2, c1, c2);\n  var f2 = -determinant2x2(a1, a2, c1, c2);\n  var f3 = +determinant2x2(a1, a2, b1, b2); // Divide by the determinant\n\n  var det = a1 * d1 + b1 * d2 + c1 * d3;\n\n  if (det === 0) {\n    vtkWarningMacro('Matrix has 0 determinant');\n  }\n\n  outI_3x3[0] = d1 / det;\n  outI_3x3[3] = d2 / det;\n  outI_3x3[6] = d3 / det;\n  outI_3x3[1] = e1 / det;\n  outI_3x3[4] = e2 / det;\n  outI_3x3[7] = e3 / det;\n  outI_3x3[2] = f1 / det;\n  outI_3x3[5] = f2 / det;\n  outI_3x3[8] = f3 / det;\n}\nfunction determinant3x3(mat_3x3) {\n  return mat_3x3[0] * mat_3x3[4] * mat_3x3[8] + mat_3x3[3] * mat_3x3[7] * mat_3x3[2] + mat_3x3[6] * mat_3x3[1] * mat_3x3[5] - mat_3x3[0] * mat_3x3[7] * mat_3x3[5] - mat_3x3[3] * mat_3x3[1] * mat_3x3[8] - mat_3x3[6] * mat_3x3[4] * mat_3x3[2];\n}\nfunction identity3x3(mat_3x3) {\n  for (var i = 0; i < 3; i++) {\n    /* eslint-disable-next-line no-multi-assign */\n    mat_3x3[i * 3] = mat_3x3[i * 3 + 1] = mat_3x3[i * 3 + 2] = 0;\n    mat_3x3[i * 3 + i] = 1;\n  }\n}\nfunction identity(n, mat) {\n  for (var i = 0; i < n; i++) {\n    for (var j = 0; j < n; j++) {\n      mat[i * n + j] = 0;\n    }\n\n    mat[i * n + i] = 1;\n  }\n\n  return mat;\n}\nfunction quaternionToMatrix3x3(quat_4, mat_3x3) {\n  var ww = quat_4[0] * quat_4[0];\n  var wx = quat_4[0] * quat_4[1];\n  var wy = quat_4[0] * quat_4[2];\n  var wz = quat_4[0] * quat_4[3];\n  var xx = quat_4[1] * quat_4[1];\n  var yy = quat_4[2] * quat_4[2];\n  var zz = quat_4[3] * quat_4[3];\n  var xy = quat_4[1] * quat_4[2];\n  var xz = quat_4[1] * quat_4[3];\n  var yz = quat_4[2] * quat_4[3];\n  var rr = xx + yy + zz; // normalization factor, just in case quaternion was not normalized\n\n  var f = 1 / (ww + rr);\n  var s = (ww - rr) * f;\n  f *= 2;\n  mat_3x3[0] = xx * f + s;\n  mat_3x3[3] = (xy + wz) * f;\n  mat_3x3[6] = (xz - wy) * f;\n  mat_3x3[1] = (xy - wz) * f;\n  mat_3x3[4] = yy * f + s;\n  mat_3x3[7] = (yz + wx) * f;\n  mat_3x3[2] = (xz + wy) * f;\n  mat_3x3[5] = (yz - wx) * f;\n  mat_3x3[8] = zz * f + s;\n}\n/**\n * Returns true if elements of both arrays are equals.\n * @param {Array} a an array of numbers (vector, point, matrix...)\n * @param {Array} b an array of numbers (vector, point, matrix...)\n * @param {Number} eps tolerance\n */\n\nfunction areEquals(a, b) {\n  var eps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1e-6;\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  function isEqual(element, index) {\n    return Math.abs(element - b[index]) <= eps;\n  }\n\n  return a.every(isEqual);\n}\nvar areMatricesEqual = areEquals;\nfunction roundNumber(num) {\n  var digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  if (!\"\".concat(num).includes('e')) {\n    return +\"\".concat(Math.round(\"\".concat(num, \"e+\").concat(digits)), \"e-\").concat(digits);\n  }\n\n  var arr = \"\".concat(num).split('e');\n  var sig = '';\n\n  if (+arr[1] + digits > 0) {\n    sig = '+';\n  }\n\n  return +\"\".concat(Math.round(\"\".concat(+arr[0], \"e\").concat(sig).concat(+arr[1] + digits)), \"e-\").concat(digits);\n}\nfunction roundVector(vector) {\n  var out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n  var digits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  out[0] = roundNumber(vector[0], digits);\n  out[1] = roundNumber(vector[1], digits);\n  out[2] = roundNumber(vector[2], digits);\n  return out;\n}\nfunction jacobiN(a, n, w, v) {\n  var i;\n  var j;\n  var k;\n  var iq;\n  var ip;\n  var numPos;\n  var tresh;\n  var theta;\n  var t;\n  var tau;\n  var sm;\n  var s;\n  var h;\n  var g;\n  var c;\n  var tmp;\n  var b = createArray(n);\n  var z = createArray(n);\n\n  var vtkROTATE = function vtkROTATE(aa, ii, jj) {\n    g = aa[ii];\n    h = aa[jj];\n    aa[ii] = g - s * (h + g * tau);\n    aa[jj] = h + s * (g - h * tau);\n  }; // initialize\n\n\n  identity(n, v);\n\n  for (ip = 0; ip < n; ip++) {\n    b[ip] = w[ip] = a[ip + ip * n];\n    z[ip] = 0.0;\n  } // begin rotation sequence\n\n\n  for (i = 0; i < VTK_MAX_ROTATIONS; i++) {\n    sm = 0.0;\n\n    for (ip = 0; ip < n - 1; ip++) {\n      for (iq = ip + 1; iq < n; iq++) {\n        sm += Math.abs(a[ip * n + iq]);\n      }\n    }\n\n    if (sm === 0.0) {\n      break;\n    } // first 3 sweeps\n\n\n    if (i < 3) {\n      tresh = 0.2 * sm / (n * n);\n    } else {\n      tresh = 0.0;\n    }\n\n    for (ip = 0; ip < n - 1; ip++) {\n      for (iq = ip + 1; iq < n; iq++) {\n        g = 100.0 * Math.abs(a[ip * n + iq]); // after 4 sweeps\n\n        if (i > 3 && Math.abs(w[ip]) + g === Math.abs(w[ip]) && Math.abs(w[iq]) + g === Math.abs(w[iq])) {\n          a[ip * n + iq] = 0.0;\n        } else if (Math.abs(a[ip * n + iq]) > tresh) {\n          h = w[iq] - w[ip];\n\n          if (Math.abs(h) + g === Math.abs(h)) {\n            t = a[ip * n + iq] / h;\n          } else {\n            theta = 0.5 * h / a[ip * n + iq];\n            t = 1.0 / (Math.abs(theta) + Math.sqrt(1.0 + theta * theta));\n\n            if (theta < 0.0) {\n              t = -t;\n            }\n          }\n\n          c = 1.0 / Math.sqrt(1 + t * t);\n          s = t * c;\n          tau = s / (1.0 + c);\n          h = t * a[ip * n + iq];\n          z[ip] -= h;\n          z[iq] += h;\n          w[ip] -= h;\n          w[iq] += h;\n          a[ip * n + iq] = 0.0; // ip already shifted left by 1 unit\n\n          for (j = 0; j <= ip - 1; j++) {\n            vtkROTATE(a, j * n + ip, j * n + iq);\n          } // ip and iq already shifted left by 1 unit\n\n\n          for (j = ip + 1; j <= iq - 1; j++) {\n            vtkROTATE(a, ip * n + j, j * n + iq);\n          } // iq already shifted left by 1 unit\n\n\n          for (j = iq + 1; j < n; j++) {\n            vtkROTATE(a, ip * n + j, iq * n + j);\n          }\n\n          for (j = 0; j < n; j++) {\n            vtkROTATE(v, j * n + ip, j * n + iq);\n          }\n        }\n      }\n    }\n\n    for (ip = 0; ip < n; ip++) {\n      b[ip] += z[ip];\n      w[ip] = b[ip];\n      z[ip] = 0.0;\n    }\n  } // this is NEVER called\n\n\n  if (i >= VTK_MAX_ROTATIONS) {\n    vtkWarningMacro('vtkMath::Jacobi: Error extracting eigenfunctions');\n    return 0;\n  } // sort eigenfunctions: these changes do not affect accuracy\n\n\n  for (j = 0; j < n - 1; j++) {\n    // boundary incorrect\n    k = j;\n    tmp = w[k];\n\n    for (i = j + 1; i < n; i++) {\n      // boundary incorrect, shifted already\n      if (w[i] >= tmp || Math.abs(w[i] - tmp) < VTK_SMALL_NUMBER) {\n        // why exchange if same?\n        k = i;\n        tmp = w[k];\n      }\n    }\n\n    if (k !== j) {\n      w[k] = w[j];\n      w[j] = tmp;\n      swapColumnsMatrix_nxn(v, n, j, k);\n    }\n  } // ensure eigenvector consistency (i.e., Jacobi can compute vectors that\n  // are negative of one another (.707,.707,0) and (-.707,-.707,0). This can\n  // reek havoc in hyperstreamline/other stuff. We will select the most\n  // positive eigenvector.\n\n\n  var ceil_half_n = (n >> 1) + (n & 1);\n\n  for (numPos = 0, i = 0; i < n * n; i++) {\n    if (v[i] >= 0.0) {\n      numPos++;\n    }\n  } //    if ( numPos < ceil(double(n)/double(2.0)) )\n\n\n  if (numPos < ceil_half_n) {\n    for (i = 0; i < n; i++) {\n      v[i * n + j] *= -1.0;\n    }\n  }\n\n  return 1;\n}\nfunction matrix3x3ToQuaternion(mat_3x3, quat_4) {\n  var tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; // on-diagonal elements\n\n  tmp[0] = mat_3x3[0] + mat_3x3[4] + mat_3x3[8];\n  tmp[5] = mat_3x3[0] - mat_3x3[4] - mat_3x3[8];\n  tmp[10] = -mat_3x3[0] + mat_3x3[4] - mat_3x3[8];\n  tmp[15] = -mat_3x3[0] - mat_3x3[4] + mat_3x3[8]; // off-diagonal elements\n\n  tmp[1] = tmp[4] = mat_3x3[7] - mat_3x3[5];\n  tmp[2] = tmp[8] = mat_3x3[2] - mat_3x3[6];\n  tmp[3] = tmp[12] = mat_3x3[3] - mat_3x3[1];\n  tmp[6] = tmp[9] = mat_3x3[3] + mat_3x3[1];\n  tmp[7] = tmp[13] = mat_3x3[2] + mat_3x3[6];\n  tmp[11] = tmp[14] = mat_3x3[7] + mat_3x3[5];\n  var eigenvectors = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  var eigenvalues = [0, 0, 0, 0]; // convert into format that JacobiN can use,\n  // then use Jacobi to find eigenvalues and eigenvectors\n  // tmp is copied because jacobiN may modify it\n\n  var NTemp = [].concat(tmp);\n  jacobiN(NTemp, 4, eigenvalues, eigenvectors); // the first eigenvector is the one we want\n\n  quat_4[0] = eigenvectors[0];\n  quat_4[1] = eigenvectors[4];\n  quat_4[2] = eigenvectors[8];\n  quat_4[3] = eigenvectors[12];\n}\nfunction multiplyQuaternion(quat_1, quat_2, quat_out) {\n  var ww = quat_1[0] * quat_2[0];\n  var wx = quat_1[0] * quat_2[1];\n  var wy = quat_1[0] * quat_2[2];\n  var wz = quat_1[0] * quat_2[3];\n  var xw = quat_1[1] * quat_2[0];\n  var xx = quat_1[1] * quat_2[1];\n  var xy = quat_1[1] * quat_2[2];\n  var xz = quat_1[1] * quat_2[3];\n  var yw = quat_1[2] * quat_2[0];\n  var yx = quat_1[2] * quat_2[1];\n  var yy = quat_1[2] * quat_2[2];\n  var yz = quat_1[2] * quat_2[3];\n  var zw = quat_1[3] * quat_2[0];\n  var zx = quat_1[3] * quat_2[1];\n  var zy = quat_1[3] * quat_2[2];\n  var zz = quat_1[3] * quat_2[3];\n  quat_out[0] = ww - xx - yy - zz;\n  quat_out[1] = wx + xw + yz - zy;\n  quat_out[2] = wy - xz + yw + zx;\n  quat_out[3] = wz + xy - yx + zw;\n}\nfunction orthogonalize3x3(a_3x3, out_3x3) {\n  // copy the matrix\n  for (var i = 0; i < 9; i++) {\n    out_3x3[i] = a_3x3[i];\n  } // Pivot the matrix to improve accuracy\n\n\n  var scale = createArray(3);\n  var index = createArray(3);\n  var largest; // Loop over rows to get implicit scaling information\n\n  for (var _i = 0; _i < 3; _i++) {\n    var _x = Math.abs(out_3x3[_i * 3]);\n\n    var _x2 = Math.abs(out_3x3[_i * 3 + 1]);\n\n    var _x3 = Math.abs(out_3x3[_i * 3 + 2]);\n\n    largest = _x2 > _x ? _x2 : _x;\n    largest = _x3 > largest ? _x3 : largest;\n    scale[_i] = 1;\n\n    if (largest !== 0) {\n      scale[_i] /= largest;\n    }\n  } // first column\n\n\n  var x1 = Math.abs(out_3x3[0]) * scale[0];\n  var x2 = Math.abs(out_3x3[3]) * scale[1];\n  var x3 = Math.abs(out_3x3[6]) * scale[2];\n  index[0] = 0;\n  largest = x1;\n\n  if (x2 >= largest) {\n    largest = x2;\n    index[0] = 1;\n  }\n\n  if (x3 >= largest) {\n    index[0] = 2;\n  }\n\n  if (index[0] !== 0) {\n    // swap vectors\n    swapColumnsMatrix_nxn(out_3x3, 3, index[0], 0);\n    scale[index[0]] = scale[0];\n  } // second column\n\n\n  var y2 = Math.abs(out_3x3[4]) * scale[1];\n  var y3 = Math.abs(out_3x3[7]) * scale[2];\n  index[1] = 1;\n  largest = y2;\n\n  if (y3 >= largest) {\n    index[1] = 2; // swap vectors\n\n    swapColumnsMatrix_nxn(out_3x3, 3, 1, 2);\n  } // third column\n\n\n  index[2] = 2; // A quaternion can only describe a pure rotation, not\n  // a rotation with a flip, therefore the flip must be\n  // removed before the matrix is converted to a quaternion.\n\n  var flip = 0;\n\n  if (determinant3x3(out_3x3) < 0) {\n    flip = 1;\n\n    for (var _i2 = 0; _i2 < 9; _i2++) {\n      out_3x3[_i2] = -out_3x3[_i2];\n    }\n  } // Do orthogonalization using a quaternion intermediate\n  // (this, essentially, does the orthogonalization via\n  // diagonalization of an appropriately constructed symmetric\n  // 4x4 matrix rather than by doing SVD of the 3x3 matrix)\n\n\n  var quat = createArray(4);\n  matrix3x3ToQuaternion(out_3x3, quat);\n  quaternionToMatrix3x3(quat, out_3x3); // Put the flip back into the orthogonalized matrix.\n\n  if (flip) {\n    for (var _i3 = 0; _i3 < 9; _i3++) {\n      out_3x3[_i3] = -out_3x3[_i3];\n    }\n  } // Undo the pivoting\n\n\n  if (index[1] !== 1) {\n    swapColumnsMatrix_nxn(out_3x3, 3, index[1], 1);\n  }\n\n  if (index[0] !== 0) {\n    swapColumnsMatrix_nxn(out_3x3, 3, index[0], 0);\n  }\n}\nfunction diagonalize3x3(a_3x3, w_3, v_3x3) {\n  var i;\n  var j;\n  var k;\n  var maxI;\n  var tmp;\n  var maxVal; // a is copied because jacobiN may modify it\n\n  var copyA = _toConsumableArray(a_3x3); // diagonalize using Jacobi\n\n\n  jacobiN(copyA, 3, w_3, v_3x3); // if all the eigenvalues are the same, return identity matrix\n\n  if (w_3[0] === w_3[1] && w_3[0] === w_3[2]) {\n    identity3x3(v_3x3);\n    return;\n  } // transpose temporarily, it makes it easier to sort the eigenvectors\n\n\n  transpose3x3(v_3x3, v_3x3); // if two eigenvalues are the same, re-orthogonalize to optimally line\n  // up the eigenvectors with the x, y, and z axes\n\n  for (i = 0; i < 3; i++) {\n    // two eigenvalues are the same\n    if (w_3[(i + 1) % 3] === w_3[(i + 2) % 3]) {\n      // find maximum element of the independent eigenvector\n      maxVal = Math.abs(v_3x3[i * 3]);\n      maxI = 0;\n\n      for (j = 1; j < 3; j++) {\n        if (maxVal < (tmp = Math.abs(v_3x3[i * 3 + j]))) {\n          maxVal = tmp;\n          maxI = j;\n        }\n      } // swap the eigenvector into its proper position\n\n\n      if (maxI !== i) {\n        tmp = w_3[maxI];\n        w_3[maxI] = w_3[i];\n        w_3[i] = tmp;\n        swapRowsMatrix_nxn(v_3x3, 3, i, maxI);\n      } // maximum element of eigenvector should be positive\n\n\n      if (v_3x3[maxI * 3 + maxI] < 0) {\n        v_3x3[maxI * 3] = -v_3x3[maxI * 3];\n        v_3x3[maxI * 3 + 1] = -v_3x3[maxI * 3 + 1];\n        v_3x3[maxI * 3 + 2] = -v_3x3[maxI * 3 + 2];\n      } // re-orthogonalize the other two eigenvectors\n\n\n      j = (maxI + 1) % 3;\n      k = (maxI + 2) % 3;\n      v_3x3[j * 3] = 0.0;\n      v_3x3[j * 3 + 1] = 0.0;\n      v_3x3[j * 3 + 2] = 0.0;\n      v_3x3[j * 3 + j] = 1.0;\n      var vectTmp1 = cross([v_3x3[maxI * 3], v_3x3[maxI * 3 + 1], v_3x3[maxI * 3 + 2]], [v_3x3[j * 3], v_3x3[j * 3 + 1], v_3x3[j * 3 + 2]], []);\n      normalize(vectTmp1);\n      var vectTmp2 = cross(vectTmp1, [v_3x3[maxI * 3], v_3x3[maxI * 3 + 1], v_3x3[maxI * 3 + 2]], []);\n\n      for (var t = 0; t < 3; t++) {\n        v_3x3[k * 3 + t] = vectTmp1[t];\n        v_3x3[j * 3 + t] = vectTmp2[t];\n      } // transpose vectors back to columns\n\n\n      transpose3x3(v_3x3, v_3x3);\n      return;\n    }\n  } // the three eigenvalues are different, just sort the eigenvectors\n  // to align them with the x, y, and z axes\n  // find the vector with the largest x element, make that vector\n  // the first vector\n\n\n  maxVal = Math.abs(v_3x3[0]);\n  maxI = 0;\n\n  for (i = 1; i < 3; i++) {\n    if (maxVal < (tmp = Math.abs(v_3x3[i * 3]))) {\n      maxVal = tmp;\n      maxI = i;\n    }\n  } // swap eigenvalue and eigenvector\n\n\n  if (maxI !== 0) {\n    var eigenValTmp = w_3[maxI];\n    w_3[maxI] = w_3[0];\n    w_3[0] = eigenValTmp;\n    swapRowsMatrix_nxn(v_3x3, 3, maxI, 0);\n  } // do the same for the y element\n\n\n  if (Math.abs(v_3x3[4]) < Math.abs(v_3x3[7])) {\n    var _eigenValTmp = w_3[2];\n    w_3[2] = w_3[1];\n    w_3[1] = _eigenValTmp;\n    swapRowsMatrix_nxn(v_3x3, 3, 1, 2);\n  } // ensure that the sign of the eigenvectors is correct\n\n\n  for (i = 0; i < 2; i++) {\n    if (v_3x3[i * 3 + i] < 0) {\n      v_3x3[i * 3] = -v_3x3[i * 3];\n      v_3x3[i * 3 + 1] = -v_3x3[i * 3 + 1];\n      v_3x3[i * 3 + 2] = -v_3x3[i * 3 + 2];\n    }\n  } // set sign of final eigenvector to ensure that determinant is positive\n\n\n  if (determinant3x3(v_3x3) < 0) {\n    v_3x3[6] = -v_3x3[6];\n    v_3x3[7] = -v_3x3[7];\n    v_3x3[8] = -v_3x3[8];\n  } // transpose the eigenvectors back again\n\n\n  transpose3x3(v_3x3, v_3x3);\n}\nfunction singularValueDecomposition3x3(a_3x3, u_3x3, w_3, vT_3x3) {\n  var i; // copy so that A can be used for U or VT without risk\n\n  var B = _toConsumableArray(a_3x3); // temporarily flip if determinant is negative\n\n\n  var d = determinant3x3(B);\n\n  if (d < 0) {\n    for (i = 0; i < 9; i++) {\n      B[i] = -B[i];\n    }\n  } // orthogonalize, diagonalize, etc.\n\n\n  orthogonalize3x3(B, u_3x3);\n  transpose3x3(B, B);\n  multiply3x3_mat3(B, u_3x3, vT_3x3);\n  diagonalize3x3(vT_3x3, w_3, vT_3x3);\n  multiply3x3_mat3(u_3x3, vT_3x3, u_3x3);\n  transpose3x3(vT_3x3, vT_3x3); // re-create the flip\n\n  if (d < 0) {\n    w_3[0] = -w_3[0];\n    w_3[1] = -w_3[1];\n    w_3[2] = -w_3[2];\n  }\n}\n/**\n * Factor linear equations Ax = b using LU decomposition A = LU. Output factorization LU is in matrix A.\n * @param {Matrix} A square matrix\n * @param {Number} index integer array of pivot indices index[0->n-1]\n * @param {Number} size matrix size\n */\n\nfunction luFactorLinearSystem(A, index, size) {\n  var i;\n  var j;\n  var k;\n  var largest;\n  var maxI = 0;\n  var sum;\n  var temp1;\n  var temp2;\n  var scale = createArray(size); //\n  // Loop over rows to get implicit scaling information\n  //\n\n  for (i = 0; i < size; i++) {\n    for (largest = 0.0, j = 0; j < size; j++) {\n      if ((temp2 = Math.abs(A[i * size + j])) > largest) {\n        largest = temp2;\n      }\n    }\n\n    if (largest === 0.0) {\n      vtkWarningMacro('Unable to factor linear system');\n      return 0;\n    }\n\n    scale[i] = 1.0 / largest;\n  } //\n  // Loop over all columns using Crout's method\n  //\n\n\n  for (j = 0; j < size; j++) {\n    for (i = 0; i < j; i++) {\n      sum = A[i * size + j];\n\n      for (k = 0; k < i; k++) {\n        sum -= A[i * size + k] * A[k * size + j];\n      }\n\n      A[i * size + j] = sum;\n    } //\n    // Begin search for largest pivot element\n    //\n\n\n    for (largest = 0.0, i = j; i < size; i++) {\n      sum = A[i * size + j];\n\n      for (k = 0; k < j; k++) {\n        sum -= A[i * size + k] * A[k * size + j];\n      }\n\n      A[i * size + j] = sum;\n\n      if ((temp1 = scale[i] * Math.abs(sum)) >= largest) {\n        largest = temp1;\n        maxI = i;\n      }\n    } //\n    // Check for row interchange\n    //\n\n\n    if (j !== maxI) {\n      for (k = 0; k < size; k++) {\n        temp1 = A[maxI * size + k];\n        A[maxI * size + k] = A[j * size + k];\n        A[j * size + k] = temp1;\n      }\n\n      scale[maxI] = scale[j];\n    } //\n    // Divide by pivot element and perform elimination\n    //\n\n\n    index[j] = maxI;\n\n    if (Math.abs(A[j * size + j]) <= VTK_SMALL_NUMBER) {\n      vtkWarningMacro('Unable to factor linear system');\n      return 0;\n    }\n\n    if (j !== size - 1) {\n      temp1 = 1.0 / A[j * size + j];\n\n      for (i = j + 1; i < size; i++) {\n        A[i * size + j] *= temp1;\n      }\n    }\n  }\n\n  return 1;\n}\nfunction luSolveLinearSystem(A, index, x, size) {\n  var i;\n  var j;\n  var ii;\n  var idx;\n  var sum; //\n  // Proceed with forward and backsubstitution for L and U\n  // matrices.  First, forward substitution.\n  //\n\n  for (ii = -1, i = 0; i < size; i++) {\n    idx = index[i];\n    sum = x[idx];\n    x[idx] = x[i];\n\n    if (ii >= 0) {\n      for (j = ii; j <= i - 1; j++) {\n        sum -= A[i * size + j] * x[j];\n      }\n    } else if (sum !== 0.0) {\n      ii = i;\n    }\n\n    x[i] = sum;\n  } //\n  // Now, back substitution\n  //\n\n\n  for (i = size - 1; i >= 0; i--) {\n    sum = x[i];\n\n    for (j = i + 1; j < size; j++) {\n      sum -= A[i * size + j] * x[j];\n    }\n\n    x[i] = sum / A[i * size + i];\n  }\n}\nfunction solveLinearSystem(A, x, size) {\n  // if we solving something simple, just solve it\n  if (size === 2) {\n    var y = createArray(2);\n    var det = determinant2x2(A[0], A[1], A[2], A[3]);\n\n    if (det === 0.0) {\n      // Unable to solve linear system\n      return 0;\n    }\n\n    y[0] = (A[3] * x[0] - A[1] * x[1]) / det;\n    y[1] = (-(A[2] * x[0]) + A[0] * x[1]) / det;\n    x[0] = y[0];\n    x[1] = y[1];\n    return 1;\n  }\n\n  if (size === 1) {\n    if (A[0] === 0.0) {\n      // Unable to solve linear system\n      return 0;\n    }\n\n    x[0] /= A[0];\n    return 1;\n  } //\n  // System of equations is not trivial, use Crout's method\n  //\n  // Check on allocation of working vectors\n\n\n  var index = createArray(size); // Factor and solve matrix\n\n  if (luFactorLinearSystem(A, index, size) === 0) {\n    return 0;\n  }\n\n  luSolveLinearSystem(A, index, x, size);\n  return 1;\n}\nfunction invertMatrix(A, AI, size) {\n  var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var column = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  var tmp1Size = index || createArray(size);\n  var tmp2Size = column || createArray(size); // Factor matrix; then begin solving for inverse one column at a time.\n  // Note: tmp1Size returned value is used later, tmp2Size is just working\n  // memory whose values are not used in LUSolveLinearSystem\n\n  if (luFactorLinearSystem(A, tmp1Size, size) === 0) {\n    return 0;\n  }\n\n  for (var j = 0; j < size; j++) {\n    for (var i = 0; i < size; i++) {\n      tmp2Size[i] = 0.0;\n    }\n\n    tmp2Size[j] = 1.0;\n    luSolveLinearSystem(A, tmp1Size, tmp2Size, size);\n\n    for (var _i4 = 0; _i4 < size; _i4++) {\n      AI[_i4 * size + j] = tmp2Size[_i4];\n    }\n  }\n\n  return 1;\n}\nfunction estimateMatrixCondition(A, size) {\n  var minValue = +Number.MAX_VALUE;\n  var maxValue = -Number.MAX_VALUE; // find the maximum value\n\n  for (var i = 0; i < size; i++) {\n    for (var j = i; j < size; j++) {\n      if (Math.abs(A[i * size + j]) > maxValue) {\n        maxValue = Math.abs(A[i * size + j]);\n      }\n    }\n  } // find the minimum diagonal value\n\n\n  for (var _i5 = 0; _i5 < size; _i5++) {\n    if (Math.abs(A[_i5 * size + _i5]) < minValue) {\n      minValue = Math.abs(A[_i5 * size + _i5]);\n    }\n  }\n\n  if (minValue === 0.0) {\n    return Number.MAX_VALUE;\n  }\n\n  return maxValue / minValue;\n}\nfunction jacobi(a_3x3, w, v) {\n  return jacobiN(a_3x3, 3, w, v);\n}\nfunction solveHomogeneousLeastSquares(numberOfSamples, xt, xOrder, mt) {\n  // check dimensional consistency\n  if (numberOfSamples < xOrder) {\n    vtkWarningMacro('Insufficient number of samples. Underdetermined.');\n    return 0;\n  }\n\n  var i;\n  var j;\n  var k; // set up intermediate variables\n  // Allocate matrix to hold X times transpose of X\n\n  var XXt = createArray(xOrder * xOrder); // size x by x\n  // Allocate the array of eigenvalues and eigenvectors\n\n  var eigenvals = createArray(xOrder);\n  var eigenvecs = createArray(xOrder * xOrder); // Calculate XXt upper half only, due to symmetry\n\n  for (k = 0; k < numberOfSamples; k++) {\n    for (i = 0; i < xOrder; i++) {\n      for (j = i; j < xOrder; j++) {\n        XXt[i * xOrder + j] += xt[k * xOrder + i] * xt[k * xOrder + j];\n      }\n    }\n  } // now fill in the lower half of the XXt matrix\n\n\n  for (i = 0; i < xOrder; i++) {\n    for (j = 0; j < i; j++) {\n      XXt[i * xOrder + j] = XXt[j * xOrder + i];\n    }\n  } // Compute the eigenvectors and eigenvalues\n\n\n  jacobiN(XXt, xOrder, eigenvals, eigenvecs); // Smallest eigenval is at the end of the list (xOrder-1), and solution is\n  // corresponding eigenvec.\n\n  for (i = 0; i < xOrder; i++) {\n    mt[i] = eigenvecs[i * xOrder + xOrder - 1];\n  }\n\n  return 1;\n}\nfunction solveLeastSquares(numberOfSamples, xt, xOrder, yt, yOrder, mt) {\n  var checkHomogeneous = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;\n\n  // check dimensional consistency\n  if (numberOfSamples < xOrder || numberOfSamples < yOrder) {\n    vtkWarningMacro('Insufficient number of samples. Underdetermined.');\n    return 0;\n  }\n\n  var homogenFlags = createArray(yOrder);\n  var allHomogeneous = 1;\n  var hmt;\n  var homogRC = 0;\n  var i;\n  var j;\n  var k;\n  var someHomogeneous = 0; // Ok, first init some flags check and see if all the systems are homogeneous\n\n  if (checkHomogeneous) {\n    // If Y' is zero, it's a homogeneous system and can't be solved via\n    // the pseudoinverse method. Detect this case, warn the user, and\n    // invoke SolveHomogeneousLeastSquares instead. Note that it doesn't\n    // really make much sense for yOrder to be greater than one in this case,\n    // since that's just yOrder occurrences of a 0 vector on the RHS, but\n    // we allow it anyway. N\n    // Initialize homogeneous flags on a per-right-hand-side basis\n    for (j = 0; j < yOrder; j++) {\n      homogenFlags[j] = 1;\n    }\n\n    for (i = 0; i < numberOfSamples; i++) {\n      for (j = 0; j < yOrder; j++) {\n        if (Math.abs(yt[i * yOrder + j]) > VTK_SMALL_NUMBER) {\n          allHomogeneous = 0;\n          homogenFlags[j] = 0;\n        }\n      }\n    } // If we've got one system, and it's homogeneous, do it and bail out quickly.\n\n\n    if (allHomogeneous && yOrder === 1) {\n      vtkWarningMacro('Detected homogeneous system (Y=0), calling SolveHomogeneousLeastSquares()');\n      return solveHomogeneousLeastSquares(numberOfSamples, xt, xOrder, mt);\n    } // Ok, we've got more than one system of equations.\n    // Figure out if we need to calculate the homogeneous equation solution for\n    // any of them.\n\n\n    if (allHomogeneous) {\n      someHomogeneous = 1;\n    } else {\n      for (j = 0; j < yOrder; j++) {\n        if (homogenFlags[j]) {\n          someHomogeneous = 1;\n        }\n      }\n    }\n  } // If necessary, solve the homogeneous problem\n\n\n  if (someHomogeneous) {\n    // hmt is the homogeneous equation version of mt, the general solution.\n    // hmt should be xOrder x yOrder, but since we are solving only the homogeneous part, here it is xOrder x 1\n    hmt = createArray(xOrder); // Ok, solve the homogeneous problem\n\n    homogRC = solveHomogeneousLeastSquares(numberOfSamples, xt, xOrder, hmt);\n  } // set up intermediate variables\n\n\n  var XXt = createArray(xOrder * xOrder); // size x by x\n\n  var XXtI = createArray(xOrder * xOrder); // size x by x\n\n  var XYt = createArray(xOrder * yOrder); // size x by y\n  // first find the pseudoinverse matrix\n\n  for (k = 0; k < numberOfSamples; k++) {\n    for (i = 0; i < xOrder; i++) {\n      // first calculate the XXt matrix, only do the upper half (symmetrical)\n      for (j = i; j < xOrder; j++) {\n        XXt[i * xOrder + j] += xt[k * xOrder + i] * xt[k * xOrder + j];\n      } // now calculate the XYt matrix\n\n\n      for (j = 0; j < yOrder; j++) {\n        XYt[i * yOrder + j] += xt[k * xOrder + i] * yt[k * yOrder + j];\n      }\n    }\n  } // now fill in the lower half of the XXt matrix\n\n\n  for (i = 0; i < xOrder; i++) {\n    for (j = 0; j < i; j++) {\n      XXt[i * xOrder + j] = XXt[j * xOrder + i];\n    }\n  }\n\n  var successFlag = invertMatrix(XXt, XXtI, xOrder); // next get the inverse of XXt\n\n  if (successFlag) {\n    for (i = 0; i < xOrder; i++) {\n      for (j = 0; j < yOrder; j++) {\n        mt[i * yOrder + j] = 0.0;\n\n        for (k = 0; k < xOrder; k++) {\n          mt[i * yOrder + j] += XXtI[i * xOrder + k] * XYt[k * yOrder + j];\n        }\n      }\n    }\n  } // Fix up any of the solutions that correspond to the homogeneous equation\n  // problem.\n\n\n  if (someHomogeneous) {\n    for (j = 0; j < yOrder; j++) {\n      if (homogenFlags[j]) {\n        // Fix this one\n        for (i = 0; i < xOrder; i++) {\n          mt[i * yOrder + j] = hmt[i * yOrder];\n        }\n      }\n    }\n  }\n\n  if (someHomogeneous) {\n    return homogRC && successFlag;\n  }\n\n  return successFlag;\n}\nfunction hex2float(hexStr) {\n  var outFloatArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0.5, 1];\n\n  switch (hexStr.length) {\n    case 3:\n      // abc => #aabbcc\n      outFloatArray[0] = parseInt(hexStr[0], 16) * 17 / 255;\n      outFloatArray[1] = parseInt(hexStr[1], 16) * 17 / 255;\n      outFloatArray[2] = parseInt(hexStr[2], 16) * 17 / 255;\n      return outFloatArray;\n\n    case 4:\n      // #abc => #aabbcc\n      outFloatArray[0] = parseInt(hexStr[1], 16) * 17 / 255;\n      outFloatArray[1] = parseInt(hexStr[2], 16) * 17 / 255;\n      outFloatArray[2] = parseInt(hexStr[3], 16) * 17 / 255;\n      return outFloatArray;\n\n    case 6:\n      // ab01df => #ab01df\n      outFloatArray[0] = parseInt(hexStr.substr(0, 2), 16) / 255;\n      outFloatArray[1] = parseInt(hexStr.substr(2, 2), 16) / 255;\n      outFloatArray[2] = parseInt(hexStr.substr(4, 2), 16) / 255;\n      return outFloatArray;\n\n    case 7:\n      // #ab01df\n      outFloatArray[0] = parseInt(hexStr.substr(1, 2), 16) / 255;\n      outFloatArray[1] = parseInt(hexStr.substr(3, 2), 16) / 255;\n      outFloatArray[2] = parseInt(hexStr.substr(5, 2), 16) / 255;\n      return outFloatArray;\n\n    case 9:\n      // #ab01df00\n      outFloatArray[0] = parseInt(hexStr.substr(1, 2), 16) / 255;\n      outFloatArray[1] = parseInt(hexStr.substr(3, 2), 16) / 255;\n      outFloatArray[2] = parseInt(hexStr.substr(5, 2), 16) / 255;\n      outFloatArray[3] = parseInt(hexStr.substr(7, 2), 16) / 255;\n      return outFloatArray;\n\n    default:\n      return outFloatArray;\n  }\n}\nfunction rgb2hsv(rgb, hsv) {\n  var h;\n  var s;\n\n  var _rgb = _slicedToArray(rgb, 3),\n      r = _rgb[0],\n      g = _rgb[1],\n      b = _rgb[2];\n\n  var onethird = 1.0 / 3.0;\n  var onesixth = 1.0 / 6.0;\n  var twothird = 2.0 / 3.0;\n  var cmax = r;\n  var cmin = r;\n\n  if (g > cmax) {\n    cmax = g;\n  } else if (g < cmin) {\n    cmin = g;\n  }\n\n  if (b > cmax) {\n    cmax = b;\n  } else if (b < cmin) {\n    cmin = b;\n  }\n\n  var v = cmax;\n\n  if (v > 0.0) {\n    s = (cmax - cmin) / cmax;\n  } else {\n    s = 0.0;\n  }\n\n  if (s > 0) {\n    if (r === cmax) {\n      h = onesixth * (g - b) / (cmax - cmin);\n    } else if (g === cmax) {\n      h = onethird + onesixth * (b - r) / (cmax - cmin);\n    } else {\n      h = twothird + onesixth * (r - g) / (cmax - cmin);\n    }\n\n    if (h < 0.0) {\n      h += 1.0;\n    }\n  } else {\n    h = 0.0;\n  } // Set the values back to the array\n\n\n  hsv[0] = h;\n  hsv[1] = s;\n  hsv[2] = v;\n}\nfunction hsv2rgb(hsv, rgb) {\n  var _hsv = _slicedToArray(hsv, 3),\n      h = _hsv[0],\n      s = _hsv[1],\n      v = _hsv[2];\n\n  var onethird = 1.0 / 3.0;\n  var onesixth = 1.0 / 6.0;\n  var twothird = 2.0 / 3.0;\n  var fivesixth = 5.0 / 6.0;\n  var r;\n  var g;\n  var b; // compute RGB from HSV\n\n  if (h > onesixth && h <= onethird) {\n    // green/red\n    g = 1.0;\n    r = (onethird - h) / onesixth;\n    b = 0.0;\n  } else if (h > onethird && h <= 0.5) {\n    // green/blue\n    g = 1.0;\n    b = (h - onethird) / onesixth;\n    r = 0.0;\n  } else if (h > 0.5 && h <= twothird) {\n    // blue/green\n    b = 1.0;\n    g = (twothird - h) / onesixth;\n    r = 0.0;\n  } else if (h > twothird && h <= fivesixth) {\n    // blue/red\n    b = 1.0;\n    r = (h - twothird) / onesixth;\n    g = 0.0;\n  } else if (h > fivesixth && h <= 1.0) {\n    // red/blue\n    r = 1.0;\n    b = (1.0 - h) / onesixth;\n    g = 0.0;\n  } else {\n    // red/green\n    r = 1.0;\n    g = h / onesixth;\n    b = 0.0;\n  } // add Saturation to the equation.\n\n\n  r = s * r + (1.0 - s);\n  g = s * g + (1.0 - s);\n  b = s * b + (1.0 - s);\n  r *= v;\n  g *= v;\n  b *= v; // Assign back to the array\n\n  rgb[0] = r;\n  rgb[1] = g;\n  rgb[2] = b;\n}\nfunction lab2xyz(lab, xyz) {\n  // LAB to XYZ\n  var _lab = _slicedToArray(lab, 3),\n      L = _lab[0],\n      a = _lab[1],\n      b = _lab[2];\n\n  var var_Y = (L + 16) / 116;\n  var var_X = a / 500 + var_Y;\n  var var_Z = var_Y - b / 200;\n\n  if (Math.pow(var_Y, 3) > 0.008856) {\n    var_Y = Math.pow(var_Y, 3);\n  } else {\n    var_Y = (var_Y - 16.0 / 116.0) / 7.787;\n  }\n\n  if (Math.pow(var_X, 3) > 0.008856) {\n    var_X = Math.pow(var_X, 3);\n  } else {\n    var_X = (var_X - 16.0 / 116.0) / 7.787;\n  }\n\n  if (Math.pow(var_Z, 3) > 0.008856) {\n    var_Z = Math.pow(var_Z, 3);\n  } else {\n    var_Z = (var_Z - 16.0 / 116.0) / 7.787;\n  }\n\n  var ref_X = 0.9505;\n  var ref_Y = 1.0;\n  var ref_Z = 1.089;\n  xyz[0] = ref_X * var_X; // ref_X = 0.9505  Observer= 2 deg Illuminant= D65\n\n  xyz[1] = ref_Y * var_Y; // ref_Y = 1.000\n\n  xyz[2] = ref_Z * var_Z; // ref_Z = 1.089\n}\nfunction xyz2lab(xyz, lab) {\n  var _xyz = _slicedToArray(xyz, 3),\n      x = _xyz[0],\n      y = _xyz[1],\n      z = _xyz[2];\n\n  var ref_X = 0.9505;\n  var ref_Y = 1.0;\n  var ref_Z = 1.089;\n  var var_X = x / ref_X; // ref_X = 0.9505  Observer= 2 deg, Illuminant= D65\n\n  var var_Y = y / ref_Y; // ref_Y = 1.000\n\n  var var_Z = z / ref_Z; // ref_Z = 1.089\n\n  if (var_X > 0.008856) var_X = Math.pow(var_X, 1.0 / 3.0);else var_X = 7.787 * var_X + 16.0 / 116.0;\n  if (var_Y > 0.008856) var_Y = Math.pow(var_Y, 1.0 / 3.0);else var_Y = 7.787 * var_Y + 16.0 / 116.0;\n  if (var_Z > 0.008856) var_Z = Math.pow(var_Z, 1.0 / 3.0);else var_Z = 7.787 * var_Z + 16.0 / 116.0;\n  lab[0] = 116 * var_Y - 16;\n  lab[1] = 500 * (var_X - var_Y);\n  lab[2] = 200 * (var_Y - var_Z);\n}\nfunction xyz2rgb(xyz, rgb) {\n  var _xyz2 = _slicedToArray(xyz, 3),\n      x = _xyz2[0],\n      y = _xyz2[1],\n      z = _xyz2[2];\n\n  var r = x * 3.2406 + y * -1.5372 + z * -0.4986;\n  var g = x * -0.9689 + y * 1.8758 + z * 0.0415;\n  var b = x * 0.0557 + y * -0.204 + z * 1.057; // The following performs a \"gamma correction\" specified by the sRGB color\n  // space.  sRGB is defined by a canonical definition of a display monitor and\n  // has been standardized by the International Electrotechnical Commission (IEC\n  // 61966-2-1).  The nonlinearity of the correction is designed to make the\n  // colors more perceptually uniform.  This color space has been adopted by\n  // several applications including Adobe Photoshop and Microsoft Windows color\n  // management.  OpenGL is agnostic on its RGB color space, but it is reasonable\n  // to assume it is close to this one.\n\n  if (r > 0.0031308) r = 1.055 * Math.pow(r, 1 / 2.4) - 0.055;else r *= 12.92;\n  if (g > 0.0031308) g = 1.055 * Math.pow(g, 1 / 2.4) - 0.055;else g *= 12.92;\n  if (b > 0.0031308) b = 1.055 * Math.pow(b, 1 / 2.4) - 0.055;else b *= 12.92; // Clip colors. ideally we would do something that is perceptually closest\n  // (since we can see colors outside of the display gamut), but this seems to\n  // work well enough.\n\n  var maxVal = r;\n  if (maxVal < g) maxVal = g;\n  if (maxVal < b) maxVal = b;\n\n  if (maxVal > 1.0) {\n    r /= maxVal;\n    g /= maxVal;\n    b /= maxVal;\n  }\n\n  if (r < 0) r = 0;\n  if (g < 0) g = 0;\n  if (b < 0) b = 0; // Push values back to array\n\n  rgb[0] = r;\n  rgb[1] = g;\n  rgb[2] = b;\n}\nfunction rgb2xyz(rgb, xyz) {\n  var _rgb2 = _slicedToArray(rgb, 3),\n      r = _rgb2[0],\n      g = _rgb2[1],\n      b = _rgb2[2]; // The following performs a \"gamma correction\" specified by the sRGB color\n  // space.  sRGB is defined by a canonical definition of a display monitor and\n  // has been standardized by the International Electrotechnical Commission (IEC\n  // 61966-2-1).  The nonlinearity of the correction is designed to make the\n  // colors more perceptually uniform.  This color space has been adopted by\n  // several applications including Adobe Photoshop and Microsoft Windows color\n  // management.  OpenGL is agnostic on its RGB color space, but it is reasonable\n  // to assume it is close to this one.\n\n\n  if (r > 0.04045) r = Math.pow((r + 0.055) / 1.055, 2.4);else r /= 12.92;\n  if (g > 0.04045) g = Math.pow((g + 0.055) / 1.055, 2.4);else g /= 12.92;\n  if (b > 0.04045) b = Math.pow((b + 0.055) / 1.055, 2.4);else b /= 12.92; // Observer. = 2 deg, Illuminant = D65\n\n  xyz[0] = r * 0.4124 + g * 0.3576 + b * 0.1805;\n  xyz[1] = r * 0.2126 + g * 0.7152 + b * 0.0722;\n  xyz[2] = r * 0.0193 + g * 0.1192 + b * 0.9505;\n}\nfunction rgb2lab(rgb, lab) {\n  var xyz = [0, 0, 0];\n  rgb2xyz(rgb, xyz);\n  xyz2lab(xyz, lab);\n}\nfunction lab2rgb(lab, rgb) {\n  var xyz = [0, 0, 0];\n  lab2xyz(lab, xyz);\n  xyz2rgb(xyz, rgb);\n}\nfunction uninitializeBounds(bounds) {\n  bounds[0] = 1.0;\n  bounds[1] = -1.0;\n  bounds[2] = 1.0;\n  bounds[3] = -1.0;\n  bounds[4] = 1.0;\n  bounds[5] = -1.0;\n  return bounds;\n}\nfunction areBoundsInitialized(bounds) {\n  return !(bounds[1] - bounds[0] < 0.0);\n}\nfunction computeBoundsFromPoints(point1, point2, bounds) {\n  bounds[0] = Math.min(point1[0], point2[0]);\n  bounds[1] = Math.max(point1[0], point2[0]);\n  bounds[2] = Math.min(point1[1], point2[1]);\n  bounds[3] = Math.max(point1[1], point2[1]);\n  bounds[4] = Math.min(point1[2], point2[2]);\n  bounds[5] = Math.max(point1[2], point2[2]);\n  return bounds;\n}\nfunction clampValue(value, minValue, maxValue) {\n  if (value < minValue) {\n    return minValue;\n  }\n\n  if (value > maxValue) {\n    return maxValue;\n  }\n\n  return value;\n}\nfunction clampVector(vector, minVector, maxVector) {\n  var out = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0, 0, 0];\n  out[0] = clampValue(vector[0], minVector[0], maxVector[0]);\n  out[1] = clampValue(vector[1], minVector[1], maxVector[1]);\n  out[2] = clampValue(vector[2], minVector[2], maxVector[2]);\n  return out;\n}\nfunction clampAndNormalizeValue(value, range) {\n  var result = 0;\n\n  if (range[0] !== range[1]) {\n    // clamp\n    if (value < range[0]) {\n      result = range[0];\n    } else if (value > range[1]) {\n      result = range[1];\n    } else {\n      result = value;\n    } // normalize\n\n\n    result = (result - range[0]) / (range[1] - range[0]);\n  }\n\n  return result;\n}\nvar getScalarTypeFittingRange = notImplemented('GetScalarTypeFittingRange');\nvar getAdjustedScalarRange = notImplemented('GetAdjustedScalarRange');\nfunction extentIsWithinOtherExtent(extent1, extent2) {\n  if (!extent1 || !extent2) {\n    return 0;\n  }\n\n  for (var i = 0; i < 6; i += 2) {\n    if (extent1[i] < extent2[i] || extent1[i] > extent2[i + 1] || extent1[i + 1] < extent2[i] || extent1[i + 1] > extent2[i + 1]) {\n      return 0;\n    }\n  }\n\n  return 1;\n}\nfunction boundsIsWithinOtherBounds(bounds1_6, bounds2_6, delta_3) {\n  if (!bounds1_6 || !bounds2_6) {\n    return 0;\n  }\n\n  for (var i = 0; i < 6; i += 2) {\n    if (bounds1_6[i] + delta_3[i / 2] < bounds2_6[i] || bounds1_6[i] - delta_3[i / 2] > bounds2_6[i + 1] || bounds1_6[i + 1] + delta_3[i / 2] < bounds2_6[i] || bounds1_6[i + 1] - delta_3[i / 2] > bounds2_6[i + 1]) {\n      return 0;\n    }\n  }\n\n  return 1;\n}\nfunction pointIsWithinBounds(point_3, bounds_6, delta_3) {\n  if (!point_3 || !bounds_6 || !delta_3) {\n    return 0;\n  }\n\n  for (var i = 0; i < 3; i++) {\n    if (point_3[i] + delta_3[i] < bounds_6[2 * i] || point_3[i] - delta_3[i] > bounds_6[2 * i + 1]) {\n      return 0;\n    }\n  }\n\n  return 1;\n}\nfunction solve3PointCircle(p1, p2, p3, center) {\n  var v21 = createArray(3);\n  var v32 = createArray(3);\n  var v13 = createArray(3);\n  var v12 = createArray(3);\n  var v23 = createArray(3);\n  var v31 = createArray(3);\n\n  for (var i = 0; i < 3; ++i) {\n    v21[i] = p1[i] - p2[i];\n    v32[i] = p2[i] - p3[i];\n    v13[i] = p3[i] - p1[i];\n    v12[i] = -v21[i];\n    v23[i] = -v32[i];\n    v31[i] = -v13[i];\n  }\n\n  var norm12 = norm(v12);\n  var norm23 = norm(v23);\n  var norm13 = norm(v13);\n  var crossv21v32 = createArray(3);\n  cross(v21, v32, crossv21v32);\n  var normCross = norm(crossv21v32);\n  var radius = norm12 * norm23 * norm13 / (2 * normCross);\n  var normCross22 = 2 * normCross * normCross;\n  var alpha = norm23 * norm23 * dot(v21, v31) / normCross22;\n  var beta = norm13 * norm13 * dot(v12, v32) / normCross22;\n  var gamma = norm12 * norm12 * dot(v13, v23) / normCross22;\n\n  for (var _i6 = 0; _i6 < 3; ++_i6) {\n    center[_i6] = alpha * p1[_i6] + beta * p2[_i6] + gamma * p3[_i6];\n  }\n\n  return radius;\n}\nvar inf = Infinity;\nvar negInf = -Infinity;\nvar isInf = function isInf(value) {\n  return !Number.isFinite(value);\n};\nvar isFinite = Number.isFinite,\n    isNaN = Number.isNaN;\nvar isNan = isNaN; // JavaScript - add-on ----------------------\n\nfunction createUninitializedBounds() {\n  return [].concat([Number.MAX_VALUE, -Number.MAX_VALUE, // X\n  Number.MAX_VALUE, -Number.MAX_VALUE, // Y\n  Number.MAX_VALUE, -Number.MAX_VALUE // Z\n  ]);\n}\nfunction getMajorAxisIndex(vector) {\n  var maxValue = -1;\n  var axisIndex = -1;\n\n  for (var i = 0; i < vector.length; i++) {\n    var value = Math.abs(vector[i]);\n\n    if (value > maxValue) {\n      axisIndex = i;\n      maxValue = value;\n    }\n  }\n\n  return axisIndex;\n}\nfunction floatToHex2(value) {\n  var integer = Math.floor(value * 255);\n\n  if (integer > 15) {\n    return integer.toString(16);\n  }\n\n  return \"0\".concat(integer.toString(16));\n}\nfunction floatRGB2HexCode(rgbArray) {\n  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '#';\n  return \"\".concat(prefix).concat(rgbArray.map(floatToHex2).join(''));\n}\n\nfunction floatToChar(f) {\n  return Math.round(f * 255);\n}\n\nfunction float2CssRGBA(rgbArray) {\n  if (rgbArray.length === 3) {\n    return \"rgb(\".concat(rgbArray.map(floatToChar).join(', '), \")\");\n  }\n\n  return \"rgba(\".concat(floatToChar(rgbArray[0] || 0), \", \").concat(floatToChar(rgbArray[1] || 0), \", \").concat(floatToChar(rgbArray[2] || 0), \", \").concat(rgbArray[3] || 0, \")\");\n} // ----------------------------------------------------------------------------\n// Only Static API\n// ----------------------------------------------------------------------------\n\nvar vtkMath = {\n  Pi: Pi,\n  radiansFromDegrees: radiansFromDegrees,\n  degreesFromRadians: degreesFromRadians,\n  round: round,\n  floor: floor,\n  ceil: ceil,\n  ceilLog2: ceilLog2,\n  min: min,\n  max: max,\n  arrayMin: arrayMin,\n  arrayMax: arrayMax,\n  arrayRange: arrayRange,\n  isPowerOfTwo: isPowerOfTwo,\n  nearestPowerOfTwo: nearestPowerOfTwo,\n  factorial: factorial,\n  binomial: binomial,\n  beginCombination: beginCombination,\n  nextCombination: nextCombination,\n  randomSeed: randomSeed,\n  getSeed: getSeed,\n  random: random,\n  gaussian: gaussian,\n  add: add,\n  subtract: subtract,\n  multiplyScalar: multiplyScalar,\n  multiplyScalar2D: multiplyScalar2D,\n  multiplyAccumulate: multiplyAccumulate,\n  multiplyAccumulate2D: multiplyAccumulate2D,\n  dot: dot,\n  outer: outer,\n  cross: cross,\n  norm: norm,\n  normalize: normalize,\n  perpendiculars: perpendiculars,\n  projectVector: projectVector,\n  projectVector2D: projectVector2D,\n  distance2BetweenPoints: distance2BetweenPoints,\n  angleBetweenVectors: angleBetweenVectors,\n  gaussianAmplitude: gaussianAmplitude,\n  gaussianWeight: gaussianWeight,\n  dot2D: dot2D,\n  outer2D: outer2D,\n  norm2D: norm2D,\n  normalize2D: normalize2D,\n  determinant2x2: determinant2x2,\n  LUFactor3x3: LUFactor3x3,\n  LUSolve3x3: LUSolve3x3,\n  linearSolve3x3: linearSolve3x3,\n  multiply3x3_vect3: multiply3x3_vect3,\n  multiply3x3_mat3: multiply3x3_mat3,\n  multiplyMatrix: multiplyMatrix,\n  transpose3x3: transpose3x3,\n  invert3x3: invert3x3,\n  identity3x3: identity3x3,\n  identity: identity,\n  determinant3x3: determinant3x3,\n  quaternionToMatrix3x3: quaternionToMatrix3x3,\n  areEquals: areEquals,\n  areMatricesEqual: areMatricesEqual,\n  roundNumber: roundNumber,\n  roundVector: roundVector,\n  matrix3x3ToQuaternion: matrix3x3ToQuaternion,\n  multiplyQuaternion: multiplyQuaternion,\n  orthogonalize3x3: orthogonalize3x3,\n  diagonalize3x3: diagonalize3x3,\n  singularValueDecomposition3x3: singularValueDecomposition3x3,\n  solveLinearSystem: solveLinearSystem,\n  invertMatrix: invertMatrix,\n  luFactorLinearSystem: luFactorLinearSystem,\n  luSolveLinearSystem: luSolveLinearSystem,\n  estimateMatrixCondition: estimateMatrixCondition,\n  jacobi: jacobi,\n  jacobiN: jacobiN,\n  solveHomogeneousLeastSquares: solveHomogeneousLeastSquares,\n  solveLeastSquares: solveLeastSquares,\n  hex2float: hex2float,\n  rgb2hsv: rgb2hsv,\n  hsv2rgb: hsv2rgb,\n  lab2xyz: lab2xyz,\n  xyz2lab: xyz2lab,\n  xyz2rgb: xyz2rgb,\n  rgb2xyz: rgb2xyz,\n  rgb2lab: rgb2lab,\n  lab2rgb: lab2rgb,\n  uninitializeBounds: uninitializeBounds,\n  areBoundsInitialized: areBoundsInitialized,\n  computeBoundsFromPoints: computeBoundsFromPoints,\n  clampValue: clampValue,\n  clampVector: clampVector,\n  clampAndNormalizeValue: clampAndNormalizeValue,\n  getScalarTypeFittingRange: getScalarTypeFittingRange,\n  getAdjustedScalarRange: getAdjustedScalarRange,\n  extentIsWithinOtherExtent: extentIsWithinOtherExtent,\n  boundsIsWithinOtherBounds: boundsIsWithinOtherBounds,\n  pointIsWithinBounds: pointIsWithinBounds,\n  solve3PointCircle: solve3PointCircle,\n  inf: inf,\n  negInf: negInf,\n  isInf: isInf,\n  isNan: isNaN,\n  isNaN: isNaN,\n  isFinite: isFinite,\n  // JS add-on\n  createUninitializedBounds: createUninitializedBounds,\n  getMajorAxisIndex: getMajorAxisIndex,\n  floatToHex2: floatToHex2,\n  floatRGB2HexCode: floatRGB2HexCode,\n  float2CssRGBA: float2CssRGBA\n};\n\nvar vtkMath$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createArray: createArray,\n  Pi: Pi,\n  radiansFromDegrees: radiansFromDegrees,\n  degreesFromRadians: degreesFromRadians,\n  round: round,\n  floor: floor,\n  ceil: ceil,\n  min: min,\n  max: max,\n  arrayMin: arrayMin,\n  arrayMax: arrayMax,\n  arrayRange: arrayRange,\n  ceilLog2: ceilLog2,\n  factorial: factorial,\n  nearestPowerOfTwo: nearestPowerOfTwo,\n  isPowerOfTwo: isPowerOfTwo,\n  binomial: binomial,\n  beginCombination: beginCombination,\n  nextCombination: nextCombination,\n  randomSeed: randomSeed,\n  getSeed: getSeed,\n  random: random,\n  gaussian: gaussian,\n  add: add,\n  subtract: subtract,\n  multiplyScalar: multiplyScalar,\n  multiplyScalar2D: multiplyScalar2D,\n  multiplyAccumulate: multiplyAccumulate,\n  multiplyAccumulate2D: multiplyAccumulate2D,\n  dot: dot,\n  outer: outer,\n  cross: cross,\n  norm: norm,\n  normalize: normalize,\n  perpendiculars: perpendiculars,\n  projectVector: projectVector,\n  dot2D: dot2D,\n  projectVector2D: projectVector2D,\n  distance2BetweenPoints: distance2BetweenPoints,\n  angleBetweenVectors: angleBetweenVectors,\n  signedAngleBetweenVectors: signedAngleBetweenVectors,\n  gaussianAmplitude: gaussianAmplitude,\n  gaussianWeight: gaussianWeight,\n  outer2D: outer2D,\n  norm2D: norm2D,\n  normalize2D: normalize2D,\n  rowsToMat4: rowsToMat4,\n  columnsToMat4: columnsToMat4,\n  rowsToMat3: rowsToMat3,\n  columnsToMat3: columnsToMat3,\n  determinant2x2: determinant2x2,\n  LUFactor3x3: LUFactor3x3,\n  LUSolve3x3: LUSolve3x3,\n  linearSolve3x3: linearSolve3x3,\n  multiply3x3_vect3: multiply3x3_vect3,\n  multiply3x3_mat3: multiply3x3_mat3,\n  multiplyMatrix: multiplyMatrix,\n  transpose3x3: transpose3x3,\n  invert3x3: invert3x3,\n  determinant3x3: determinant3x3,\n  identity3x3: identity3x3,\n  identity: identity,\n  quaternionToMatrix3x3: quaternionToMatrix3x3,\n  areEquals: areEquals,\n  areMatricesEqual: areMatricesEqual,\n  roundNumber: roundNumber,\n  roundVector: roundVector,\n  jacobiN: jacobiN,\n  matrix3x3ToQuaternion: matrix3x3ToQuaternion,\n  multiplyQuaternion: multiplyQuaternion,\n  orthogonalize3x3: orthogonalize3x3,\n  diagonalize3x3: diagonalize3x3,\n  singularValueDecomposition3x3: singularValueDecomposition3x3,\n  luFactorLinearSystem: luFactorLinearSystem,\n  luSolveLinearSystem: luSolveLinearSystem,\n  solveLinearSystem: solveLinearSystem,\n  invertMatrix: invertMatrix,\n  estimateMatrixCondition: estimateMatrixCondition,\n  jacobi: jacobi,\n  solveHomogeneousLeastSquares: solveHomogeneousLeastSquares,\n  solveLeastSquares: solveLeastSquares,\n  hex2float: hex2float,\n  rgb2hsv: rgb2hsv,\n  hsv2rgb: hsv2rgb,\n  lab2xyz: lab2xyz,\n  xyz2lab: xyz2lab,\n  xyz2rgb: xyz2rgb,\n  rgb2xyz: rgb2xyz,\n  rgb2lab: rgb2lab,\n  lab2rgb: lab2rgb,\n  uninitializeBounds: uninitializeBounds,\n  areBoundsInitialized: areBoundsInitialized,\n  computeBoundsFromPoints: computeBoundsFromPoints,\n  clampValue: clampValue,\n  clampVector: clampVector,\n  clampAndNormalizeValue: clampAndNormalizeValue,\n  getScalarTypeFittingRange: getScalarTypeFittingRange,\n  getAdjustedScalarRange: getAdjustedScalarRange,\n  extentIsWithinOtherExtent: extentIsWithinOtherExtent,\n  boundsIsWithinOtherBounds: boundsIsWithinOtherBounds,\n  pointIsWithinBounds: pointIsWithinBounds,\n  solve3PointCircle: solve3PointCircle,\n  inf: inf,\n  negInf: negInf,\n  isInf: isInf,\n  isFinite: isFinite,\n  isNaN: isNaN,\n  isNan: isNan,\n  createUninitializedBounds: createUninitializedBounds,\n  getMajorAxisIndex: getMajorAxisIndex,\n  floatToHex2: floatToHex2,\n  floatRGB2HexCode: floatRGB2HexCode,\n  float2CssRGBA: float2CssRGBA,\n  'default': vtkMath\n});\n\nexport { ceilLog2 as $, rowsToMat3 as A, degreesFromRadians as B, areEquals as C, clampValue as D, arrayRange as E, getMajorAxisIndex as F, isInf as G, rgb2hsv as H, rgb2lab as I, lab2rgb as J, floor as K, round as L, normalize2D as M, nearestPowerOfTwo as N, createUninitializedBounds as O, multiply3x3_vect3 as P, areBoundsInitialized as Q, isPowerOfTwo as R, angleBetweenVectors as S, signedAngleBetweenVectors as T, createArray as U, Pi as V, ceil as W, min as X, max as Y, arrayMin as Z, arrayMax as _, areMatricesEqual as a, factorial as a0, binomial as a1, beginCombination as a2, nextCombination as a3, randomSeed as a4, getSeed as a5, gaussian as a6, multiplyScalar2D as a7, multiplyAccumulate2D as a8, outer as a9, luFactorLinearSystem as aA, luSolveLinearSystem as aB, invertMatrix as aC, estimateMatrixCondition as aD, solveHomogeneousLeastSquares as aE, solveLeastSquares as aF, hex2float as aG, lab2xyz as aH, xyz2lab as aI, xyz2rgb as aJ, rgb2xyz as aK, clampAndNormalizeValue as aL, getScalarTypeFittingRange as aM, getAdjustedScalarRange as aN, extentIsWithinOtherExtent as aO, boundsIsWithinOtherBounds as aP, pointIsWithinBounds as aQ, solve3PointCircle as aR, inf as aS, negInf as aT, isFinite as aU, isNaN as aV, floatToHex2 as aW, floatRGB2HexCode as aX, float2CssRGBA as aY, projectVector as aa, dot2D as ab, projectVector2D as ac, gaussianAmplitude as ad, gaussianWeight as ae, outer2D as af, norm2D as ag, rowsToMat4 as ah, columnsToMat4 as ai, columnsToMat3 as aj, LUFactor3x3 as ak, LUSolve3x3 as al, linearSolve3x3 as am, multiply3x3_mat3 as an, multiplyMatrix as ao, transpose3x3 as ap, invert3x3 as aq, identity3x3 as ar, identity as as, quaternionToMatrix3x3 as at, roundNumber as au, matrix3x3ToQuaternion as av, multiplyQuaternion as aw, orthogonalize3x3 as ax, diagonalize3x3 as ay, singularValueDecomposition3x3 as az, roundVector as b, computeBoundsFromPoints as c, dot as d, clampVector as e, distance2BetweenPoints as f, vtkMath as g, hsv2rgb as h, isNan as i, solveLinearSystem as j, cross as k, add as l, normalize as m, norm as n, multiplyAccumulate as o, determinant2x2 as p, jacobiN as q, radiansFromDegrees as r, subtract as s, perpendiculars as t, uninitializeBounds as u, vtkMath$1 as v, jacobi as w, multiplyScalar as x, random as y, determinant3x3 as z };\n"],
  "mappings": "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",
  "names": ["module", "define", "module", "define", "module", "define", "module", "define", "me", "seed", "module", "define", "me", "seed", "module", "define", "seedrandom", "prng", "seed", "t", "i", "j", "s", "require_seedrandom", "Pi", "seedrandom", "vtkROTATE", "isInf"]
}
