{
  "version": 3,
  "sources": ["../../@kitware/vtk.js/Filters/Sources/ConeSource.js", "dep:@kitware_vtk__js_Filters_Sources_ConeSource"],
  "sourcesContent": ["import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport macro from '../../macros.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkMatrixBuilder from '../../Common/Core/MatrixBuilder.js';\n\n// vtkConeSource methods\n// ----------------------------------------------------------------------------\n\nfunction vtkConeSource(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkConeSource');\n\n  function requestData(inData, outData) {\n    var _vtkMatrixBuilder$bui;\n\n    if (model.deleted) {\n      return;\n    }\n\n    var dataset = outData[0];\n    var angle = 2 * Math.PI / model.resolution;\n    var xbot = -model.height / 2.0;\n    var numberOfPoints = model.resolution + 1;\n    var cellArraySize = 4 * model.resolution + 1 + model.resolution; // Points\n\n    var pointIdx = 0;\n    var points = macro.newTypedArray(model.pointType, numberOfPoints * 3); // Cells\n\n    var cellLocation = 0;\n    var polys = new Uint32Array(cellArraySize); // Add summit point\n\n    points[0] = model.height / 2.0;\n    points[1] = 0.0;\n    points[2] = 0.0; // Create bottom cell\n\n    if (model.capping) {\n      polys[cellLocation++] = model.resolution;\n    } // Add all points\n\n\n    for (var i = 0; i < model.resolution; i++) {\n      pointIdx++;\n      points[pointIdx * 3 + 0] = xbot;\n      points[pointIdx * 3 + 1] = model.radius * Math.cos(i * angle);\n      points[pointIdx * 3 + 2] = model.radius * Math.sin(i * angle); // Add points to bottom cell in reverse order\n\n      if (model.capping) {\n        polys[model.resolution - cellLocation++ + 1] = pointIdx;\n      }\n    } // Add all triangle cells\n\n\n    for (var _i = 0; _i < model.resolution; _i++) {\n      polys[cellLocation++] = 3;\n      polys[cellLocation++] = 0;\n      polys[cellLocation++] = _i + 1;\n      polys[cellLocation++] = _i + 2 > model.resolution ? 1 : _i + 2;\n    } // Apply transformation to the points coordinates\n\n\n    (_vtkMatrixBuilder$bui = vtkMatrixBuilder.buildFromRadian()).translate.apply(_vtkMatrixBuilder$bui, _toConsumableArray(model.center)).rotateFromDirections([1, 0, 0], model.direction).apply(points);\n\n    dataset = vtkPolyData.newInstance();\n    dataset.getPoints().setData(points, 3);\n    dataset.getPolys().setData(polys, 1); // Update output\n\n    outData[0] = dataset;\n  } // Expose methods\n\n\n  publicAPI.requestData = requestData;\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  height: 1.0,\n  radius: 0.5,\n  resolution: 6,\n  center: [0, 0, 0],\n  direction: [1.0, 0.0, 0.0],\n  capping: true,\n  pointType: 'Float64Array'\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['height', 'radius', 'resolution', 'capping']);\n  macro.setGetArray(publicAPI, model, ['center', 'direction'], 3);\n  macro.algo(publicAPI, model, 0, 1);\n  vtkConeSource(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkConeSource'); // ----------------------------------------------------------------------------\n\nvar vtkConeSource$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkConeSource$1 as default, extend, newInstance };\n", "import d from \"./node_modules/@kitware/vtk.js/Filters/Sources/ConeSource.js\";export default d;\nexport * from \"./node_modules/@kitware/vtk.js/Filters/Sources/ConeSource.js\""],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAQA,SAAS,cAAc,WAAW,OAAO;AAEvC,QAAM,eAAe,KAAK,eAAe;AAEzC,WAAS,YAAY,QAAQ,SAAS;AACpC,QAAI;AAEJ,QAAI,MAAM,SAAS;AACjB;AAAA,IACF;AAEA,QAAI,UAAU,QAAQ;AACtB,QAAI,QAAQ,IAAI,KAAK,KAAK,MAAM;AAChC,QAAI,OAAO,CAAC,MAAM,SAAS;AAC3B,QAAI,iBAAiB,MAAM,aAAa;AACxC,QAAI,gBAAgB,IAAI,MAAM,aAAa,IAAI,MAAM;AAErD,QAAI,WAAW;AACf,QAAI,SAAS,MAAM,cAAc,MAAM,WAAW,iBAAiB,CAAC;AAEpE,QAAI,eAAe;AACnB,QAAI,QAAQ,IAAI,YAAY,aAAa;AAEzC,WAAO,KAAK,MAAM,SAAS;AAC3B,WAAO,KAAK;AACZ,WAAO,KAAK;AAEZ,QAAI,MAAM,SAAS;AACjB,YAAM,kBAAkB,MAAM;AAAA,IAChC;AAGA,aAAS,IAAI,GAAG,IAAI,MAAM,YAAY,KAAK;AACzC;AACA,aAAO,WAAW,IAAI,KAAK;AAC3B,aAAO,WAAW,IAAI,KAAK,MAAM,SAAS,KAAK,IAAI,IAAI,KAAK;AAC5D,aAAO,WAAW,IAAI,KAAK,MAAM,SAAS,KAAK,IAAI,IAAI,KAAK;AAE5D,UAAI,MAAM,SAAS;AACjB,cAAM,MAAM,aAAa,iBAAiB,KAAK;AAAA,MACjD;AAAA,IACF;AAGA,aAAS,KAAK,GAAG,KAAK,MAAM,YAAY,MAAM;AAC5C,YAAM,kBAAkB;AACxB,YAAM,kBAAkB;AACxB,YAAM,kBAAkB,KAAK;AAC7B,YAAM,kBAAkB,KAAK,IAAI,MAAM,aAAa,IAAI,KAAK;AAAA,IAC/D;AAGA,KAAC,wBAAwB,iBAAiB,gBAAgB,GAAG,UAAU,MAAM,uBAAuB,mBAAmB,MAAM,MAAM,CAAC,EAAE,qBAAqB,CAAC,GAAG,GAAG,CAAC,GAAG,MAAM,SAAS,EAAE,MAAM,MAAM;AAEnM,cAAU,cAAY,YAAY;AAClC,YAAQ,UAAU,EAAE,QAAQ,QAAQ,CAAC;AACrC,YAAQ,SAAS,EAAE,QAAQ,OAAO,CAAC;AAEnC,YAAQ,KAAK;AAAA,EACf;AAGA,YAAU,cAAc;AAC1B;AAKA,IAAI,iBAAiB;AAAA,EACnB,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,YAAY;AAAA,EACZ,QAAQ,CAAC,GAAG,GAAG,CAAC;AAAA,EAChB,WAAW,CAAC,GAAK,GAAK,CAAG;AAAA,EACzB,SAAS;AAAA,EACT,WAAW;AACb;AAEA,SAAS,OAAO,WAAW,OAAO;AAChC,MAAI,gBAAgB,UAAU,SAAS,KAAK,UAAU,OAAO,SAAY,UAAU,KAAK,CAAC;AACzF,SAAO,OAAO,OAAO,gBAAgB,aAAa;AAElD,QAAM,IAAI,WAAW,KAAK;AAC1B,QAAM,OAAO,WAAW,OAAO,CAAC,UAAU,UAAU,cAAc,SAAS,CAAC;AAC5E,QAAM,YAAY,WAAW,OAAO,CAAC,UAAU,WAAW,GAAG,CAAC;AAC9D,QAAM,KAAK,WAAW,OAAO,GAAG,CAAC;AACjC,gBAAc,WAAW,KAAK;AAChC;AAEA,IAAI,cAAc,MAAM,YAAY,QAAQ,eAAe;AAE3D,IAAI,kBAAkB;AAAA,EACpB;AAAA,EACA;AACF;;;ACtG6E,IAAO,oDAAQ;",
  "names": []
}
